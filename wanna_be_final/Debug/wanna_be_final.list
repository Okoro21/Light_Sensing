
wanna_be_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007294  08007294  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007294  08007294  00017294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800729c  0800729c  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800729c  0800729c  0001729c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080072a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08007318  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  080073b8  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004764  200001b4  08007458  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004918  08007458  00024918  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020147  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003cf8  00000000  00000000  00040329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001890  00000000  00000000  00044028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001708  00000000  00000000  000458b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002c5c0  00000000  00000000  00046fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c361  00000000  00000000  00073580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00112b50  00000000  00000000  0008f8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a2431  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d20  00000000  00000000  001a2484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08007168 	.word	0x08007168

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08007168 	.word	0x08007168

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200001d0 	.word	0x200001d0
 8000614:	20000284 	.word	0x20000284

08000618 <SetMembers>:
 * Pre Function call: SPI_sensor struct has been instantiated within calling function
 * Post Function call: count and ready_check members have been set to zero
 */

void SetMembers(SPI_sensor *my_struct)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	my_struct -> count = 0;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	my_struct -> ready_check = 0;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	memset(my_struct -> ADC_vals, 0, BUFSIZE * sizeof(uint8_t));
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3304      	adds	r3, #4
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 f8c4 	bl	80067c8 <memset>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <sensorHandle>:
/* Private user code ---------------------------------------------------------*/

/* USER CODE BEGIN 0 */

void sensorHandle(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
		rawADC = HAL_ADC_GetValue(my_struct -> ADC_ptr);
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <sensorHandle+0x80>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f001 f84b 	bl	80016f0 <HAL_ADC_GetValue>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <sensorHandle+0x84>)
 8000660:	801a      	strh	r2, [r3, #0]

		if (rawADC > 3000)
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <sensorHandle+0x84>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800066a:	4293      	cmp	r3, r2
 800066c:	d903      	bls.n	8000676 <sensorHandle+0x2e>
			rawADC = 3000;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <sensorHandle+0x84>)
 8000670:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000674:	801a      	strh	r2, [r3, #0]

		my_struct -> ADC_vals[my_struct -> count] = (uint8_t) (rawADC * V_CONVERSION);
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <sensorHandle+0x84>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	ee07 3a90 	vmov	s15, r3
 800067e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000682:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80006c0 <sensorHandle+0x78>
 8000686:	ee27 7b06 	vmul.f64	d7, d7, d6
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <sensorHandle+0x80>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <sensorHandle+0x80>)
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	f892 2104 	ldrb.w	r2, [r2, #260]	; 0x104
 8000696:	4611      	mov	r1, r2
 8000698:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800069c:	edc7 7a01 	vstr	s15, [r7, #4]
 80006a0:	793a      	ldrb	r2, [r7, #4]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	711a      	strb	r2, [r3, #4]
		my_struct -> count++;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <sensorHandle+0x80>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80006b0:	3201      	adds	r2, #1
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	24dd2f1b 	.word	0x24dd2f1b
 80006c4:	3fb58106 	.word	0x3fb58106
 80006c8:	20000b4c 	.word	0x20000b4c
 80006cc:	20000b50 	.word	0x20000b50

080006d0 <TxDataHandle>:

void TxDataHandle(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	if (my_struct->count < BUFSIZE)
	{
		for (int i = 0; i < BUFSIZE; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e01a      	b.n	8000712 <TxDataHandle+0x42>
		{
			bytes = sprintf(convertedADC, "%hu\r\n", my_struct -> ADC_vals[i]);
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <TxDataHandle+0x68>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	3304      	adds	r3, #4
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4914      	ldr	r1, [pc, #80]	; (800073c <TxDataHandle+0x6c>)
 80006ec:	4814      	ldr	r0, [pc, #80]	; (8000740 <TxDataHandle+0x70>)
 80006ee:	f006 f981 	bl	80069f4 <siprintf>
 80006f2:	4603      	mov	r3, r0
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <TxDataHandle+0x74>)
 80006f8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)convertedADC, bytes, HAL_MAX_DELAY);
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <TxDataHandle+0x74>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000704:	490e      	ldr	r1, [pc, #56]	; (8000740 <TxDataHandle+0x70>)
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <TxDataHandle+0x78>)
 8000708:	f003 fe22 	bl	8004350 <HAL_UART_Transmit>
		for (int i = 0; i < BUFSIZE; i++)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3301      	adds	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2bff      	cmp	r3, #255	; 0xff
 8000716:	dde1      	ble.n	80006dc <TxDataHandle+0xc>
		}

		SetMembers(my_struct);
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <TxDataHandle+0x68>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff7b 	bl	8000618 <SetMembers>
		HAL_ADC_Start_IT(my_struct -> ADC_ptr);
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <TxDataHandle+0x68>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f000 ff09 	bl	8001540 <HAL_ADC_Start_IT>
	 }
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000b4c 	.word	0x20000b4c
 800073c:	080071a0 	.word	0x080071a0
 8000740:	20000b54 	.word	0x20000b54
 8000744:	20000b5e 	.word	0x20000b5e
 8000748:	200005b4 	.word	0x200005b4

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b5b0      	push	{r4, r5, r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	my_struct -> ADC_ptr = &hadc1;
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <main+0x90>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <main+0x94>)
 8000758:	601a      	str	r2, [r3, #0]
	SetMembers(my_struct);
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <main+0x90>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff5a 	bl	8000618 <SetMembers>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fd89 	bl	800127a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f844 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f9b0 	bl	8000ad0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000770:	f000 f902 	bl	8000978 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000774:	f000 f94e 	bl	8000a14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000778:	f000 f97c 	bl	8000a74 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800077c:	f000 f8aa 	bl	80008d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(my_struct -> ADC_ptr);
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <main+0x90>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fe0c 	bl	80013a4 <HAL_ADC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of External_Sensor */
  osThreadDef(External_Sensor, StartDefaultTask, osPriorityNormal, 0, 128);
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <main+0x98>)
 800078e:	f107 041c 	add.w	r4, r7, #28
 8000792:	461d      	mov	r5, r3
 8000794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000798:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800079c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  External_SensorHandle = osThreadCreate(osThread(External_Sensor), NULL);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fd83 	bl	80052b2 <osThreadCreate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <main+0x9c>)
 80007b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Transmit_Data */
  osThreadDef(Transmit_Data, StartTask02, osPriorityAboveNormal, 0, 128);
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <main+0xa0>)
 80007b4:	463c      	mov	r4, r7
 80007b6:	461d      	mov	r5, r3
 80007b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Transmit_DataHandle = osThreadCreate(osThread(Transmit_Data), NULL);
 80007c4:	463b      	mov	r3, r7
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 fd72 	bl	80052b2 <osThreadCreate>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <main+0xa4>)
 80007d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007d4:	f004 fd66 	bl	80052a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0x8c>
 80007da:	bf00      	nop
 80007dc:	20000b4c 	.word	0x20000b4c
 80007e0:	200004bc 	.word	0x200004bc
 80007e4:	080071a8 	.word	0x080071a8
 80007e8:	20000b44 	.word	0x20000b44
 80007ec:	080071c4 	.word	0x080071c4
 80007f0:	20000b48 	.word	0x20000b48

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2234      	movs	r2, #52	; 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f005 ffe0 	bl	80067c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000818:	f002 f8de 	bl	80029d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <SystemClock_Config+0xd8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a2a      	ldr	r2, [pc, #168]	; (80008cc <SystemClock_Config+0xd8>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xd8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <SystemClock_Config+0xdc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <SystemClock_Config+0xdc>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <SystemClock_Config+0xdc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000864:	23d8      	movs	r3, #216	; 0xd8
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800086c:	2309      	movs	r3, #9
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4618      	mov	r0, r3
 800087a:	f002 f90d 	bl	8002a98 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000884:	f000 f9ee 	bl	8000c64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000888:	f002 f8b6 	bl	80029f8 <HAL_PWREx_EnableOverDrive>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000892:	f000 f9e7 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2107      	movs	r1, #7
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fb9d 	bl	8002ff4 <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008c0:	f000 f9d0 	bl	8000c64 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	; 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_ADC1_Init+0x98>)
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <MX_ADC1_Init+0x9c>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_ADC1_Init+0x98>)
 80008ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_ADC1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_ADC1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_ADC1_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_ADC1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_ADC1_Init+0x98>)
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <MX_ADC1_Init+0xa0>)
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_ADC1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_ADC1_Init+0x98>)
 8000922:	2201      	movs	r2, #1
 8000924:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_ADC1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_ADC1_Init+0x98>)
 8000930:	2201      	movs	r2, #1
 8000932:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_ADC1_Init+0x98>)
 8000936:	f000 fcf1 	bl	800131c <HAL_ADC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000940:	f000 f990 	bl	8000c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000948:	2301      	movs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_ADC1_Init+0x98>)
 8000956:	f000 fed9 	bl	800170c <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000960:	f000 f980 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200004bc 	.word	0x200004bc
 8000970:	40012000 	.word	0x40012000
 8000974:	0f000001 	.word	0x0f000001

08000978 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_ETH_Init+0x84>)
 800097e:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <MX_ETH_Init+0x88>)
 8000980:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_ETH_Init+0x8c>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_ETH_Init+0x8c>)
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_ETH_Init+0x8c>)
 8000990:	22e1      	movs	r2, #225	; 0xe1
 8000992:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_ETH_Init+0x8c>)
 8000996:	2200      	movs	r2, #0
 8000998:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_ETH_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_ETH_Init+0x8c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_ETH_Init+0x84>)
 80009a8:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <MX_ETH_Init+0x8c>)
 80009aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_ETH_Init+0x84>)
 80009ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009b2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_ETH_Init+0x84>)
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <MX_ETH_Init+0x90>)
 80009b8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_ETH_Init+0x84>)
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <MX_ETH_Init+0x94>)
 80009be:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_ETH_Init+0x84>)
 80009c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009c6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <MX_ETH_Init+0x84>)
 80009ca:	f001 f9d1 	bl	8001d70 <HAL_ETH_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009d4:	f000 f946 	bl	8000c64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009d8:	2238      	movs	r2, #56	; 0x38
 80009da:	2100      	movs	r1, #0
 80009dc:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_ETH_Init+0x98>)
 80009de:	f005 fef3 	bl	80067c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_ETH_Init+0x98>)
 80009e4:	2221      	movs	r2, #33	; 0x21
 80009e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_ETH_Init+0x98>)
 80009ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_ETH_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000504 	.word	0x20000504
 8000a00:	40028000 	.word	0x40028000
 8000a04:	20000b60 	.word	0x20000b60
 8000a08:	20000114 	.word	0x20000114
 8000a0c:	20000074 	.word	0x20000074
 8000a10:	20000484 	.word	0x20000484

08000a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a1a:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <MX_USART3_UART_Init+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART3_UART_Init+0x58>)
 8000a58:	f003 fc2c 	bl	80042b4 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f8ff 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200005b4 	.word	0x200005b4
 8000a70:	40004800 	.word	0x40004800

08000a74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a82:	2206      	movs	r2, #6
 8000a84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a88:	2202      	movs	r2, #2
 8000a8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	f001 fe45 	bl	8002746 <HAL_PCD_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f8cf 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000063c 	.word	0x2000063c

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08c      	sub	sp, #48	; 0x30
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a46      	ldr	r2, [pc, #280]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b3b      	ldr	r3, [pc, #236]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a3a      	ldr	r2, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a34      	ldr	r2, [pc, #208]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2e      	ldr	r2, [pc, #184]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <MX_GPIO_Init+0x134>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b7c:	4822      	ldr	r0, [pc, #136]	; (8000c08 <MX_GPIO_Init+0x138>)
 8000b7e:	f001 fdc9 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2140      	movs	r1, #64	; 0x40
 8000b86:	4821      	ldr	r0, [pc, #132]	; (8000c0c <MX_GPIO_Init+0x13c>)
 8000b88:	f001 fdc4 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481b      	ldr	r0, [pc, #108]	; (8000c10 <MX_GPIO_Init+0x140>)
 8000ba4:	f001 fc0a 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ba8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_GPIO_Init+0x138>)
 8000bc2:	f001 fbfb 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <MX_GPIO_Init+0x13c>)
 8000bde:	f001 fbed 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_GPIO_Init+0x13c>)
 8000bf6:	f001 fbe1 	bl	80023bc <HAL_GPIO_Init>

}
 8000bfa:	bf00      	nop
 8000bfc:	3730      	adds	r7, #48	; 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40021800 	.word	0x40021800
 8000c10:	40020800 	.word	0x40020800

08000c14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	//This is our extern sensor function

  /* Infinite loop */
  for(;;)
  {
	  sensorHandle();
 8000c1c:	f7ff fd14 	bl	8000648 <sensorHandle>
	  osDelay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f004 fb92 	bl	800534a <osDelay>
	  sensorHandle();
 8000c26:	e7f9      	b.n	8000c1c <StartDefaultTask+0x8>

08000c28 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//This is our TxData function to python
  /* Infinite loop */
  for(;;)
  {
	  TxDataHandle();
 8000c30:	f7ff fd4e 	bl	80006d0 <TxDataHandle>
	  osDelay(2000);
 8000c34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c38:	f004 fb87 	bl	800534a <osDelay>
	  TxDataHandle();
 8000c3c:	e7f8      	b.n	8000c30 <StartTask02+0x8>
	...

08000c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d101      	bne.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c52:	f000 fb1f 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40001000 	.word	0x40001000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210f      	movs	r1, #15
 8000caa:	f06f 0001 	mvn.w	r0, #1
 8000cae:	f001 f835 	bl	8001d1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <HAL_ADC_MspInit+0x74>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d123      	bne.n	8000d2a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_ADC_MspInit+0x78>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <HAL_ADC_MspInit+0x78>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_ADC_MspInit+0x78>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_ADC_MspInit+0x78>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <HAL_ADC_MspInit+0x78>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_ADC_MspInit+0x78>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d12:	2301      	movs	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_ADC_MspInit+0x7c>)
 8000d26:	f001 fb49 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40012000 	.word	0x40012000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a4e      	ldr	r2, [pc, #312]	; (8000e98 <HAL_ETH_MspInit+0x158>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	f040 8096 	bne.w	8000e90 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d64:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a4c      	ldr	r2, [pc, #304]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b4a      	ldr	r3, [pc, #296]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d78:	623b      	str	r3, [r7, #32]
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	4b47      	ldr	r3, [pc, #284]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a46      	ldr	r2, [pc, #280]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000d82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	4b41      	ldr	r3, [pc, #260]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a40      	ldr	r2, [pc, #256]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000d9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b3e      	ldr	r3, [pc, #248]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a3a      	ldr	r2, [pc, #232]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b2c      	ldr	r3, [pc, #176]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df4:	4b29      	ldr	r3, [pc, #164]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <HAL_ETH_MspInit+0x15c>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e0c:	2332      	movs	r3, #50	; 0x32
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1c:	230b      	movs	r3, #11
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	481e      	ldr	r0, [pc, #120]	; (8000ea0 <HAL_ETH_MspInit+0x160>)
 8000e28:	f001 fac8 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e2c:	2386      	movs	r3, #134	; 0x86
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <HAL_ETH_MspInit+0x164>)
 8000e48:	f001 fab8 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e5e:	230b      	movs	r3, #11
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <HAL_ETH_MspInit+0x168>)
 8000e6a:	f001 faa7 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e80:	230b      	movs	r3, #11
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4808      	ldr	r0, [pc, #32]	; (8000eac <HAL_ETH_MspInit+0x16c>)
 8000e8c:	f001 fa96 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3738      	adds	r7, #56	; 0x38
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40028000 	.word	0x40028000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40021800 	.word	0x40021800

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ae      	sub	sp, #184	; 0xb8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2290      	movs	r2, #144	; 0x90
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 fc79 	bl	80067c8 <memset>
  if(huart->Instance==USART3)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <HAL_UART_MspInit+0xb4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d13c      	bne.n	8000f5a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f002 fad8 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efa:	f7ff feb3 	bl	8000c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_UART_MspInit+0xbc>)
 8000f56:	f001 fa31 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	37b8      	adds	r7, #184	; 0xb8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40004800 	.word	0x40004800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ae      	sub	sp, #184	; 0xb8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2290      	movs	r2, #144	; 0x90
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f005 fc19 	bl	80067c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9e:	d159      	bne.n	8001054 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fa4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 fa77 	bl	80034a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fbc:	f7ff fe52 	bl	8000c64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <HAL_PCD_MspInit+0xec>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_PCD_MspInit+0xec>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_PCD_MspInit+0xec>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fd8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4818      	ldr	r0, [pc, #96]	; (8001060 <HAL_PCD_MspInit+0xf0>)
 8001000:	f001 f9dc 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800101c:	4619      	mov	r1, r3
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <HAL_PCD_MspInit+0xf0>)
 8001020:	f001 f9cc 	bl	80023bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_PCD_MspInit+0xec>)
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <HAL_PCD_MspInit+0xec>)
 800102a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102e:	6353      	str	r3, [r2, #52]	; 0x34
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_PCD_MspInit+0xec>)
 8001032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_PCD_MspInit+0xec>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_PCD_MspInit+0xec>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6453      	str	r3, [r2, #68]	; 0x44
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_PCD_MspInit+0xec>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	37b8      	adds	r7, #184	; 0xb8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000

08001064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001074:	4b33      	ldr	r3, [pc, #204]	; (8001144 <HAL_InitTick+0xe0>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a32      	ldr	r2, [pc, #200]	; (8001144 <HAL_InitTick+0xe0>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <HAL_InitTick+0xe0>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800108c:	f107 0210 	add.w	r2, r7, #16
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f9d2 	bl	8003440 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d103      	bne.n	80010ae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010a6:	f002 f9a3 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 80010aa:	6378      	str	r0, [r7, #52]	; 0x34
 80010ac:	e004      	b.n	80010b8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ae:	f002 f99f 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 80010b2:	4603      	mov	r3, r0
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	4a23      	ldr	r2, [pc, #140]	; (8001148 <HAL_InitTick+0xe4>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	0c9b      	lsrs	r3, r3, #18
 80010c2:	3b01      	subs	r3, #1
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_InitTick+0xe8>)
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <HAL_InitTick+0xec>)
 80010ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <HAL_InitTick+0xe8>)
 80010ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <HAL_InitTick+0xe8>)
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <HAL_InitTick+0xe8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_InitTick+0xe8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_InitTick+0xe8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <HAL_InitTick+0xe8>)
 80010ee:	f002 fe01 	bl	8003cf4 <HAL_TIM_Base_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d11b      	bne.n	8001138 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <HAL_InitTick+0xe8>)
 8001102:	f002 fe59 	bl	8003db8 <HAL_TIM_Base_Start_IT>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800110c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001110:	2b00      	cmp	r3, #0
 8001112:	d111      	bne.n	8001138 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001114:	2036      	movs	r0, #54	; 0x36
 8001116:	f000 fe1d 	bl	8001d54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d808      	bhi.n	8001132 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	2036      	movs	r0, #54	; 0x36
 8001126:	f000 fdf9 	bl	8001d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_InitTick+0xf0>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e002      	b.n	8001138 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001138:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800113c:	4618      	mov	r0, r3
 800113e:	3738      	adds	r7, #56	; 0x38
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	431bde83 	.word	0x431bde83
 800114c:	20000b68 	.word	0x20000b68
 8001150:	40001000 	.word	0x40001000
 8001154:	20000004 	.word	0x20000004

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM6_DAC_IRQHandler+0x10>)
 800118a:	f002 fe8d 	bl	8003ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000b68 	.word	0x20000b68

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f005 fac4 	bl	8006754 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20080000 	.word	0x20080000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000bb4 	.word	0x20000bb4
 8001200:	20004918 	.word	0x20004918

08001204 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122e:	490e      	ldr	r1, [pc, #56]	; (8001268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001244:	4c0b      	ldr	r4, [pc, #44]	; (8001274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001252:	f7ff ffd7 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f005 fa83 	bl	8006760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fa77 	bl	800074c <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800126c:	080072a4 	.word	0x080072a4
  ldr r2, =_sbss
 8001270:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001274:	20004918 	.word	0x20004918

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>

0800127a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127e:	2003      	movs	r0, #3
 8001280:	f000 fd41 	bl	8001d06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001284:	200f      	movs	r0, #15
 8001286:	f7ff feed 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128a:	f7ff fcf1 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000bb8 	.word	0x20000bb8

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000bb8 	.word	0x20000bb8

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008

0800131c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e031      	b.n	8001396 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fcc0 	bl	8000cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_ADC_Init+0x84>)
 8001360:	4013      	ands	r3, r2
 8001362:	f043 0202 	orr.w	r2, r3, #2
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fb24 	bl	80019b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
 8001386:	e001      	b.n	800138c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	ffffeefd 	.word	0xffffeefd

080013a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Start+0x1a>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e0ad      	b.n	800151a <HAL_ADC_Start+0x176>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d018      	beq.n	8001406 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_ADC_Start+0x184>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a50      	ldr	r2, [pc, #320]	; (800152c <HAL_ADC_Start+0x188>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	0c9a      	lsrs	r2, r3, #18
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80013f8:	e002      	b.n	8001400 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f9      	bne.n	80013fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b01      	cmp	r3, #1
 8001412:	d175      	bne.n	8001500 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001418:	4b45      	ldr	r3, [pc, #276]	; (8001530 <HAL_ADC_Start+0x18c>)
 800141a:	4013      	ands	r3, r2
 800141c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800143a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800144e:	d106      	bne.n	800145e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001454:	f023 0206 	bic.w	r2, r3, #6
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
 800145c:	e002      	b.n	8001464 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001474:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001476:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_ADC_Start+0x190>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d143      	bne.n	8001518 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	e03a      	b.n	8001518 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a24      	ldr	r2, [pc, #144]	; (8001538 <HAL_ADC_Start+0x194>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d10e      	bne.n	80014ca <HAL_ADC_Start+0x126>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d107      	bne.n	80014ca <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014c8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_ADC_Start+0x190>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d120      	bne.n	8001518 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_ADC_Start+0x198>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d11b      	bne.n	8001518 <HAL_ADC_Start+0x174>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d114      	bne.n	8001518 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	e00b      	b.n	8001518 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f043 0210 	orr.w	r2, r3, #16
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000000 	.word	0x20000000
 800152c:	431bde83 	.word	0x431bde83
 8001530:	fffff8fe 	.word	0xfffff8fe
 8001534:	40012300 	.word	0x40012300
 8001538:	40012000 	.word	0x40012000
 800153c:	40012200 	.word	0x40012200

08001540 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_ADC_Start_IT+0x1a>
 8001556:	2302      	movs	r3, #2
 8001558:	e0b5      	b.n	80016c6 <HAL_ADC_Start_IT+0x186>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b01      	cmp	r3, #1
 800156e:	d018      	beq.n	80015a2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001580:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <HAL_ADC_Start_IT+0x194>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a54      	ldr	r2, [pc, #336]	; (80016d8 <HAL_ADC_Start_IT+0x198>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	0c9a      	lsrs	r2, r3, #18
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001594:	e002      	b.n	800159c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3b01      	subs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f9      	bne.n	8001596 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d17d      	bne.n	80016ac <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b4:	4b49      	ldr	r3, [pc, #292]	; (80016dc <HAL_ADC_Start_IT+0x19c>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ea:	d106      	bne.n	80015fa <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f023 0206 	bic.w	r2, r3, #6
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
 80015f8:	e002      	b.n	8001600 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001610:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_ADC_Start_IT+0x1a0>)
 800161e:	430b      	orrs	r3, r1
 8001620:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_ADC_Start_IT+0x1a4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10f      	bne.n	800164e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d143      	bne.n	80016c4 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	e03a      	b.n	80016c4 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <HAL_ADC_Start_IT+0x1a8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d10e      	bne.n	8001676 <HAL_ADC_Start_IT+0x136>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d107      	bne.n	8001676 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001674:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_ADC_Start_IT+0x1a4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d120      	bne.n	80016c4 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_ADC_Start_IT+0x1ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d11b      	bne.n	80016c4 <HAL_ADC_Start_IT+0x184>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d114      	bne.n	80016c4 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	e00b      	b.n	80016c4 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f043 0210 	orr.w	r2, r3, #16
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000000 	.word	0x20000000
 80016d8:	431bde83 	.word	0x431bde83
 80016dc:	fffff8fe 	.word	0xfffff8fe
 80016e0:	04000020 	.word	0x04000020
 80016e4:	40012300 	.word	0x40012300
 80016e8:	40012000 	.word	0x40012000
 80016ec:	40012200 	.word	0x40012200

080016f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1c>
 8001724:	2302      	movs	r3, #2
 8001726:	e136      	b.n	8001996 <HAL_ADC_ConfigChannel+0x28a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b09      	cmp	r3, #9
 8001736:	d93a      	bls.n	80017ae <HAL_ADC_ConfigChannel+0xa2>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001740:	d035      	beq.n	80017ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68d9      	ldr	r1, [r3, #12]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	3b1e      	subs	r3, #30
 8001758:	2207      	movs	r2, #7
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	400a      	ands	r2, r1
 8001766:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a8d      	ldr	r2, [pc, #564]	; (80019a4 <HAL_ADC_ConfigChannel+0x298>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10a      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68d9      	ldr	r1, [r3, #12]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	061a      	lsls	r2, r3, #24
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001786:	e035      	b.n	80017f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68d9      	ldr	r1, [r3, #12]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	4603      	mov	r3, r0
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4403      	add	r3, r0
 80017a0:	3b1e      	subs	r3, #30
 80017a2:	409a      	lsls	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ac:	e022      	b.n	80017f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	2207      	movs	r2, #7
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43da      	mvns	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	400a      	ands	r2, r1
 80017d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6919      	ldr	r1, [r3, #16]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	4603      	mov	r3, r0
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4403      	add	r3, r0
 80017ea:	409a      	lsls	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	d824      	bhi.n	8001846 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	3b05      	subs	r3, #5
 800180e:	221f      	movs	r2, #31
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43da      	mvns	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	400a      	ands	r2, r1
 800181c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	3b05      	subs	r3, #5
 8001838:	fa00 f203 	lsl.w	r2, r0, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
 8001844:	e04c      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d824      	bhi.n	8001898 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b23      	subs	r3, #35	; 0x23
 8001860:	221f      	movs	r2, #31
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	400a      	ands	r2, r1
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3b23      	subs	r3, #35	; 0x23
 800188a:	fa00 f203 	lsl.w	r2, r0, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
 8001896:	e023      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3b41      	subs	r3, #65	; 0x41
 80018aa:	221f      	movs	r2, #31
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43da      	mvns	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	400a      	ands	r2, r1
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	3b41      	subs	r3, #65	; 0x41
 80018d4:	fa00 f203 	lsl.w	r2, r0, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a30      	ldr	r2, [pc, #192]	; (80019a8 <HAL_ADC_ConfigChannel+0x29c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10a      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1f4>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018f2:	d105      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80018f4:	4b2d      	ldr	r3, [pc, #180]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 80018fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80018fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_ADC_ConfigChannel+0x29c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10f      	bne.n	800192a <HAL_ADC_ConfigChannel+0x21e>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b12      	cmp	r3, #18
 8001910:	d10b      	bne.n	800192a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001918:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800191c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800191e:	4b23      	ldr	r3, [pc, #140]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4a22      	ldr	r2, [pc, #136]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001928:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <HAL_ADC_ConfigChannel+0x29c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d12b      	bne.n	800198c <HAL_ADC_ConfigChannel+0x280>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <HAL_ADC_ConfigChannel+0x298>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d003      	beq.n	8001946 <HAL_ADC_ConfigChannel+0x23a>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b11      	cmp	r3, #17
 8001944:	d122      	bne.n	800198c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 800194c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001950:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <HAL_ADC_ConfigChannel+0x2a0>)
 8001958:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800195c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_ADC_ConfigChannel+0x298>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d111      	bne.n	800198c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_ADC_ConfigChannel+0x2a4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_ADC_ConfigChannel+0x2a8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9a      	lsrs	r2, r3, #18
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800197e:	e002      	b.n	8001986 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3b01      	subs	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f9      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	10000012 	.word	0x10000012
 80019a8:	40012000 	.word	0x40012000
 80019ac:	40012300 	.word	0x40012300
 80019b0:	20000000 	.word	0x20000000
 80019b4:	431bde83 	.word	0x431bde83

080019b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019c0:	4b78      	ldr	r3, [pc, #480]	; (8001ba4 <ADC_Init+0x1ec>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4a77      	ldr	r2, [pc, #476]	; (8001ba4 <ADC_Init+0x1ec>)
 80019c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019ca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019cc:	4b75      	ldr	r3, [pc, #468]	; (8001ba4 <ADC_Init+0x1ec>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4973      	ldr	r1, [pc, #460]	; (8001ba4 <ADC_Init+0x1ec>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	021a      	lsls	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6899      	ldr	r1, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <ADC_Init+0x1f0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d022      	beq.n	8001a92 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6899      	ldr	r1, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	e00f      	b.n	8001ab2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0202 	bic.w	r2, r2, #2
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	005a      	lsls	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01b      	beq.n	8001b18 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001afe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	035a      	lsls	r2, r3, #13
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	e007      	b.n	8001b28 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	051a      	lsls	r2, r3, #20
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6899      	ldr	r1, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b6a:	025a      	lsls	r2, r3, #9
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6899      	ldr	r1, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	029a      	lsls	r2, r3, #10
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40012300 	.word	0x40012300
 8001ba8:	0f000001 	.word	0x0f000001

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <__NVIC_SetPriorityGrouping+0x40>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <__NVIC_SetPriorityGrouping+0x40>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00
 8001bf0:	05fa0000 	.word	0x05fa0000

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ff4c 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2e:	f7ff ff61 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	6978      	ldr	r0, [r7, #20]
 8001d3a:	f7ff ffb1 	bl	8001ca0 <NVIC_EncodePriority>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff80 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d4c:	bf00      	nop
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff54 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06a      	b.n	8001e58 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2223      	movs	r2, #35	; 0x23
 8001d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7fe ffd3 	bl	8000d40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_ETH_Init+0xf0>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_ETH_Init+0xf0>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <HAL_ETH_Init+0xf0>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001db2:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <HAL_ETH_Init+0xf4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <HAL_ETH_Init+0xf4>)
 8001db8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dbc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_ETH_Init+0xf4>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4927      	ldr	r1, [pc, #156]	; (8001e64 <HAL_ETH_Init+0xf4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_ETH_Init+0xf4>)
 8001dce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001de6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de8:	f7ff fa68 	bl	80012bc <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dee:	e011      	b.n	8001e14 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001df0:	f7ff fa64 	bl	80012bc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001dfe:	d909      	bls.n	8001e14 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2204      	movs	r2, #4
 8001e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	22e0      	movs	r2, #224	; 0xe0
 8001e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e021      	b.n	8001e58 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e4      	bne.n	8001df0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f958 	bl	80020dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f9ff 	bl	8002230 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa55 	bl	80022e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2100      	movs	r1, #0
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f9bd 	bl	80021c0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2210      	movs	r2, #16
 8001e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40013800 	.word	0x40013800

08001e68 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <ETH_SetMACConfig+0x15c>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	7c1b      	ldrb	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <ETH_SetMACConfig+0x28>
 8001e8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e8e:	e000      	b.n	8001e92 <ETH_SetMACConfig+0x2a>
 8001e90:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	7c5b      	ldrb	r3, [r3, #17]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <ETH_SetMACConfig+0x38>
 8001e9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e9e:	e000      	b.n	8001ea2 <ETH_SetMACConfig+0x3a>
 8001ea0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ea2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ea8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7fdb      	ldrb	r3, [r3, #31]
 8001eae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001eb0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	7f92      	ldrb	r2, [r2, #30]
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	d102      	bne.n	8001ec6 <ETH_SetMACConfig+0x5e>
 8001ec0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec4:	e000      	b.n	8001ec8 <ETH_SetMACConfig+0x60>
 8001ec6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ec8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7f1b      	ldrb	r3, [r3, #28]
 8001ece:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ed0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ed6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	791b      	ldrb	r3, [r3, #4]
 8001edc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ede:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ee6:	2a00      	cmp	r2, #0
 8001ee8:	d102      	bne.n	8001ef0 <ETH_SetMACConfig+0x88>
 8001eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eee:	e000      	b.n	8001ef2 <ETH_SetMACConfig+0x8a>
 8001ef0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ef2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7bdb      	ldrb	r3, [r3, #15]
 8001ef8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001efa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f00:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f08:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff f9d6 	bl	80012d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f4e:	2a00      	cmp	r2, #0
 8001f50:	d101      	bne.n	8001f56 <ETH_SetMACConfig+0xee>
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	e000      	b.n	8001f58 <ETH_SetMACConfig+0xf0>
 8001f56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f58:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f66:	2a01      	cmp	r2, #1
 8001f68:	d101      	bne.n	8001f6e <ETH_SetMACConfig+0x106>
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	e000      	b.n	8001f70 <ETH_SetMACConfig+0x108>
 8001f6e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f70:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f78:	2a01      	cmp	r2, #1
 8001f7a:	d101      	bne.n	8001f80 <ETH_SetMACConfig+0x118>
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	e000      	b.n	8001f82 <ETH_SetMACConfig+0x11a>
 8001f80:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f8a:	2a01      	cmp	r2, #1
 8001f8c:	d101      	bne.n	8001f92 <ETH_SetMACConfig+0x12a>
 8001f8e:	2202      	movs	r2, #2
 8001f90:	e000      	b.n	8001f94 <ETH_SetMACConfig+0x12c>
 8001f92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f94:	4313      	orrs	r3, r2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7ff f991 	bl	80012d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	619a      	str	r2, [r3, #24]
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	ff20810f 	.word	0xff20810f

08001fc8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <ETH_SetDMAConfig+0x110>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	7b1b      	ldrb	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <ETH_SetDMAConfig+0x2c>
 8001fee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ff2:	e000      	b.n	8001ff6 <ETH_SetDMAConfig+0x2e>
 8001ff4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	7b5b      	ldrb	r3, [r3, #13]
 8001ffa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ffc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	7f52      	ldrb	r2, [r2, #29]
 8002002:	2a00      	cmp	r2, #0
 8002004:	d102      	bne.n	800200c <ETH_SetDMAConfig+0x44>
 8002006:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800200a:	e000      	b.n	800200e <ETH_SetDMAConfig+0x46>
 800200c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800200e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	7b9b      	ldrb	r3, [r3, #14]
 8002014:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002016:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800201c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7f1b      	ldrb	r3, [r3, #28]
 8002022:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002024:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	7f9b      	ldrb	r3, [r3, #30]
 800202a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800202c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002032:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800203a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800203c:	4313      	orrs	r3, r2
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204c:	461a      	mov	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205e:	2001      	movs	r0, #1
 8002060:	f7ff f938 	bl	80012d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206c:	461a      	mov	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	791b      	ldrb	r3, [r3, #4]
 8002076:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800207c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002082:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002088:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002090:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002092:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800209a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff f909 	bl	80012d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	f8de3f23 	.word	0xf8de3f23

080020dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0a6      	sub	sp, #152	; 0x98
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002106:	2301      	movs	r3, #1
 8002108:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002118:	2300      	movs	r3, #0
 800211a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002122:	2300      	movs	r3, #0
 8002124:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800213e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002142:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002148:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002150:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fe86 	bl	8001e68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800215c:	2301      	movs	r3, #1
 800215e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002160:	2301      	movs	r3, #1
 8002162:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800216a:	2301      	movs	r3, #1
 800216c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800217e:	2300      	movs	r3, #0
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002188:	2301      	movs	r3, #1
 800218a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800218c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002190:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002196:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff08 	bl	8001fc8 <ETH_SetDMAConfig>
}
 80021b8:	bf00      	nop
 80021ba:	3798      	adds	r7, #152	; 0x98
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3305      	adds	r3, #5
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3204      	adds	r2, #4
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <ETH_MACAddressConfig+0x68>)
 80021e2:	4413      	add	r3, r2
 80021e4:	461a      	mov	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3303      	adds	r3, #3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	061a      	lsls	r2, r3, #24
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3302      	adds	r3, #2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3301      	adds	r3, #1
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	4313      	orrs	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <ETH_MACAddressConfig+0x6c>)
 8002212:	4413      	add	r3, r2
 8002214:	461a      	mov	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6013      	str	r3, [r2, #0]
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40028040 	.word	0x40028040
 800222c:	40028044 	.word	0x40028044

08002230 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e03e      	b.n	80022bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	3206      	adds	r2, #6
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d80c      	bhi.n	80022a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68d9      	ldr	r1, [r3, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e004      	b.n	80022aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d9bd      	bls.n	800223e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	611a      	str	r2, [r3, #16]
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e046      	b.n	800237e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6919      	ldr	r1, [r3, #16]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800232c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002334:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	3212      	adds	r2, #18
 800234a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d80c      	bhi.n	800236e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6919      	ldr	r1, [r3, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	4613      	mov	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	e004      	b.n	8002378 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	461a      	mov	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3301      	adds	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d9b5      	bls.n	80022f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ae:	60da      	str	r2, [r3, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e175      	b.n	80026c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8164 	bne.w	80026c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x56>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80be 	beq.w	80026c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800255e:	4a61      	ldr	r2, [pc, #388]	; (80026e4 <HAL_GPIO_Init+0x328>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_GPIO_Init+0x32c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d037      	beq.n	80025fa <HAL_GPIO_Init+0x23e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_GPIO_Init+0x330>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_GPIO_Init+0x23a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x334>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <HAL_GPIO_Init+0x236>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a55      	ldr	r2, [pc, #340]	; (80026f4 <HAL_GPIO_Init+0x338>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d025      	beq.n	80025ee <HAL_GPIO_Init+0x232>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a54      	ldr	r2, [pc, #336]	; (80026f8 <HAL_GPIO_Init+0x33c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <HAL_GPIO_Init+0x22e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a53      	ldr	r2, [pc, #332]	; (80026fc <HAL_GPIO_Init+0x340>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x22a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a52      	ldr	r2, [pc, #328]	; (8002700 <HAL_GPIO_Init+0x344>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a51      	ldr	r2, [pc, #324]	; (8002704 <HAL_GPIO_Init+0x348>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a50      	ldr	r2, [pc, #320]	; (8002708 <HAL_GPIO_Init+0x34c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	; (800270c <HAL_GPIO_Init+0x350>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x21a>
 80025d2:	2309      	movs	r3, #9
 80025d4:	e012      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025d6:	230a      	movs	r3, #10
 80025d8:	e010      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025da:	2308      	movs	r3, #8
 80025dc:	e00e      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025de:	2307      	movs	r3, #7
 80025e0:	e00c      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e00a      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x328>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_GPIO_Init+0x354>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a34      	ldr	r2, [pc, #208]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a29      	ldr	r2, [pc, #164]	; (8002710 <HAL_GPIO_Init+0x354>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_GPIO_Init+0x354>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_GPIO_Init+0x354>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f ae86 	bls.w	80023dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40022000 	.word	0x40022000
 800270c:	40022400 	.word	0x40022400
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002730:	e003      	b.n	800273a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	619a      	str	r2, [r3, #24]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002748:	b08f      	sub	sp, #60	; 0x3c
 800274a:	af0a      	add	r7, sp, #40	; 0x28
 800274c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e116      	b.n	8002986 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fbfc 	bl	8000f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2203      	movs	r2, #3
 800277c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f002 fad0 	bl	8004d3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	687e      	ldr	r6, [r7, #4]
 80027a4:	466d      	mov	r5, sp
 80027a6:	f106 0410 	add.w	r4, r6, #16
 80027aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80027ba:	1d33      	adds	r3, r6, #4
 80027bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	f002 fa64 	bl	8004c8c <USB_CoreInit>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0d7      	b.n	8002986 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fabe 	bl	8004d5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	e04a      	b.n	800287e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	333d      	adds	r3, #61	; 0x3d
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	333c      	adds	r3, #60	; 0x3c
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	b298      	uxth	r0, r3
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3344      	adds	r3, #68	; 0x44
 8002824:	4602      	mov	r2, r0
 8002826:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	3340      	adds	r3, #64	; 0x40
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3348      	adds	r3, #72	; 0x48
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	334c      	adds	r3, #76	; 0x4c
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3354      	adds	r3, #84	; 0x54
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	3301      	adds	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	d3af      	bcc.n	80027e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e044      	b.n	8002918 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	3301      	adds	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d3b5      	bcc.n	800288e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	687e      	ldr	r6, [r7, #4]
 800292a:	466d      	mov	r5, sp
 800292c:	f106 0410 	add.w	r4, r6, #16
 8002930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002938:	e894 0003 	ldmia.w	r4, {r0, r1}
 800293c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002940:	1d33      	adds	r3, r6, #4
 8002942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002944:	6838      	ldr	r0, [r7, #0]
 8002946:	f002 fa57 	bl	8004df8 <USB_DevInit>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e014      	b.n	8002986 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f80b 	bl	8002990 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fc15 	bl	80051ae <USB_DevDisconnect>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002990 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	10000003 	.word	0x10000003

080029d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40007000 	.word	0x40007000

080029f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a26:	f7fe fc49 	bl	80012bc <HAL_GetTick>
 8002a2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a2c:	e009      	b.n	8002a42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a2e:	f7fe fc45 	bl	80012bc <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a3c:	d901      	bls.n	8002a42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e022      	b.n	8002a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5c:	f7fe fc2e 	bl	80012bc <HAL_GetTick>
 8002a60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a62:	e009      	b.n	8002a78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a64:	f7fe fc2a 	bl	80012bc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a72:	d901      	bls.n	8002a78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e007      	b.n	8002a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a84:	d1ee      	bne.n	8002a64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000

08002a98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e29b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8087 	beq.w	8002bca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002abc:	4b96      	ldr	r3, [pc, #600]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac8:	4b93      	ldr	r3, [pc, #588]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d112      	bne.n	8002afa <HAL_RCC_OscConfig+0x62>
 8002ad4:	4b90      	ldr	r3, [pc, #576]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae0:	d10b      	bne.n	8002afa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae2:	4b8d      	ldr	r3, [pc, #564]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d06c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x130>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d168      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e275      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x7a>
 8002b04:	4b84      	ldr	r3, [pc, #528]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a83      	ldr	r2, [pc, #524]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	e02e      	b.n	8002b70 <HAL_RCC_OscConfig+0xd8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x9c>
 8002b1a:	4b7f      	ldr	r3, [pc, #508]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7e      	ldr	r2, [pc, #504]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	4b7c      	ldr	r3, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7b      	ldr	r2, [pc, #492]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e01d      	b.n	8002b70 <HAL_RCC_OscConfig+0xd8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0xc0>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a72      	ldr	r2, [pc, #456]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0xd8>
 8002b58:	4b6f      	ldr	r3, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b6c      	ldr	r3, [pc, #432]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a6b      	ldr	r2, [pc, #428]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fba0 	bl	80012bc <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b80:	f7fe fb9c 	bl	80012bc <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e229      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0xe8>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fb8c 	bl	80012bc <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fb88 	bl	80012bc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e215      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x110>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d069      	beq.n	8002caa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd6:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be2:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x190>
 8002bee:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e1e9      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	493d      	ldr	r1, [pc, #244]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c26:	e040      	b.n	8002caa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d023      	beq.n	8002c78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fb3e 	bl	80012bc <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7fe fb3a 	bl	80012bc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1c7      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4929      	ldr	r1, [pc, #164]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
 8002c76:	e018      	b.n	8002caa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fb1a 	bl	80012bc <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fb16 	bl	80012bc <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1a3      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d038      	beq.n	8002d28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d019      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbe:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe faf7 	bl	80012bc <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd2:	f7fe faf3 	bl	80012bc <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e180      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x23a>
 8002cf0:	e01a      	b.n	8002d28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fadd 	bl	80012bc <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe fad9 	bl	80012bc <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d903      	bls.n	8002d1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e166      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
 8002d18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ee      	bne.n	8002d06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a4 	beq.w	8002e7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d36:	4b8c      	ldr	r3, [pc, #560]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d42:	4b89      	ldr	r3, [pc, #548]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a88      	ldr	r2, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b86      	ldr	r3, [pc, #536]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	4b83      	ldr	r3, [pc, #524]	; (8002f6c <HAL_RCC_OscConfig+0x4d4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d118      	bne.n	8002d9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d6a:	4b80      	ldr	r3, [pc, #512]	; (8002f6c <HAL_RCC_OscConfig+0x4d4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7f      	ldr	r2, [pc, #508]	; (8002f6c <HAL_RCC_OscConfig+0x4d4>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d76:	f7fe faa1 	bl	80012bc <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7e:	f7fe fa9d 	bl	80012bc <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b64      	cmp	r3, #100	; 0x64
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e12a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d90:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x4d4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x31a>
 8002da4:	4b70      	ldr	r3, [pc, #448]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a6f      	ldr	r2, [pc, #444]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	e02d      	b.n	8002e0e <HAL_RCC_OscConfig+0x376>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x33c>
 8002dba:	4b6b      	ldr	r3, [pc, #428]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a6a      	ldr	r2, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc6:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a67      	ldr	r2, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	f023 0304 	bic.w	r3, r3, #4
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e01c      	b.n	8002e0e <HAL_RCC_OscConfig+0x376>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x35e>
 8002ddc:	4b62      	ldr	r3, [pc, #392]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a5e      	ldr	r2, [pc, #376]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0x376>
 8002df6:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a5b      	ldr	r2, [pc, #364]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a58      	ldr	r2, [pc, #352]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe fa51 	bl	80012bc <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe fa4d 	bl	80012bc <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0d8      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b4c      	ldr	r3, [pc, #304]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCC_OscConfig+0x386>
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fe fa3b 	bl	80012bc <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe fa37 	bl	80012bc <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0c2      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a3c      	ldr	r2, [pc, #240]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80ae 	beq.w	8002fe4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e88:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d06d      	beq.n	8002f70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d14b      	bne.n	8002f34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a31      	ldr	r2, [pc, #196]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fa08 	bl	80012bc <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe fa04 	bl	80012bc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e091      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	019b      	lsls	r3, r3, #6
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	041b      	lsls	r3, r3, #16
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	071b      	lsls	r3, r3, #28
 8002efa:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f9d6 	bl	80012bc <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe f9d2 	bl	80012bc <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e05f      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x47c>
 8002f32:	e057      	b.n	8002fe4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe f9bc 	bl	80012bc <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe f9b8 	bl	80012bc <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e045      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4b0>
 8002f66:	e03d      	b.n	8002fe4 <HAL_RCC_OscConfig+0x54c>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <HAL_RCC_OscConfig+0x558>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d030      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d129      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d122      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d119      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d10f      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d0      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b67      	ldr	r3, [pc, #412]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 020f 	bic.w	r2, r3, #15
 8003022:	4965      	ldr	r1, [pc, #404]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800305a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800305e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d040      	beq.n	8003118 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e073      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06b      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4936      	ldr	r1, [pc, #216]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe f8e8 	bl	80012bc <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fe f8e4 	bl	80012bc <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e053      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d210      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	4922      	ldr	r1, [pc, #136]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x1cc>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1d0>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1d4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd ff5c 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	080071e8 	.word	0x080071e8
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b094      	sub	sp, #80	; 0x50
 80031d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	647b      	str	r3, [r7, #68]	; 0x44
 80031d8:	2300      	movs	r3, #0
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031dc:	2300      	movs	r3, #0
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e4:	4b79      	ldr	r3, [pc, #484]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d00d      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x40>
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	f200 80e1 	bhi.w	80033b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fe:	e0db      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b73      	ldr	r3, [pc, #460]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003204:	e0db      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b73      	ldr	r3, [pc, #460]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003208:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800320a:	e0d8      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003214:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d063      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	2200      	movs	r2, #0
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
 800322c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
 8003236:	2300      	movs	r3, #0
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
 800323a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800323e:	4622      	mov	r2, r4
 8003240:	462b      	mov	r3, r5
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	0159      	lsls	r1, r3, #5
 800324c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003250:	0150      	lsls	r0, r2, #5
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4621      	mov	r1, r4
 8003258:	1a51      	subs	r1, r2, r1
 800325a:	6139      	str	r1, [r7, #16]
 800325c:	4629      	mov	r1, r5
 800325e:	eb63 0301 	sbc.w	r3, r3, r1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003270:	4659      	mov	r1, fp
 8003272:	018b      	lsls	r3, r1, #6
 8003274:	4651      	mov	r1, sl
 8003276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800327a:	4651      	mov	r1, sl
 800327c:	018a      	lsls	r2, r1, #6
 800327e:	4651      	mov	r1, sl
 8003280:	ebb2 0801 	subs.w	r8, r2, r1
 8003284:	4659      	mov	r1, fp
 8003286:	eb63 0901 	sbc.w	r9, r3, r1
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800329a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329e:	4690      	mov	r8, r2
 80032a0:	4699      	mov	r9, r3
 80032a2:	4623      	mov	r3, r4
 80032a4:	eb18 0303 	adds.w	r3, r8, r3
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	462b      	mov	r3, r5
 80032ac:	eb49 0303 	adc.w	r3, r9, r3
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032be:	4629      	mov	r1, r5
 80032c0:	024b      	lsls	r3, r1, #9
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032c8:	4621      	mov	r1, r4
 80032ca:	024a      	lsls	r2, r1, #9
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d2:	2200      	movs	r2, #0
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032dc:	f7fd f800 	bl	80002e0 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e8:	e058      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	2200      	movs	r2, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	4611      	mov	r1, r2
 80032f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0159      	lsls	r1, r3, #5
 8003312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003316:	0150      	lsls	r0, r2, #5
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4641      	mov	r1, r8
 800331e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003322:	4649      	mov	r1, r9
 8003324:	eb63 0b01 	sbc.w	fp, r3, r1
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003334:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003338:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800333c:	ebb2 040a 	subs.w	r4, r2, sl
 8003340:	eb63 050b 	sbc.w	r5, r3, fp
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	00eb      	lsls	r3, r5, #3
 800334e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003352:	00e2      	lsls	r2, r4, #3
 8003354:	4614      	mov	r4, r2
 8003356:	461d      	mov	r5, r3
 8003358:	4643      	mov	r3, r8
 800335a:	18e3      	adds	r3, r4, r3
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	464b      	mov	r3, r9
 8003360:	eb45 0303 	adc.w	r3, r5, r3
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003372:	4629      	mov	r1, r5
 8003374:	028b      	lsls	r3, r1, #10
 8003376:	4621      	mov	r1, r4
 8003378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800337c:	4621      	mov	r1, r4
 800337e:	028a      	lsls	r2, r1, #10
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	61fa      	str	r2, [r7, #28]
 800338c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003390:	f7fc ffa6 	bl	80002e0 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4613      	mov	r3, r2
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_GetSysClockFreq+0x200>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	3301      	adds	r3, #1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80033ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3750      	adds	r7, #80	; 0x50
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	007a1200 	.word	0x007a1200

080033d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_GetHCLKFreq+0x14>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000000 	.word	0x20000000

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f4:	f7ff fff0 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0a9b      	lsrs	r3, r3, #10
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4903      	ldr	r1, [pc, #12]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800
 8003414:	080071f8 	.word	0x080071f8

08003418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800341c:	f7ff ffdc 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	0b5b      	lsrs	r3, r3, #13
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	4903      	ldr	r1, [pc, #12]	; (800343c <HAL_RCC_GetPCLK2Freq+0x24>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	080071f8 	.word	0x080071f8

08003440 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	220f      	movs	r2, #15
 800344e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_GetClockConfig+0x5c>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0203 	and.w	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <HAL_RCC_GetClockConfig+0x5c>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_RCC_GetClockConfig+0x5c>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCC_GetClockConfig+0x5c>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	08db      	lsrs	r3, r3, #3
 800347a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <HAL_RCC_GetClockConfig+0x60>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	40023c00 	.word	0x40023c00

080034a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034cc:	4b69      	ldr	r3, [pc, #420]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a68      	ldr	r2, [pc, #416]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034d6:	6093      	str	r3, [r2, #8]
 80034d8:	4b66      	ldr	r3, [pc, #408]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	4964      	ldr	r1, [pc, #400]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034fe:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	4959      	ldr	r1, [pc, #356]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800353a:	4b4e      	ldr	r3, [pc, #312]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003540:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	494a      	ldr	r1, [pc, #296]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 808b 	beq.w	800369e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003588:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003592:	6413      	str	r3, [r2, #64]	; 0x40
 8003594:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a34      	ldr	r2, [pc, #208]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fd fe86 	bl	80012bc <HAL_GetTick>
 80035b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b4:	f7fd fe82 	bl	80012bc <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e38f      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d2:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d035      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d02e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003610:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003612:	4a18      	ldr	r2, [pc, #96]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d114      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd fe4a 	bl	80012bc <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362a:	e00a      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fd fe46 	bl	80012bc <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e351      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ee      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365a:	d111      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800366a:	400b      	ands	r3, r1
 800366c:	4901      	ldr	r1, [pc, #4]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
 8003672:	e00b      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	0ffffcff 	.word	0x0ffffcff
 8003680:	4bac      	ldr	r3, [pc, #688]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4aab      	ldr	r2, [pc, #684]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003686:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800368a:	6093      	str	r3, [r2, #8]
 800368c:	4ba9      	ldr	r3, [pc, #676]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	49a6      	ldr	r1, [pc, #664]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369a:	4313      	orrs	r3, r2
 800369c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036aa:	4ba2      	ldr	r3, [pc, #648]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b0:	4aa0      	ldr	r2, [pc, #640]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036ba:	4b9e      	ldr	r3, [pc, #632]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	499b      	ldr	r1, [pc, #620]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036d8:	4b96      	ldr	r3, [pc, #600]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e6:	4993      	ldr	r1, [pc, #588]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036fa:	4b8e      	ldr	r3, [pc, #568]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003708:	498a      	ldr	r1, [pc, #552]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800371c:	4b85      	ldr	r3, [pc, #532]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372a:	4982      	ldr	r1, [pc, #520]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800373e:	4b7d      	ldr	r3, [pc, #500]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4979      	ldr	r1, [pc, #484]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003760:	4b74      	ldr	r3, [pc, #464]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4971      	ldr	r1, [pc, #452]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f023 020c 	bic.w	r2, r3, #12
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003790:	4968      	ldr	r1, [pc, #416]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a4:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	4960      	ldr	r1, [pc, #384]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c6:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	4957      	ldr	r1, [pc, #348]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e8:	4b52      	ldr	r3, [pc, #328]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	494f      	ldr	r1, [pc, #316]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800380a:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003818:	4946      	ldr	r1, [pc, #280]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383a:	493e      	ldr	r1, [pc, #248]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800384e:	4b39      	ldr	r3, [pc, #228]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385c:	4935      	ldr	r1, [pc, #212]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003870:	4b30      	ldr	r3, [pc, #192]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387e:	492d      	ldr	r1, [pc, #180]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003892:	4b28      	ldr	r3, [pc, #160]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a0:	4924      	ldr	r1, [pc, #144]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b0:	d101      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038d2:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	4914      	ldr	r1, [pc, #80]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003904:	490b      	ldr	r1, [pc, #44]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00f      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003928:	4902      	ldr	r1, [pc, #8]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003930:	e002      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003944:	4b8a      	ldr	r3, [pc, #552]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800394a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	4986      	ldr	r1, [pc, #536]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003968:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003978:	497d      	ldr	r1, [pc, #500]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d006      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80d6 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003994:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a75      	ldr	r2, [pc, #468]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fd fc8c 	bl	80012bc <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039a8:	f7fd fc88 	bl	80012bc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e195      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ba:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d021      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11d      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ee:	0e1b      	lsrs	r3, r3, #24
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	019a      	lsls	r2, r3, #6
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	431a      	orrs	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	071b      	lsls	r3, r3, #28
 8003a0e:	4958      	ldr	r1, [pc, #352]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02e      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a40:	d129      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a42:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a50:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a56:	0f1b      	lsrs	r3, r3, #28
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	019a      	lsls	r2, r3, #6
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	041b      	lsls	r3, r3, #16
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	071b      	lsls	r3, r3, #28
 8003a76:	493e      	ldr	r1, [pc, #248]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a7e:	4b3c      	ldr	r3, [pc, #240]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	f023 021f 	bic.w	r2, r3, #31
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	4938      	ldr	r1, [pc, #224]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01d      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aa2:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa8:	0e1b      	lsrs	r3, r3, #24
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab6:	0f1b      	lsrs	r3, r3, #28
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	019a      	lsls	r2, r3, #6
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	431a      	orrs	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	4926      	ldr	r1, [pc, #152]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d011      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	019a      	lsls	r2, r3, #6
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	071b      	lsls	r3, r3, #28
 8003b06:	491a      	ldr	r1, [pc, #104]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b1a:	f7fd fbcf 	bl	80012bc <HAL_GetTick>
 8003b1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b22:	f7fd fbcb 	bl	80012bc <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b64      	cmp	r3, #100	; 0x64
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0d8      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	f040 80ce 	bne.w	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fd fbb2 	bl	80012bc <HAL_GetTick>
 8003b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b5c:	f7fd fbae 	bl	80012bc <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d904      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0bb      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b74:	4b5e      	ldr	r3, [pc, #376]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b80:	d0ec      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02e      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d12a      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003baa:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bb8:	4b4d      	ldr	r3, [pc, #308]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	0f1b      	lsrs	r3, r3, #28
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	019a      	lsls	r2, r3, #6
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	4944      	ldr	r1, [pc, #272]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003be6:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	493d      	ldr	r1, [pc, #244]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d022      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c14:	d11d      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	0e1b      	lsrs	r3, r3, #24
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c24:	4b32      	ldr	r3, [pc, #200]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	0f1b      	lsrs	r3, r3, #28
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	019a      	lsls	r2, r3, #6
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	4929      	ldr	r1, [pc, #164]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d028      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c5e:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	0e1b      	lsrs	r3, r3, #24
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	019a      	lsls	r2, r3, #6
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	4917      	ldr	r1, [pc, #92]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4911      	ldr	r1, [pc, #68]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fd fafe 	bl	80012bc <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cc4:	f7fd fafa 	bl	80012bc <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e007      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce2:	d1ef      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e049      	b.n	8003d9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f841 	bl	8003da2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f000 fa00 	bl	8004138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d001      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e054      	b.n	8003e7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a26      	ldr	r2, [pc, #152]	; (8003e88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d01d      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_TIM_Base_Start_IT+0xe4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x80>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d115      	bne.n	8003e64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xec>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d015      	beq.n	8003e76 <HAL_TIM_Base_Start_IT+0xbe>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e50:	d011      	beq.n	8003e76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	e008      	b.n	8003e76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40010400 	.word	0x40010400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40001800 	.word	0x40001800
 8003ea4:	00010007 	.word	0x00010007

08003ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d122      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d11b      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0202 	mvn.w	r2, #2
 8003ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f905 	bl	80040fa <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8f7 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f908 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d122      	bne.n	8003f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d11b      	bne.n	8003f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0204 	mvn.w	r2, #4
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8db 	bl	80040fa <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8cd 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f8de 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0208 	mvn.w	r2, #8
 8003f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2204      	movs	r2, #4
 8003f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8b1 	bl	80040fa <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8a3 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f8b4 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0210 	mvn.w	r2, #16
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f887 	bl	80040fa <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f879 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f88a 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0201 	mvn.w	r2, #1
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fc fe0a 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b80      	cmp	r3, #128	; 0x80
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004044:	2b80      	cmp	r3, #128	; 0x80
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f91a 	bl	800428c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004066:	d10e      	bne.n	8004086 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d107      	bne.n	8004086 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800407e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f90d 	bl	80042a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d10e      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d107      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f838 	bl	8004122 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d10e      	bne.n	80040de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d107      	bne.n	80040de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f06f 0220 	mvn.w	r2, #32
 80040d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f8cd 	bl	8004278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a40      	ldr	r2, [pc, #256]	; (800424c <TIM_Base_SetConfig+0x114>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <TIM_Base_SetConfig+0x40>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004156:	d00f      	beq.n	8004178 <TIM_Base_SetConfig+0x40>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3d      	ldr	r2, [pc, #244]	; (8004250 <TIM_Base_SetConfig+0x118>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00b      	beq.n	8004178 <TIM_Base_SetConfig+0x40>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3c      	ldr	r2, [pc, #240]	; (8004254 <TIM_Base_SetConfig+0x11c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <TIM_Base_SetConfig+0x40>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a3b      	ldr	r2, [pc, #236]	; (8004258 <TIM_Base_SetConfig+0x120>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0x40>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a3a      	ldr	r2, [pc, #232]	; (800425c <TIM_Base_SetConfig+0x124>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d108      	bne.n	800418a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a2f      	ldr	r2, [pc, #188]	; (800424c <TIM_Base_SetConfig+0x114>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02b      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d027      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <TIM_Base_SetConfig+0x118>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d023      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a2b      	ldr	r2, [pc, #172]	; (8004254 <TIM_Base_SetConfig+0x11c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01f      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <TIM_Base_SetConfig+0x120>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01b      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a29      	ldr	r2, [pc, #164]	; (800425c <TIM_Base_SetConfig+0x124>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d017      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a28      	ldr	r2, [pc, #160]	; (8004260 <TIM_Base_SetConfig+0x128>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a27      	ldr	r2, [pc, #156]	; (8004264 <TIM_Base_SetConfig+0x12c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00f      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a26      	ldr	r2, [pc, #152]	; (8004268 <TIM_Base_SetConfig+0x130>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00b      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a25      	ldr	r2, [pc, #148]	; (800426c <TIM_Base_SetConfig+0x134>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d007      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a24      	ldr	r2, [pc, #144]	; (8004270 <TIM_Base_SetConfig+0x138>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a23      	ldr	r2, [pc, #140]	; (8004274 <TIM_Base_SetConfig+0x13c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d108      	bne.n	80041fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <TIM_Base_SetConfig+0x114>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <TIM_Base_SetConfig+0xf8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a0c      	ldr	r2, [pc, #48]	; (800425c <TIM_Base_SetConfig+0x124>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	615a      	str	r2, [r3, #20]
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40010400 	.word	0x40010400
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800
 800426c:	40001800 	.word	0x40001800
 8004270:	40001c00 	.word	0x40001c00
 8004274:	40002000 	.word	0x40002000

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e040      	b.n	8004348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc fdea 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8b0 	bl	8004458 <UART_SetConfig>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e022      	b.n	8004348 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fb08 	bl	8004920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800431e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800432e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fb8f 	bl	8004a64 <UART_CheckIdleState>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004364:	2b20      	cmp	r3, #32
 8004366:	d171      	bne.n	800444c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Transmit+0x24>
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e06a      	b.n	800444e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2221      	movs	r2, #33	; 0x21
 8004384:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004386:	f7fc ff99 	bl	80012bc <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a4:	d108      	bne.n	80043b8 <HAL_UART_Transmit+0x68>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e003      	b.n	80043c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043c0:	e02c      	b.n	800441c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fb96 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e038      	b.n	800444e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3302      	adds	r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e007      	b.n	800440a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1cc      	bne.n	80043c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2200      	movs	r2, #0
 8004430:	2140      	movs	r1, #64	; 0x40
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fb63 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e005      	b.n	800444e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4ba6      	ldr	r3, [pc, #664]	; (800471c <UART_SetConfig+0x2c4>)
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	6979      	ldr	r1, [r7, #20]
 800448c:	430b      	orrs	r3, r1
 800448e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a94      	ldr	r2, [pc, #592]	; (8004720 <UART_SetConfig+0x2c8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d120      	bne.n	8004516 <UART_SetConfig+0xbe>
 80044d4:	4b93      	ldr	r3, [pc, #588]	; (8004724 <UART_SetConfig+0x2cc>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d816      	bhi.n	8004510 <UART_SetConfig+0xb8>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <UART_SetConfig+0x90>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	080044f9 	.word	0x080044f9
 80044ec:	08004505 	.word	0x08004505
 80044f0:	080044ff 	.word	0x080044ff
 80044f4:	0800450b 	.word	0x0800450b
 80044f8:	2301      	movs	r3, #1
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e150      	b.n	80047a0 <UART_SetConfig+0x348>
 80044fe:	2302      	movs	r3, #2
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e14d      	b.n	80047a0 <UART_SetConfig+0x348>
 8004504:	2304      	movs	r3, #4
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e14a      	b.n	80047a0 <UART_SetConfig+0x348>
 800450a:	2308      	movs	r3, #8
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e147      	b.n	80047a0 <UART_SetConfig+0x348>
 8004510:	2310      	movs	r3, #16
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e144      	b.n	80047a0 <UART_SetConfig+0x348>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a83      	ldr	r2, [pc, #524]	; (8004728 <UART_SetConfig+0x2d0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d132      	bne.n	8004586 <UART_SetConfig+0x12e>
 8004520:	4b80      	ldr	r3, [pc, #512]	; (8004724 <UART_SetConfig+0x2cc>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d828      	bhi.n	8004580 <UART_SetConfig+0x128>
 800452e:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0xdc>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004569 	.word	0x08004569
 8004538:	08004581 	.word	0x08004581
 800453c:	08004581 	.word	0x08004581
 8004540:	08004581 	.word	0x08004581
 8004544:	08004575 	.word	0x08004575
 8004548:	08004581 	.word	0x08004581
 800454c:	08004581 	.word	0x08004581
 8004550:	08004581 	.word	0x08004581
 8004554:	0800456f 	.word	0x0800456f
 8004558:	08004581 	.word	0x08004581
 800455c:	08004581 	.word	0x08004581
 8004560:	08004581 	.word	0x08004581
 8004564:	0800457b 	.word	0x0800457b
 8004568:	2300      	movs	r3, #0
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e118      	b.n	80047a0 <UART_SetConfig+0x348>
 800456e:	2302      	movs	r3, #2
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e115      	b.n	80047a0 <UART_SetConfig+0x348>
 8004574:	2304      	movs	r3, #4
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e112      	b.n	80047a0 <UART_SetConfig+0x348>
 800457a:	2308      	movs	r3, #8
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e10f      	b.n	80047a0 <UART_SetConfig+0x348>
 8004580:	2310      	movs	r3, #16
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e10c      	b.n	80047a0 <UART_SetConfig+0x348>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a68      	ldr	r2, [pc, #416]	; (800472c <UART_SetConfig+0x2d4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d120      	bne.n	80045d2 <UART_SetConfig+0x17a>
 8004590:	4b64      	ldr	r3, [pc, #400]	; (8004724 <UART_SetConfig+0x2cc>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800459a:	2b30      	cmp	r3, #48	; 0x30
 800459c:	d013      	beq.n	80045c6 <UART_SetConfig+0x16e>
 800459e:	2b30      	cmp	r3, #48	; 0x30
 80045a0:	d814      	bhi.n	80045cc <UART_SetConfig+0x174>
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d009      	beq.n	80045ba <UART_SetConfig+0x162>
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d810      	bhi.n	80045cc <UART_SetConfig+0x174>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <UART_SetConfig+0x15c>
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d006      	beq.n	80045c0 <UART_SetConfig+0x168>
 80045b2:	e00b      	b.n	80045cc <UART_SetConfig+0x174>
 80045b4:	2300      	movs	r3, #0
 80045b6:	77fb      	strb	r3, [r7, #31]
 80045b8:	e0f2      	b.n	80047a0 <UART_SetConfig+0x348>
 80045ba:	2302      	movs	r3, #2
 80045bc:	77fb      	strb	r3, [r7, #31]
 80045be:	e0ef      	b.n	80047a0 <UART_SetConfig+0x348>
 80045c0:	2304      	movs	r3, #4
 80045c2:	77fb      	strb	r3, [r7, #31]
 80045c4:	e0ec      	b.n	80047a0 <UART_SetConfig+0x348>
 80045c6:	2308      	movs	r3, #8
 80045c8:	77fb      	strb	r3, [r7, #31]
 80045ca:	e0e9      	b.n	80047a0 <UART_SetConfig+0x348>
 80045cc:	2310      	movs	r3, #16
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e0e6      	b.n	80047a0 <UART_SetConfig+0x348>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a56      	ldr	r2, [pc, #344]	; (8004730 <UART_SetConfig+0x2d8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d120      	bne.n	800461e <UART_SetConfig+0x1c6>
 80045dc:	4b51      	ldr	r3, [pc, #324]	; (8004724 <UART_SetConfig+0x2cc>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045e6:	2bc0      	cmp	r3, #192	; 0xc0
 80045e8:	d013      	beq.n	8004612 <UART_SetConfig+0x1ba>
 80045ea:	2bc0      	cmp	r3, #192	; 0xc0
 80045ec:	d814      	bhi.n	8004618 <UART_SetConfig+0x1c0>
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d009      	beq.n	8004606 <UART_SetConfig+0x1ae>
 80045f2:	2b80      	cmp	r3, #128	; 0x80
 80045f4:	d810      	bhi.n	8004618 <UART_SetConfig+0x1c0>
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <UART_SetConfig+0x1a8>
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d006      	beq.n	800460c <UART_SetConfig+0x1b4>
 80045fe:	e00b      	b.n	8004618 <UART_SetConfig+0x1c0>
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e0cc      	b.n	80047a0 <UART_SetConfig+0x348>
 8004606:	2302      	movs	r3, #2
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e0c9      	b.n	80047a0 <UART_SetConfig+0x348>
 800460c:	2304      	movs	r3, #4
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e0c6      	b.n	80047a0 <UART_SetConfig+0x348>
 8004612:	2308      	movs	r3, #8
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e0c3      	b.n	80047a0 <UART_SetConfig+0x348>
 8004618:	2310      	movs	r3, #16
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e0c0      	b.n	80047a0 <UART_SetConfig+0x348>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a44      	ldr	r2, [pc, #272]	; (8004734 <UART_SetConfig+0x2dc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d125      	bne.n	8004674 <UART_SetConfig+0x21c>
 8004628:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <UART_SetConfig+0x2cc>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004636:	d017      	beq.n	8004668 <UART_SetConfig+0x210>
 8004638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463c:	d817      	bhi.n	800466e <UART_SetConfig+0x216>
 800463e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004642:	d00b      	beq.n	800465c <UART_SetConfig+0x204>
 8004644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004648:	d811      	bhi.n	800466e <UART_SetConfig+0x216>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <UART_SetConfig+0x1fe>
 800464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004652:	d006      	beq.n	8004662 <UART_SetConfig+0x20a>
 8004654:	e00b      	b.n	800466e <UART_SetConfig+0x216>
 8004656:	2300      	movs	r3, #0
 8004658:	77fb      	strb	r3, [r7, #31]
 800465a:	e0a1      	b.n	80047a0 <UART_SetConfig+0x348>
 800465c:	2302      	movs	r3, #2
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e09e      	b.n	80047a0 <UART_SetConfig+0x348>
 8004662:	2304      	movs	r3, #4
 8004664:	77fb      	strb	r3, [r7, #31]
 8004666:	e09b      	b.n	80047a0 <UART_SetConfig+0x348>
 8004668:	2308      	movs	r3, #8
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e098      	b.n	80047a0 <UART_SetConfig+0x348>
 800466e:	2310      	movs	r3, #16
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	e095      	b.n	80047a0 <UART_SetConfig+0x348>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2f      	ldr	r2, [pc, #188]	; (8004738 <UART_SetConfig+0x2e0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d125      	bne.n	80046ca <UART_SetConfig+0x272>
 800467e:	4b29      	ldr	r3, [pc, #164]	; (8004724 <UART_SetConfig+0x2cc>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800468c:	d017      	beq.n	80046be <UART_SetConfig+0x266>
 800468e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004692:	d817      	bhi.n	80046c4 <UART_SetConfig+0x26c>
 8004694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004698:	d00b      	beq.n	80046b2 <UART_SetConfig+0x25a>
 800469a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469e:	d811      	bhi.n	80046c4 <UART_SetConfig+0x26c>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x254>
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d006      	beq.n	80046b8 <UART_SetConfig+0x260>
 80046aa:	e00b      	b.n	80046c4 <UART_SetConfig+0x26c>
 80046ac:	2301      	movs	r3, #1
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e076      	b.n	80047a0 <UART_SetConfig+0x348>
 80046b2:	2302      	movs	r3, #2
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e073      	b.n	80047a0 <UART_SetConfig+0x348>
 80046b8:	2304      	movs	r3, #4
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e070      	b.n	80047a0 <UART_SetConfig+0x348>
 80046be:	2308      	movs	r3, #8
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e06d      	b.n	80047a0 <UART_SetConfig+0x348>
 80046c4:	2310      	movs	r3, #16
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e06a      	b.n	80047a0 <UART_SetConfig+0x348>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	; (800473c <UART_SetConfig+0x2e4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d138      	bne.n	8004746 <UART_SetConfig+0x2ee>
 80046d4:	4b13      	ldr	r3, [pc, #76]	; (8004724 <UART_SetConfig+0x2cc>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046e2:	d017      	beq.n	8004714 <UART_SetConfig+0x2bc>
 80046e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046e8:	d82a      	bhi.n	8004740 <UART_SetConfig+0x2e8>
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ee:	d00b      	beq.n	8004708 <UART_SetConfig+0x2b0>
 80046f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f4:	d824      	bhi.n	8004740 <UART_SetConfig+0x2e8>
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <UART_SetConfig+0x2aa>
 80046fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fe:	d006      	beq.n	800470e <UART_SetConfig+0x2b6>
 8004700:	e01e      	b.n	8004740 <UART_SetConfig+0x2e8>
 8004702:	2300      	movs	r3, #0
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e04b      	b.n	80047a0 <UART_SetConfig+0x348>
 8004708:	2302      	movs	r3, #2
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e048      	b.n	80047a0 <UART_SetConfig+0x348>
 800470e:	2304      	movs	r3, #4
 8004710:	77fb      	strb	r3, [r7, #31]
 8004712:	e045      	b.n	80047a0 <UART_SetConfig+0x348>
 8004714:	2308      	movs	r3, #8
 8004716:	77fb      	strb	r3, [r7, #31]
 8004718:	e042      	b.n	80047a0 <UART_SetConfig+0x348>
 800471a:	bf00      	nop
 800471c:	efff69f3 	.word	0xefff69f3
 8004720:	40011000 	.word	0x40011000
 8004724:	40023800 	.word	0x40023800
 8004728:	40004400 	.word	0x40004400
 800472c:	40004800 	.word	0x40004800
 8004730:	40004c00 	.word	0x40004c00
 8004734:	40005000 	.word	0x40005000
 8004738:	40011400 	.word	0x40011400
 800473c:	40007800 	.word	0x40007800
 8004740:	2310      	movs	r3, #16
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e02c      	b.n	80047a0 <UART_SetConfig+0x348>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a72      	ldr	r2, [pc, #456]	; (8004914 <UART_SetConfig+0x4bc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d125      	bne.n	800479c <UART_SetConfig+0x344>
 8004750:	4b71      	ldr	r3, [pc, #452]	; (8004918 <UART_SetConfig+0x4c0>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800475a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800475e:	d017      	beq.n	8004790 <UART_SetConfig+0x338>
 8004760:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004764:	d817      	bhi.n	8004796 <UART_SetConfig+0x33e>
 8004766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476a:	d00b      	beq.n	8004784 <UART_SetConfig+0x32c>
 800476c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004770:	d811      	bhi.n	8004796 <UART_SetConfig+0x33e>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <UART_SetConfig+0x326>
 8004776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800477a:	d006      	beq.n	800478a <UART_SetConfig+0x332>
 800477c:	e00b      	b.n	8004796 <UART_SetConfig+0x33e>
 800477e:	2300      	movs	r3, #0
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e00d      	b.n	80047a0 <UART_SetConfig+0x348>
 8004784:	2302      	movs	r3, #2
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e00a      	b.n	80047a0 <UART_SetConfig+0x348>
 800478a:	2304      	movs	r3, #4
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e007      	b.n	80047a0 <UART_SetConfig+0x348>
 8004790:	2308      	movs	r3, #8
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e004      	b.n	80047a0 <UART_SetConfig+0x348>
 8004796:	2310      	movs	r3, #16
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e001      	b.n	80047a0 <UART_SetConfig+0x348>
 800479c:	2310      	movs	r3, #16
 800479e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a8:	d15b      	bne.n	8004862 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d828      	bhi.n	8004802 <UART_SetConfig+0x3aa>
 80047b0:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <UART_SetConfig+0x360>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	080047e5 	.word	0x080047e5
 80047c0:	080047ed 	.word	0x080047ed
 80047c4:	08004803 	.word	0x08004803
 80047c8:	080047f3 	.word	0x080047f3
 80047cc:	08004803 	.word	0x08004803
 80047d0:	08004803 	.word	0x08004803
 80047d4:	08004803 	.word	0x08004803
 80047d8:	080047fb 	.word	0x080047fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7fe fe08 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 80047e0:	61b8      	str	r0, [r7, #24]
        break;
 80047e2:	e013      	b.n	800480c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e4:	f7fe fe18 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 80047e8:	61b8      	str	r0, [r7, #24]
        break;
 80047ea:	e00f      	b.n	800480c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ec:	4b4b      	ldr	r3, [pc, #300]	; (800491c <UART_SetConfig+0x4c4>)
 80047ee:	61bb      	str	r3, [r7, #24]
        break;
 80047f0:	e00c      	b.n	800480c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f2:	f7fe fceb 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80047f6:	61b8      	str	r0, [r7, #24]
        break;
 80047f8:	e008      	b.n	800480c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fe:	61bb      	str	r3, [r7, #24]
        break;
 8004800:	e004      	b.n	800480c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	77bb      	strb	r3, [r7, #30]
        break;
 800480a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d074      	beq.n	80048fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	005a      	lsls	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	441a      	add	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b0f      	cmp	r3, #15
 800482c:	d916      	bls.n	800485c <UART_SetConfig+0x404>
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004834:	d212      	bcs.n	800485c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f023 030f 	bic.w	r3, r3, #15
 800483e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	b29b      	uxth	r3, r3
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	b29a      	uxth	r2, r3
 800484c:	89fb      	ldrh	r3, [r7, #14]
 800484e:	4313      	orrs	r3, r2
 8004850:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	89fa      	ldrh	r2, [r7, #14]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	e04f      	b.n	80048fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	77bb      	strb	r3, [r7, #30]
 8004860:	e04c      	b.n	80048fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004862:	7ffb      	ldrb	r3, [r7, #31]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d828      	bhi.n	80048ba <UART_SetConfig+0x462>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x418>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004895 	.word	0x08004895
 8004874:	0800489d 	.word	0x0800489d
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048ab 	.word	0x080048ab
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048bb 	.word	0x080048bb
 800488c:	080048bb 	.word	0x080048bb
 8004890:	080048b3 	.word	0x080048b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7fe fdac 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004898:	61b8      	str	r0, [r7, #24]
        break;
 800489a:	e013      	b.n	80048c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fe fdbc 	bl	8003418 <HAL_RCC_GetPCLK2Freq>
 80048a0:	61b8      	str	r0, [r7, #24]
        break;
 80048a2:	e00f      	b.n	80048c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <UART_SetConfig+0x4c4>)
 80048a6:	61bb      	str	r3, [r7, #24]
        break;
 80048a8:	e00c      	b.n	80048c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7fe fc8f 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80048ae:	61b8      	str	r0, [r7, #24]
        break;
 80048b0:	e008      	b.n	80048c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b6:	61bb      	str	r3, [r7, #24]
        break;
 80048b8:	e004      	b.n	80048c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	77bb      	strb	r3, [r7, #30]
        break;
 80048c2:	bf00      	nop
    }

    if (pclk != 0U)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d018      	beq.n	80048fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	085a      	lsrs	r2, r3, #1
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	441a      	add	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b0f      	cmp	r3, #15
 80048e2:	d909      	bls.n	80048f8 <UART_SetConfig+0x4a0>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ea:	d205      	bcs.n	80048f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	e001      	b.n	80048fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004908:	7fbb      	ldrb	r3, [r7, #30]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40007c00 	.word	0x40007c00
 8004918:	40023800 	.word	0x40023800
 800491c:	00f42400 	.word	0x00f42400

08004920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1e:	d10a      	bne.n	8004a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a74:	f7fc fc22 	bl	80012bc <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d10e      	bne.n	8004aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f831 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e027      	b.n	8004af6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d10e      	bne.n	8004ad2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f81b 	bl	8004afe <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e011      	b.n	8004af6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b09c      	sub	sp, #112	; 0x70
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0e:	e0a7      	b.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b16:	f000 80a3 	beq.w	8004c60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1a:	f7fc fbcf 	bl	80012bc <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d13f      	bne.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b44:	667b      	str	r3, [r7, #100]	; 0x64
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e6      	bne.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	663b      	str	r3, [r7, #96]	; 0x60
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3308      	adds	r3, #8
 8004b80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b82:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b8a:	e841 2300 	strex	r3, r2, [r1]
 8004b8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e5      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e068      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d050      	beq.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bcc:	d148      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e6      	bne.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	e853 3f00 	ldrex	r3, [r3]
 8004c18:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3308      	adds	r3, #8
 8004c28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c2a:	623a      	str	r2, [r7, #32]
 8004c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2e:	69f9      	ldr	r1, [r7, #28]
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	e841 2300 	strex	r3, r2, [r1]
 8004c36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1e5      	bne.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e010      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	f43f af48 	beq.w	8004b10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3770      	adds	r7, #112	; 0x70
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	f107 001c 	add.w	r0, r7, #28
 8004c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d120      	bne.n	8004ce6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <USB_CoreInit+0xac>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d105      	bne.n	8004cda <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa96 	bl	800520c <USB_CoreReset>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e010      	b.n	8004d08 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa8a 	bl	800520c <USB_CoreReset>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10b      	bne.n	8004d26 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f043 0206 	orr.w	r2, r3, #6
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d32:	b004      	add	sp, #16
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	ffbdffbf 	.word	0xffbdffbf

08004d3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f023 0201 	bic.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d115      	bne.n	8004dac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f7fc faa1 	bl	80012d4 <HAL_Delay>
      ms++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fa29 	bl	80051f0 <USB_GetMode>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d01e      	beq.n	8004de2 <USB_SetCurrentMode+0x84>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b31      	cmp	r3, #49	; 0x31
 8004da8:	d9f0      	bls.n	8004d8c <USB_SetCurrentMode+0x2e>
 8004daa:	e01a      	b.n	8004de2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d115      	bne.n	8004dde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	f7fc fa88 	bl	80012d4 <HAL_Delay>
      ms++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fa10 	bl	80051f0 <USB_GetMode>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <USB_SetCurrentMode+0x84>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b31      	cmp	r3, #49	; 0x31
 8004dda:	d9f0      	bls.n	8004dbe <USB_SetCurrentMode+0x60>
 8004ddc:	e001      	b.n	8004de2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e005      	b.n	8004dee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b32      	cmp	r3, #50	; 0x32
 8004de6:	d101      	bne.n	8004dec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004df8:	b084      	sub	sp, #16
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b086      	sub	sp, #24
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	e009      	b.n	8004e2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	3340      	adds	r3, #64	; 0x40
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	2200      	movs	r2, #0
 8004e24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b0e      	cmp	r3, #14
 8004e30:	d9f2      	bls.n	8004e18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d11c      	bne.n	8004e72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e46:	f043 0302 	orr.w	r3, r3, #2
 8004e4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e005      	b.n	8004e7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e84:	461a      	mov	r2, r3
 8004e86:	2300      	movs	r3, #0
 8004e88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e90:	4619      	mov	r1, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e98:	461a      	mov	r2, r3
 8004e9a:	680b      	ldr	r3, [r1, #0]
 8004e9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10c      	bne.n	8004ebe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d104      	bne.n	8004eb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f965 	bl	800517c <USB_SetDevSpeed>
 8004eb2:	e008      	b.n	8004ec6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f960 	bl	800517c <USB_SetDevSpeed>
 8004ebc:	e003      	b.n	8004ec6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ebe:	2103      	movs	r1, #3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f95b 	bl	800517c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ec6:	2110      	movs	r1, #16
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f8f3 	bl	80050b4 <USB_FlushTxFifo>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f91f 	bl	800511c <USB_FlushRxFifo>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	461a      	mov	r2, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	461a      	mov	r2, r3
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	e043      	b.n	8004f9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f28:	d118      	bne.n	8004f5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e013      	b.n	8004f6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	461a      	mov	r2, r3
 8004f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e008      	b.n	8004f6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	3301      	adds	r3, #1
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d3b7      	bcc.n	8004f12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	e043      	b.n	8005030 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fbe:	d118      	bne.n	8004ff2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e013      	b.n	8005004 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	e008      	b.n	8005004 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffe:	461a      	mov	r2, r3
 8005000:	2300      	movs	r3, #0
 8005002:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	461a      	mov	r2, r3
 8005012:	2300      	movs	r3, #0
 8005014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	461a      	mov	r2, r3
 8005024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005028:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3301      	adds	r3, #1
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	429a      	cmp	r2, r3
 8005036:	d3b7      	bcc.n	8004fa8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800504a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005058:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f043 0210 	orr.w	r2, r3, #16
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <USB_DevInit+0x2b4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f043 0208 	orr.w	r2, r3, #8
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800508a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <USB_DevInit+0x2b8>)
 8005096:	4313      	orrs	r3, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800509c:	7dfb      	ldrb	r3, [r7, #23]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050a8:	b004      	add	sp, #16
 80050aa:	4770      	bx	lr
 80050ac:	803c3800 	.word	0x803c3800
 80050b0:	40000004 	.word	0x40000004

080050b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3301      	adds	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4a13      	ldr	r2, [pc, #76]	; (8005118 <USB_FlushTxFifo+0x64>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e01b      	b.n	800510c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	daf2      	bge.n	80050c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	019b      	lsls	r3, r3, #6
 80050e4:	f043 0220 	orr.w	r2, r3, #32
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a08      	ldr	r2, [pc, #32]	; (8005118 <USB_FlushTxFifo+0x64>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e006      	b.n	800510c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b20      	cmp	r3, #32
 8005108:	d0f0      	beq.n	80050ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	00030d40 	.word	0x00030d40

0800511c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a11      	ldr	r2, [pc, #68]	; (8005178 <USB_FlushRxFifo+0x5c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e018      	b.n	800516c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	daf2      	bge.n	8005128 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2210      	movs	r2, #16
 800514a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <USB_FlushRxFifo+0x5c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e006      	b.n	800516c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b10      	cmp	r3, #16
 8005168:	d0f0      	beq.n	800514c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	00030d40 	.word	0x00030d40

0800517c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	68f9      	ldr	r1, [r7, #12]
 8005198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051c8:	f023 0303 	bic.w	r3, r3, #3
 80051cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051dc:	f043 0302 	orr.w	r3, r3, #2
 80051e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f003 0301 	and.w	r3, r3, #1
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a13      	ldr	r2, [pc, #76]	; (8005270 <USB_CoreReset+0x64>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e01b      	b.n	8005262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	daf2      	bge.n	8005218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <USB_CoreReset+0x64>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d901      	bls.n	8005254 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e006      	b.n	8005262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d0f0      	beq.n	8005242 <USB_CoreReset+0x36>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	00030d40 	.word	0x00030d40

08005274 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005286:	2b84      	cmp	r3, #132	; 0x84
 8005288:	d005      	beq.n	8005296 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800528a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	3303      	adds	r3, #3
 8005294:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005296:	68fb      	ldr	r3, [r7, #12]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052a8:	f000 fb00 	bl	80058ac <vTaskStartScheduler>
  
  return osOK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b4:	b089      	sub	sp, #36	; 0x24
 80052b6:	af04      	add	r7, sp, #16
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <osThreadCreate+0x54>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01c      	beq.n	8005306 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685c      	ldr	r4, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681d      	ldr	r5, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691e      	ldr	r6, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff ffc8 	bl	8005274 <makeFreeRtosPriority>
 80052e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052ee:	9202      	str	r2, [sp, #8]
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	9100      	str	r1, [sp, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4632      	mov	r2, r6
 80052f8:	4629      	mov	r1, r5
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 f8ed 	bl	80054da <xTaskCreateStatic>
 8005300:	4603      	mov	r3, r0
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e01c      	b.n	8005340 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685c      	ldr	r4, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005312:	b29e      	uxth	r6, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ffaa 	bl	8005274 <makeFreeRtosPriority>
 8005320:	4602      	mov	r2, r0
 8005322:	f107 030c 	add.w	r3, r7, #12
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	9200      	str	r2, [sp, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	4632      	mov	r2, r6
 800532e:	4629      	mov	r1, r5
 8005330:	4620      	mov	r0, r4
 8005332:	f000 f935 	bl	80055a0 <xTaskCreate>
 8005336:	4603      	mov	r3, r0
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005340:	68fb      	ldr	r3, [r7, #12]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800534a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <osDelay+0x16>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	e000      	b.n	8005362 <osDelay+0x18>
 8005360:	2301      	movs	r3, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fa6c 	bl	8005840 <vTaskDelay>
  
  return osOK;
 8005368:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f103 0208 	add.w	r2, r3, #8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800538a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f103 0208 	add.w	r2, r3, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f103 0208 	add.w	r2, r3, #8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	601a      	str	r2, [r3, #0]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800542a:	d103      	bne.n	8005434 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e00c      	b.n	800544e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3308      	adds	r3, #8
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	e002      	b.n	8005442 <vListInsert+0x2e>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	429a      	cmp	r2, r3
 800544c:	d2f6      	bcs.n	800543c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6892      	ldr	r2, [r2, #8]
 800549c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6852      	ldr	r2, [r2, #4]
 80054a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d103      	bne.n	80054ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	1e5a      	subs	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b08e      	sub	sp, #56	; 0x38
 80054de:	af04      	add	r7, sp, #16
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
 80054e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10c      	bne.n	8005508 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	b672      	cpsid	i
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	b662      	cpsie	i
 8005502:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005504:	bf00      	nop
 8005506:	e7fe      	b.n	8005506 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10c      	bne.n	8005528 <xTaskCreateStatic+0x4e>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	b672      	cpsid	i
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	b662      	cpsie	i
 8005522:	61fb      	str	r3, [r7, #28]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005528:	23b4      	movs	r3, #180	; 0xb4
 800552a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2bb4      	cmp	r3, #180	; 0xb4
 8005530:	d00c      	beq.n	800554c <xTaskCreateStatic+0x72>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	b672      	cpsid	i
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	b662      	cpsie	i
 8005546:	61bb      	str	r3, [r7, #24]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800554c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01e      	beq.n	8005592 <xTaskCreateStatic+0xb8>
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01b      	beq.n	8005592 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005562:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	2202      	movs	r2, #2
 8005568:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800556c:	2300      	movs	r3, #0
 800556e:	9303      	str	r3, [sp, #12]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	9302      	str	r3, [sp, #8]
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f851 	bl	800562c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800558a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800558c:	f000 f8ee 	bl	800576c <prvAddNewTaskToReadyList>
 8005590:	e001      	b.n	8005596 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005596:	697b      	ldr	r3, [r7, #20]
	}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08c      	sub	sp, #48	; 0x30
 80055a4:	af04      	add	r7, sp, #16
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fee9 	bl	800638c <pvPortMalloc>
 80055ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055c2:	20b4      	movs	r0, #180	; 0xb4
 80055c4:	f000 fee2 	bl	800638c <pvPortMalloc>
 80055c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
 80055d6:	e005      	b.n	80055e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055d8:	6978      	ldr	r0, [r7, #20]
 80055da:	f000 ffa1 	bl	8006520 <vPortFree>
 80055de:	e001      	b.n	80055e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d017      	beq.n	800561a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	2300      	movs	r3, #0
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	9302      	str	r3, [sp, #8]
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f80f 	bl	800562c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800560e:	69f8      	ldr	r0, [r7, #28]
 8005610:	f000 f8ac 	bl	800576c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005614:	2301      	movs	r3, #1
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	e002      	b.n	8005620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800561a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800561e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005620:	69bb      	ldr	r3, [r7, #24]
	}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005644:	440b      	add	r3, r1
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f023 0307 	bic.w	r3, r3, #7
 8005652:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	b672      	cpsid	i
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	b662      	cpsie	i
 8005672:	617b      	str	r3, [r7, #20]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01f      	beq.n	80056be <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	e012      	b.n	80056aa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	7819      	ldrb	r1, [r3, #0]
 800568c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	3334      	adds	r3, #52	; 0x34
 8005694:	460a      	mov	r2, r1
 8005696:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d006      	beq.n	80056b2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2b0f      	cmp	r3, #15
 80056ae:	d9e9      	bls.n	8005684 <prvInitialiseNewTask+0x58>
 80056b0:	e000      	b.n	80056b4 <prvInitialiseNewTask+0x88>
			{
				break;
 80056b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056bc:	e003      	b.n	80056c6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	2b06      	cmp	r3, #6
 80056ca:	d901      	bls.n	80056d0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056cc:	2306      	movs	r3, #6
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	2200      	movs	r2, #0
 80056e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	3304      	adds	r3, #4
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff fe63 	bl	80053b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	3318      	adds	r3, #24
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fe5e 	bl	80053b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	f1c3 0207 	rsb	r2, r3, #7
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	2200      	movs	r2, #0
 8005710:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	2200      	movs	r2, #0
 8005718:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	334c      	adds	r3, #76	; 0x4c
 8005720:	2260      	movs	r2, #96	; 0x60
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f001 f84f 	bl	80067c8 <memset>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <prvInitialiseNewTask+0x134>)
 800572e:	651a      	str	r2, [r3, #80]	; 0x50
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	4a0c      	ldr	r2, [pc, #48]	; (8005764 <prvInitialiseNewTask+0x138>)
 8005734:	655a      	str	r2, [r3, #84]	; 0x54
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	4a0b      	ldr	r2, [pc, #44]	; (8005768 <prvInitialiseNewTask+0x13c>)
 800573a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	69b8      	ldr	r0, [r7, #24]
 8005742:	f000 fc2d 	bl	8005fa0 <pxPortInitialiseStack>
 8005746:	4602      	mov	r2, r0
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005756:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005758:	bf00      	nop
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	08007220 	.word	0x08007220
 8005764:	08007240 	.word	0x08007240
 8005768:	08007200 	.word	0x08007200

0800576c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005774:	f000 fd22 	bl	80061bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005778:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <prvAddNewTaskToReadyList+0xb8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3301      	adds	r3, #1
 800577e:	4a29      	ldr	r2, [pc, #164]	; (8005824 <prvAddNewTaskToReadyList+0xb8>)
 8005780:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005782:	4b29      	ldr	r3, [pc, #164]	; (8005828 <prvAddNewTaskToReadyList+0xbc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800578a:	4a27      	ldr	r2, [pc, #156]	; (8005828 <prvAddNewTaskToReadyList+0xbc>)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005790:	4b24      	ldr	r3, [pc, #144]	; (8005824 <prvAddNewTaskToReadyList+0xb8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d110      	bne.n	80057ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005798:	f000 fad8 	bl	8005d4c <prvInitialiseTaskLists>
 800579c:	e00d      	b.n	80057ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800579e:	4b23      	ldr	r3, [pc, #140]	; (800582c <prvAddNewTaskToReadyList+0xc0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <prvAddNewTaskToReadyList+0xbc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d802      	bhi.n	80057ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <prvAddNewTaskToReadyList+0xbc>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057ba:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <prvAddNewTaskToReadyList+0xc4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3301      	adds	r3, #1
 80057c0:	4a1b      	ldr	r2, [pc, #108]	; (8005830 <prvAddNewTaskToReadyList+0xc4>)
 80057c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	2201      	movs	r2, #1
 80057ca:	409a      	lsls	r2, r3
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <prvAddNewTaskToReadyList+0xc8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	4a18      	ldr	r2, [pc, #96]	; (8005834 <prvAddNewTaskToReadyList+0xc8>)
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4a15      	ldr	r2, [pc, #84]	; (8005838 <prvAddNewTaskToReadyList+0xcc>)
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7ff fded 	bl	80053cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057f2:	f000 fd17 	bl	8006224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057f6:	4b0d      	ldr	r3, [pc, #52]	; (800582c <prvAddNewTaskToReadyList+0xc0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00e      	beq.n	800581c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <prvAddNewTaskToReadyList+0xbc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	429a      	cmp	r2, r3
 800580a:	d207      	bcs.n	800581c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800580c:	4b0b      	ldr	r3, [pc, #44]	; (800583c <prvAddNewTaskToReadyList+0xd0>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000cbc 	.word	0x20000cbc
 8005828:	20000bbc 	.word	0x20000bbc
 800582c:	20000cc8 	.word	0x20000cc8
 8005830:	20000cd8 	.word	0x20000cd8
 8005834:	20000cc4 	.word	0x20000cc4
 8005838:	20000bc0 	.word	0x20000bc0
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d019      	beq.n	8005886 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005852:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <vTaskDelay+0x64>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00c      	beq.n	8005874 <vTaskDelay+0x34>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	b672      	cpsid	i
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	b662      	cpsie	i
 800586e:	60bb      	str	r3, [r7, #8]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005874:	f000 f888 	bl	8005988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005878:	2100      	movs	r1, #0
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb2a 	bl	8005ed4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005880:	f000 f890 	bl	80059a4 <xTaskResumeAll>
 8005884:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d107      	bne.n	800589c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <vTaskDelay+0x68>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20000ce4 	.word	0x20000ce4
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	; 0x28
 80058b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058ba:	463a      	mov	r2, r7
 80058bc:	1d39      	adds	r1, r7, #4
 80058be:	f107 0308 	add.w	r3, r7, #8
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fa fe8e 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	9202      	str	r2, [sp, #8]
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	2300      	movs	r3, #0
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	2300      	movs	r3, #0
 80058d8:	460a      	mov	r2, r1
 80058da:	4923      	ldr	r1, [pc, #140]	; (8005968 <vTaskStartScheduler+0xbc>)
 80058dc:	4823      	ldr	r0, [pc, #140]	; (800596c <vTaskStartScheduler+0xc0>)
 80058de:	f7ff fdfc 	bl	80054da <xTaskCreateStatic>
 80058e2:	4603      	mov	r3, r0
 80058e4:	4a22      	ldr	r2, [pc, #136]	; (8005970 <vTaskStartScheduler+0xc4>)
 80058e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058e8:	4b21      	ldr	r3, [pc, #132]	; (8005970 <vTaskStartScheduler+0xc4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058f0:	2301      	movs	r3, #1
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e001      	b.n	80058fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d11d      	bne.n	800593c <vTaskStartScheduler+0x90>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	b672      	cpsid	i
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	b662      	cpsie	i
 8005914:	613b      	str	r3, [r7, #16]
}
 8005916:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <vTaskStartScheduler+0xc8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	334c      	adds	r3, #76	; 0x4c
 800591e:	4a16      	ldr	r2, [pc, #88]	; (8005978 <vTaskStartScheduler+0xcc>)
 8005920:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005922:	4b16      	ldr	r3, [pc, #88]	; (800597c <vTaskStartScheduler+0xd0>)
 8005924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005928:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800592a:	4b15      	ldr	r3, [pc, #84]	; (8005980 <vTaskStartScheduler+0xd4>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005930:	4b14      	ldr	r3, [pc, #80]	; (8005984 <vTaskStartScheduler+0xd8>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005936:	f000 fbc3 	bl	80060c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800593a:	e010      	b.n	800595e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005942:	d10c      	bne.n	800595e <vTaskStartScheduler+0xb2>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	b672      	cpsid	i
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	b662      	cpsie	i
 8005958:	60fb      	str	r3, [r7, #12]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <vTaskStartScheduler+0xb0>
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	080071e0 	.word	0x080071e0
 800596c:	08005d1d 	.word	0x08005d1d
 8005970:	20000ce0 	.word	0x20000ce0
 8005974:	20000bbc 	.word	0x20000bbc
 8005978:	20000010 	.word	0x20000010
 800597c:	20000cdc 	.word	0x20000cdc
 8005980:	20000cc8 	.word	0x20000cc8
 8005984:	20000cc0 	.word	0x20000cc0

08005988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <vTaskSuspendAll+0x18>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	4a03      	ldr	r2, [pc, #12]	; (80059a0 <vTaskSuspendAll+0x18>)
 8005994:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005996:	bf00      	nop
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000ce4 	.word	0x20000ce4

080059a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059b2:	4b42      	ldr	r3, [pc, #264]	; (8005abc <xTaskResumeAll+0x118>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10c      	bne.n	80059d4 <xTaskResumeAll+0x30>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	b672      	cpsid	i
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	b662      	cpsie	i
 80059ce:	603b      	str	r3, [r7, #0]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059d4:	f000 fbf2 	bl	80061bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059d8:	4b38      	ldr	r3, [pc, #224]	; (8005abc <xTaskResumeAll+0x118>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	4a37      	ldr	r2, [pc, #220]	; (8005abc <xTaskResumeAll+0x118>)
 80059e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059e2:	4b36      	ldr	r3, [pc, #216]	; (8005abc <xTaskResumeAll+0x118>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d161      	bne.n	8005aae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059ea:	4b35      	ldr	r3, [pc, #212]	; (8005ac0 <xTaskResumeAll+0x11c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d05d      	beq.n	8005aae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059f2:	e02e      	b.n	8005a52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f4:	4b33      	ldr	r3, [pc, #204]	; (8005ac4 <xTaskResumeAll+0x120>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3318      	adds	r3, #24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fd40 	bl	8005486 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff fd3b 	bl	8005486 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	2201      	movs	r2, #1
 8005a16:	409a      	lsls	r2, r3
 8005a18:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <xTaskResumeAll+0x124>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	4a2a      	ldr	r2, [pc, #168]	; (8005ac8 <xTaskResumeAll+0x124>)
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4a27      	ldr	r2, [pc, #156]	; (8005acc <xTaskResumeAll+0x128>)
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7ff fcc7 	bl	80053cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <xTaskResumeAll+0x12c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d302      	bcc.n	8005a52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005a4c:	4b21      	ldr	r3, [pc, #132]	; (8005ad4 <xTaskResumeAll+0x130>)
 8005a4e:	2201      	movs	r2, #1
 8005a50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <xTaskResumeAll+0x120>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1cc      	bne.n	80059f4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a60:	f000 fa18 	bl	8005e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a64:	4b1c      	ldr	r3, [pc, #112]	; (8005ad8 <xTaskResumeAll+0x134>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d010      	beq.n	8005a92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a70:	f000 f836 	bl	8005ae0 <xTaskIncrementTick>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <xTaskResumeAll+0x130>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f1      	bne.n	8005a70 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005a8c:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <xTaskResumeAll+0x134>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <xTaskResumeAll+0x130>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <xTaskResumeAll+0x138>)
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aae:	f000 fbb9 	bl	8006224 <vPortExitCritical>

	return xAlreadyYielded;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000ce4 	.word	0x20000ce4
 8005ac0:	20000cbc 	.word	0x20000cbc
 8005ac4:	20000c7c 	.word	0x20000c7c
 8005ac8:	20000cc4 	.word	0x20000cc4
 8005acc:	20000bc0 	.word	0x20000bc0
 8005ad0:	20000bbc 	.word	0x20000bbc
 8005ad4:	20000cd0 	.word	0x20000cd0
 8005ad8:	20000ccc 	.word	0x20000ccc
 8005adc:	e000ed04 	.word	0xe000ed04

08005ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aea:	4b4f      	ldr	r3, [pc, #316]	; (8005c28 <xTaskIncrementTick+0x148>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f040 808a 	bne.w	8005c08 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005af4:	4b4d      	ldr	r3, [pc, #308]	; (8005c2c <xTaskIncrementTick+0x14c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3301      	adds	r3, #1
 8005afa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005afc:	4a4b      	ldr	r2, [pc, #300]	; (8005c2c <xTaskIncrementTick+0x14c>)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d122      	bne.n	8005b4e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b08:	4b49      	ldr	r3, [pc, #292]	; (8005c30 <xTaskIncrementTick+0x150>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <xTaskIncrementTick+0x4c>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	b672      	cpsid	i
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	b662      	cpsie	i
 8005b26:	603b      	str	r3, [r7, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <xTaskIncrementTick+0x4a>
 8005b2c:	4b40      	ldr	r3, [pc, #256]	; (8005c30 <xTaskIncrementTick+0x150>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	4b40      	ldr	r3, [pc, #256]	; (8005c34 <xTaskIncrementTick+0x154>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a3e      	ldr	r2, [pc, #248]	; (8005c30 <xTaskIncrementTick+0x150>)
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	4a3e      	ldr	r2, [pc, #248]	; (8005c34 <xTaskIncrementTick+0x154>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	4b3d      	ldr	r3, [pc, #244]	; (8005c38 <xTaskIncrementTick+0x158>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	4a3c      	ldr	r2, [pc, #240]	; (8005c38 <xTaskIncrementTick+0x158>)
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	f000 f9a3 	bl	8005e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b4e:	4b3b      	ldr	r3, [pc, #236]	; (8005c3c <xTaskIncrementTick+0x15c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d348      	bcc.n	8005bea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b58:	4b35      	ldr	r3, [pc, #212]	; (8005c30 <xTaskIncrementTick+0x150>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d104      	bne.n	8005b6c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b62:	4b36      	ldr	r3, [pc, #216]	; (8005c3c <xTaskIncrementTick+0x15c>)
 8005b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b68:	601a      	str	r2, [r3, #0]
					break;
 8005b6a:	e03e      	b.n	8005bea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6c:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <xTaskIncrementTick+0x150>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d203      	bcs.n	8005b8c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b84:	4a2d      	ldr	r2, [pc, #180]	; (8005c3c <xTaskIncrementTick+0x15c>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b8a:	e02e      	b.n	8005bea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff fc78 	bl	8005486 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3318      	adds	r3, #24
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fc6f 	bl	8005486 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	2201      	movs	r2, #1
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	4b23      	ldr	r3, [pc, #140]	; (8005c40 <xTaskIncrementTick+0x160>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <xTaskIncrementTick+0x160>)
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <xTaskIncrementTick+0x164>)
 8005bc8:	441a      	add	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	f7ff fbfb 	bl	80053cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <xTaskIncrementTick+0x168>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d3b9      	bcc.n	8005b58 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005be4:	2301      	movs	r3, #1
 8005be6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005be8:	e7b6      	b.n	8005b58 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <xTaskIncrementTick+0x168>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf0:	4914      	ldr	r1, [pc, #80]	; (8005c44 <xTaskIncrementTick+0x164>)
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d907      	bls.n	8005c12 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005c02:	2301      	movs	r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e004      	b.n	8005c12 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <xTaskIncrementTick+0x16c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	4a0f      	ldr	r2, [pc, #60]	; (8005c4c <xTaskIncrementTick+0x16c>)
 8005c10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <xTaskIncrementTick+0x170>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c1e:	697b      	ldr	r3, [r7, #20]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000ce4 	.word	0x20000ce4
 8005c2c:	20000cc0 	.word	0x20000cc0
 8005c30:	20000c74 	.word	0x20000c74
 8005c34:	20000c78 	.word	0x20000c78
 8005c38:	20000cd4 	.word	0x20000cd4
 8005c3c:	20000cdc 	.word	0x20000cdc
 8005c40:	20000cc4 	.word	0x20000cc4
 8005c44:	20000bc0 	.word	0x20000bc0
 8005c48:	20000bbc 	.word	0x20000bbc
 8005c4c:	20000ccc 	.word	0x20000ccc
 8005c50:	20000cd0 	.word	0x20000cd0

08005c54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c5a:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <vTaskSwitchContext+0xb0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c62:	4b29      	ldr	r3, [pc, #164]	; (8005d08 <vTaskSwitchContext+0xb4>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c68:	e046      	b.n	8005cf8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005c6a:	4b27      	ldr	r3, [pc, #156]	; (8005d08 <vTaskSwitchContext+0xb4>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c70:	4b26      	ldr	r3, [pc, #152]	; (8005d0c <vTaskSwitchContext+0xb8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	fab3 f383 	clz	r3, r3
 8005c7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	f1c3 031f 	rsb	r3, r3, #31
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	4922      	ldr	r1, [pc, #136]	; (8005d10 <vTaskSwitchContext+0xbc>)
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10c      	bne.n	8005cb4 <vTaskSwitchContext+0x60>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	b672      	cpsid	i
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	b662      	cpsie	i
 8005cae:	607b      	str	r3, [r7, #4]
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <vTaskSwitchContext+0x5e>
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <vTaskSwitchContext+0xbc>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d104      	bne.n	8005ce4 <vTaskSwitchContext+0x90>
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	605a      	str	r2, [r3, #4]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <vTaskSwitchContext+0xc0>)
 8005cec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <vTaskSwitchContext+0xc0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	334c      	adds	r3, #76	; 0x4c
 8005cf4:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <vTaskSwitchContext+0xc4>)
 8005cf6:	6013      	str	r3, [r2, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	20000ce4 	.word	0x20000ce4
 8005d08:	20000cd0 	.word	0x20000cd0
 8005d0c:	20000cc4 	.word	0x20000cc4
 8005d10:	20000bc0 	.word	0x20000bc0
 8005d14:	20000bbc 	.word	0x20000bbc
 8005d18:	20000010 	.word	0x20000010

08005d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d24:	f000 f852 	bl	8005dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d28:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <prvIdleTask+0x28>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d9f9      	bls.n	8005d24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <prvIdleTask+0x2c>)
 8005d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d40:	e7f0      	b.n	8005d24 <prvIdleTask+0x8>
 8005d42:	bf00      	nop
 8005d44:	20000bc0 	.word	0x20000bc0
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d52:	2300      	movs	r3, #0
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	e00c      	b.n	8005d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4a12      	ldr	r2, [pc, #72]	; (8005dac <prvInitialiseTaskLists+0x60>)
 8005d64:	4413      	add	r3, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fb03 	bl	8005372 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b06      	cmp	r3, #6
 8005d76:	d9ef      	bls.n	8005d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d78:	480d      	ldr	r0, [pc, #52]	; (8005db0 <prvInitialiseTaskLists+0x64>)
 8005d7a:	f7ff fafa 	bl	8005372 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d7e:	480d      	ldr	r0, [pc, #52]	; (8005db4 <prvInitialiseTaskLists+0x68>)
 8005d80:	f7ff faf7 	bl	8005372 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d84:	480c      	ldr	r0, [pc, #48]	; (8005db8 <prvInitialiseTaskLists+0x6c>)
 8005d86:	f7ff faf4 	bl	8005372 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d8a:	480c      	ldr	r0, [pc, #48]	; (8005dbc <prvInitialiseTaskLists+0x70>)
 8005d8c:	f7ff faf1 	bl	8005372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d90:	480b      	ldr	r0, [pc, #44]	; (8005dc0 <prvInitialiseTaskLists+0x74>)
 8005d92:	f7ff faee 	bl	8005372 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d96:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <prvInitialiseTaskLists+0x78>)
 8005d98:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <prvInitialiseTaskLists+0x64>)
 8005d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <prvInitialiseTaskLists+0x7c>)
 8005d9e:	4a05      	ldr	r2, [pc, #20]	; (8005db4 <prvInitialiseTaskLists+0x68>)
 8005da0:	601a      	str	r2, [r3, #0]
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000bc0 	.word	0x20000bc0
 8005db0:	20000c4c 	.word	0x20000c4c
 8005db4:	20000c60 	.word	0x20000c60
 8005db8:	20000c7c 	.word	0x20000c7c
 8005dbc:	20000c90 	.word	0x20000c90
 8005dc0:	20000ca8 	.word	0x20000ca8
 8005dc4:	20000c74 	.word	0x20000c74
 8005dc8:	20000c78 	.word	0x20000c78

08005dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dd2:	e019      	b.n	8005e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dd4:	f000 f9f2 	bl	80061bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dd8:	4b10      	ldr	r3, [pc, #64]	; (8005e1c <prvCheckTasksWaitingTermination+0x50>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff fb4e 	bl	8005486 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dea:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <prvCheckTasksWaitingTermination+0x54>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <prvCheckTasksWaitingTermination+0x54>)
 8005df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <prvCheckTasksWaitingTermination+0x58>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <prvCheckTasksWaitingTermination+0x58>)
 8005dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dfe:	f000 fa11 	bl	8006224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f810 	bl	8005e28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e08:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <prvCheckTasksWaitingTermination+0x58>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e1      	bne.n	8005dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000c90 	.word	0x20000c90
 8005e20:	20000cbc 	.word	0x20000cbc
 8005e24:	20000ca4 	.word	0x20000ca4

08005e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	334c      	adds	r3, #76	; 0x4c
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fd71 	bl	800691c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d108      	bne.n	8005e56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fb69 	bl	8006520 <vPortFree>
				vPortFree( pxTCB );
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fb66 	bl	8006520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e54:	e01a      	b.n	8005e8c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d103      	bne.n	8005e68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb5d 	bl	8006520 <vPortFree>
	}
 8005e66:	e011      	b.n	8005e8c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d00c      	beq.n	8005e8c <prvDeleteTCB+0x64>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	b672      	cpsid	i
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	b662      	cpsie	i
 8005e86:	60fb      	str	r3, [r7, #12]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <prvDeleteTCB+0x62>
	}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <prvResetNextTaskUnblockTime+0x38>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eac:	e008      	b.n	8005ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <prvResetNextTaskUnblockTime+0x38>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4a04      	ldr	r2, [pc, #16]	; (8005ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ebe:	6013      	str	r3, [r2, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20000c74 	.word	0x20000c74
 8005ed0:	20000cdc 	.word	0x20000cdc

08005ed4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ede:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ee4:	4b28      	ldr	r3, [pc, #160]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff facb 	bl	8005486 <uxListRemove>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10b      	bne.n	8005f0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ef6:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	2201      	movs	r2, #1
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43da      	mvns	r2, r3
 8005f04:	4b21      	ldr	r3, [pc, #132]	; (8005f8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	4a20      	ldr	r2, [pc, #128]	; (8005f8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f14:	d10a      	bne.n	8005f2c <prvAddCurrentTaskToDelayedList+0x58>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f1c:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4619      	mov	r1, r3
 8005f24:	481a      	ldr	r0, [pc, #104]	; (8005f90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f26:	f7ff fa51 	bl	80053cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f2a:	e026      	b.n	8005f7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f34:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d209      	bcs.n	8005f58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f44:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7ff fa5f 	bl	8005414 <vListInsert>
}
 8005f56:	e010      	b.n	8005f7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f58:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3304      	adds	r3, #4
 8005f62:	4619      	mov	r1, r3
 8005f64:	4610      	mov	r0, r2
 8005f66:	f7ff fa55 	bl	8005414 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d202      	bcs.n	8005f7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f74:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6013      	str	r3, [r2, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000cc0 	.word	0x20000cc0
 8005f88:	20000bbc 	.word	0x20000bbc
 8005f8c:	20000cc4 	.word	0x20000cc4
 8005f90:	20000ca8 	.word	0x20000ca8
 8005f94:	20000c78 	.word	0x20000c78
 8005f98:	20000c74 	.word	0x20000c74
 8005f9c:	20000cdc 	.word	0x20000cdc

08005fa0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3b04      	subs	r3, #4
 8005fb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3b04      	subs	r3, #4
 8005fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3b04      	subs	r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fd0:	4a0c      	ldr	r2, [pc, #48]	; (8006004 <pxPortInitialiseStack+0x64>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3b14      	subs	r3, #20
 8005fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f06f 0202 	mvn.w	r2, #2
 8005fee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3b20      	subs	r3, #32
 8005ff4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	08006009 	.word	0x08006009

08006008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006012:	4b14      	ldr	r3, [pc, #80]	; (8006064 <prvTaskExitError+0x5c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800601a:	d00c      	beq.n	8006036 <prvTaskExitError+0x2e>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	b672      	cpsid	i
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	b662      	cpsie	i
 8006030:	60fb      	str	r3, [r7, #12]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <prvTaskExitError+0x2c>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	b672      	cpsid	i
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	b662      	cpsie	i
 800604a:	60bb      	str	r3, [r7, #8]
}
 800604c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800604e:	bf00      	nop
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0fc      	beq.n	8006050 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	2000000c 	.word	0x2000000c
	...

08006070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <pxCurrentTCBConst2>)
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	6808      	ldr	r0, [r1, #0]
 8006076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607a:	f380 8809 	msr	PSP, r0
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8811 	msr	BASEPRI, r0
 800608a:	4770      	bx	lr
 800608c:	f3af 8000 	nop.w

08006090 <pxCurrentTCBConst2>:
 8006090:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop

08006098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006098:	4808      	ldr	r0, [pc, #32]	; (80060bc <prvPortStartFirstTask+0x24>)
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	6800      	ldr	r0, [r0, #0]
 800609e:	f380 8808 	msr	MSP, r0
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8814 	msr	CONTROL, r0
 80060aa:	b662      	cpsie	i
 80060ac:	b661      	cpsie	f
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	df00      	svc	0
 80060b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060ba:	bf00      	nop
 80060bc:	e000ed08 	.word	0xe000ed08

080060c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060c6:	4b37      	ldr	r3, [pc, #220]	; (80061a4 <xPortStartScheduler+0xe4>)
 80060c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <xPortStartScheduler+0xe8>)
 80060ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ee:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <xPortStartScheduler+0xec>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f4:	e009      	b.n	800610a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80060f6:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <xPortStartScheduler+0xec>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	4a2b      	ldr	r2, [pc, #172]	; (80061ac <xPortStartScheduler+0xec>)
 80060fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d0ef      	beq.n	80060f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006116:	4b25      	ldr	r3, [pc, #148]	; (80061ac <xPortStartScheduler+0xec>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1c3 0307 	rsb	r3, r3, #7
 800611e:	2b04      	cmp	r3, #4
 8006120:	d00c      	beq.n	800613c <xPortStartScheduler+0x7c>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	b672      	cpsid	i
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	b662      	cpsie	i
 8006136:	60bb      	str	r3, [r7, #8]
}
 8006138:	bf00      	nop
 800613a:	e7fe      	b.n	800613a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800613c:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <xPortStartScheduler+0xec>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	4a1a      	ldr	r2, [pc, #104]	; (80061ac <xPortStartScheduler+0xec>)
 8006144:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006146:	4b19      	ldr	r3, [pc, #100]	; (80061ac <xPortStartScheduler+0xec>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800614e:	4a17      	ldr	r2, [pc, #92]	; (80061ac <xPortStartScheduler+0xec>)
 8006150:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800615a:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <xPortStartScheduler+0xf0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a14      	ldr	r2, [pc, #80]	; (80061b0 <xPortStartScheduler+0xf0>)
 8006160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006164:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <xPortStartScheduler+0xf0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a11      	ldr	r2, [pc, #68]	; (80061b0 <xPortStartScheduler+0xf0>)
 800616c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006170:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006172:	f000 f8dd 	bl	8006330 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006176:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <xPortStartScheduler+0xf4>)
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800617c:	f000 f8fc 	bl	8006378 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006180:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <xPortStartScheduler+0xf8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <xPortStartScheduler+0xf8>)
 8006186:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800618a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800618c:	f7ff ff84 	bl	8006098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006190:	f7ff fd60 	bl	8005c54 <vTaskSwitchContext>
	prvTaskExitError();
 8006194:	f7ff ff38 	bl	8006008 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	e000e400 	.word	0xe000e400
 80061a8:	20000ce8 	.word	0x20000ce8
 80061ac:	20000cec 	.word	0x20000cec
 80061b0:	e000ed20 	.word	0xe000ed20
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	e000ef34 	.word	0xe000ef34

080061bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c6:	b672      	cpsid	i
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	b662      	cpsie	i
 80061d6:	607b      	str	r3, [r7, #4]
}
 80061d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061da:	4b10      	ldr	r3, [pc, #64]	; (800621c <vPortEnterCritical+0x60>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3301      	adds	r3, #1
 80061e0:	4a0e      	ldr	r2, [pc, #56]	; (800621c <vPortEnterCritical+0x60>)
 80061e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061e4:	4b0d      	ldr	r3, [pc, #52]	; (800621c <vPortEnterCritical+0x60>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d111      	bne.n	8006210 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <vPortEnterCritical+0x64>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00c      	beq.n	8006210 <vPortEnterCritical+0x54>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	b672      	cpsid	i
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	b662      	cpsie	i
 800620a:	603b      	str	r3, [r7, #0]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vPortEnterCritical+0x52>
	}
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	2000000c 	.word	0x2000000c
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800622a:	4b13      	ldr	r3, [pc, #76]	; (8006278 <vPortExitCritical+0x54>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10c      	bne.n	800624c <vPortExitCritical+0x28>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	b672      	cpsid	i
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	b662      	cpsie	i
 8006246:	607b      	str	r3, [r7, #4]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <vPortExitCritical+0x54>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3b01      	subs	r3, #1
 8006252:	4a09      	ldr	r2, [pc, #36]	; (8006278 <vPortExitCritical+0x54>)
 8006254:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <vPortExitCritical+0x54>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d105      	bne.n	800626a <vPortExitCritical+0x46>
 800625e:	2300      	movs	r3, #0
 8006260:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006268:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	2000000c 	.word	0x2000000c
 800627c:	00000000 	.word	0x00000000

08006280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006280:	f3ef 8009 	mrs	r0, PSP
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <pxCurrentTCBConst>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f01e 0f10 	tst.w	lr, #16
 8006290:	bf08      	it	eq
 8006292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062a4:	b672      	cpsid	i
 80062a6:	f380 8811 	msr	BASEPRI, r0
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	b662      	cpsie	i
 80062b4:	f7ff fcce 	bl	8005c54 <vTaskSwitchContext>
 80062b8:	f04f 0000 	mov.w	r0, #0
 80062bc:	f380 8811 	msr	BASEPRI, r0
 80062c0:	bc09      	pop	{r0, r3}
 80062c2:	6819      	ldr	r1, [r3, #0]
 80062c4:	6808      	ldr	r0, [r1, #0]
 80062c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	f01e 0f10 	tst.w	lr, #16
 80062ce:	bf08      	it	eq
 80062d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062d4:	f380 8809 	msr	PSP, r0
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop

080062e0 <pxCurrentTCBConst>:
 80062e0:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	b672      	cpsid	i
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	b662      	cpsie	i
 8006302:	607b      	str	r3, [r7, #4]
}
 8006304:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006306:	f7ff fbeb 	bl	8005ae0 <xTaskIncrementTick>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <SysTick_Handler+0x44>)
 8006312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	2300      	movs	r3, #0
 800631a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f383 8811 	msr	BASEPRI, r3
}
 8006322:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006334:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <vPortSetupTimerInterrupt+0x34>)
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <vPortSetupTimerInterrupt+0x38>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <vPortSetupTimerInterrupt+0x3c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <vPortSetupTimerInterrupt+0x40>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	099b      	lsrs	r3, r3, #6
 800634c:	4a09      	ldr	r2, [pc, #36]	; (8006374 <vPortSetupTimerInterrupt+0x44>)
 800634e:	3b01      	subs	r3, #1
 8006350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006352:	4b04      	ldr	r3, [pc, #16]	; (8006364 <vPortSetupTimerInterrupt+0x34>)
 8006354:	2207      	movs	r2, #7
 8006356:	601a      	str	r2, [r3, #0]
}
 8006358:	bf00      	nop
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	e000e010 	.word	0xe000e010
 8006368:	e000e018 	.word	0xe000e018
 800636c:	20000000 	.word	0x20000000
 8006370:	10624dd3 	.word	0x10624dd3
 8006374:	e000e014 	.word	0xe000e014

08006378 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006378:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006388 <vPortEnableVFP+0x10>
 800637c:	6801      	ldr	r1, [r0, #0]
 800637e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006382:	6001      	str	r1, [r0, #0]
 8006384:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006386:	bf00      	nop
 8006388:	e000ed88 	.word	0xe000ed88

0800638c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006398:	f7ff faf6 	bl	8005988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800639c:	4b5b      	ldr	r3, [pc, #364]	; (800650c <pvPortMalloc+0x180>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063a4:	f000 f91a 	bl	80065dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063a8:	4b59      	ldr	r3, [pc, #356]	; (8006510 <pvPortMalloc+0x184>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4013      	ands	r3, r2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f040 8092 	bne.w	80064da <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01f      	beq.n	80063fc <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80063bc:	2208      	movs	r2, #8
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f023 0307 	bic.w	r3, r3, #7
 80063d4:	3308      	adds	r3, #8
 80063d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00c      	beq.n	80063fc <pvPortMalloc+0x70>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	b672      	cpsid	i
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	b662      	cpsie	i
 80063f6:	617b      	str	r3, [r7, #20]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d06b      	beq.n	80064da <pvPortMalloc+0x14e>
 8006402:	4b44      	ldr	r3, [pc, #272]	; (8006514 <pvPortMalloc+0x188>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	429a      	cmp	r2, r3
 800640a:	d866      	bhi.n	80064da <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800640c:	4b42      	ldr	r3, [pc, #264]	; (8006518 <pvPortMalloc+0x18c>)
 800640e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006410:	4b41      	ldr	r3, [pc, #260]	; (8006518 <pvPortMalloc+0x18c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006416:	e004      	b.n	8006422 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	429a      	cmp	r2, r3
 800642a:	d903      	bls.n	8006434 <pvPortMalloc+0xa8>
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f1      	bne.n	8006418 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006434:	4b35      	ldr	r3, [pc, #212]	; (800650c <pvPortMalloc+0x180>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	429a      	cmp	r2, r3
 800643c:	d04d      	beq.n	80064da <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2208      	movs	r2, #8
 8006444:	4413      	add	r3, r2
 8006446:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	2308      	movs	r3, #8
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	429a      	cmp	r2, r3
 800645e:	d921      	bls.n	80064a4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <pvPortMalloc+0x100>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	b672      	cpsid	i
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	b662      	cpsie	i
 8006486:	613b      	str	r3, [r7, #16]
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	1ad2      	subs	r2, r2, r3
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800649e:	69b8      	ldr	r0, [r7, #24]
 80064a0:	f000 f8fe 	bl	80066a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064a4:	4b1b      	ldr	r3, [pc, #108]	; (8006514 <pvPortMalloc+0x188>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	4a19      	ldr	r2, [pc, #100]	; (8006514 <pvPortMalloc+0x188>)
 80064b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064b2:	4b18      	ldr	r3, [pc, #96]	; (8006514 <pvPortMalloc+0x188>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b19      	ldr	r3, [pc, #100]	; (800651c <pvPortMalloc+0x190>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d203      	bcs.n	80064c6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064be:	4b15      	ldr	r3, [pc, #84]	; (8006514 <pvPortMalloc+0x188>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a16      	ldr	r2, [pc, #88]	; (800651c <pvPortMalloc+0x190>)
 80064c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <pvPortMalloc+0x184>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064da:	f7ff fa63 	bl	80059a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00c      	beq.n	8006502 <pvPortMalloc+0x176>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	b672      	cpsid	i
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	b662      	cpsie	i
 80064fc:	60fb      	str	r3, [r7, #12]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <pvPortMalloc+0x174>
	return pvReturn;
 8006502:	69fb      	ldr	r3, [r7, #28]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3728      	adds	r7, #40	; 0x28
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	200048f8 	.word	0x200048f8
 8006510:	20004904 	.word	0x20004904
 8006514:	200048fc 	.word	0x200048fc
 8006518:	200048f0 	.word	0x200048f0
 800651c:	20004900 	.word	0x20004900

08006520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d04c      	beq.n	80065cc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006532:	2308      	movs	r3, #8
 8006534:	425b      	negs	r3, r3
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4413      	add	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	4b23      	ldr	r3, [pc, #140]	; (80065d4 <vPortFree+0xb4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10c      	bne.n	8006568 <vPortFree+0x48>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	b672      	cpsid	i
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	b662      	cpsie	i
 8006562:	60fb      	str	r3, [r7, #12]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00c      	beq.n	800658a <vPortFree+0x6a>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	b672      	cpsid	i
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	b662      	cpsie	i
 8006584:	60bb      	str	r3, [r7, #8]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <vPortFree+0xb4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d019      	beq.n	80065cc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d115      	bne.n	80065cc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <vPortFree+0xb4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	401a      	ands	r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065b0:	f7ff f9ea 	bl	8005988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	4b07      	ldr	r3, [pc, #28]	; (80065d8 <vPortFree+0xb8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4413      	add	r3, r2
 80065be:	4a06      	ldr	r2, [pc, #24]	; (80065d8 <vPortFree+0xb8>)
 80065c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065c2:	6938      	ldr	r0, [r7, #16]
 80065c4:	f000 f86c 	bl	80066a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80065c8:	f7ff f9ec 	bl	80059a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065cc:	bf00      	nop
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20004904 	.word	0x20004904
 80065d8:	200048fc 	.word	0x200048fc

080065dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065e8:	4b27      	ldr	r3, [pc, #156]	; (8006688 <prvHeapInit+0xac>)
 80065ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3307      	adds	r3, #7
 80065fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0307 	bic.w	r3, r3, #7
 8006602:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <prvHeapInit+0xac>)
 800660c:	4413      	add	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <prvHeapInit+0xb0>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800661a:	4b1c      	ldr	r3, [pc, #112]	; (800668c <prvHeapInit+0xb0>)
 800661c:	2200      	movs	r2, #0
 800661e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	4413      	add	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006628:	2208      	movs	r2, #8
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1a9b      	subs	r3, r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0307 	bic.w	r3, r3, #7
 8006636:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a15      	ldr	r2, [pc, #84]	; (8006690 <prvHeapInit+0xb4>)
 800663c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800663e:	4b14      	ldr	r3, [pc, #80]	; (8006690 <prvHeapInit+0xb4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2200      	movs	r2, #0
 8006644:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006646:	4b12      	ldr	r3, [pc, #72]	; (8006690 <prvHeapInit+0xb4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800665c:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <prvHeapInit+0xb4>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4a0a      	ldr	r2, [pc, #40]	; (8006694 <prvHeapInit+0xb8>)
 800666a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4a09      	ldr	r2, [pc, #36]	; (8006698 <prvHeapInit+0xbc>)
 8006672:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006674:	4b09      	ldr	r3, [pc, #36]	; (800669c <prvHeapInit+0xc0>)
 8006676:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800667a:	601a      	str	r2, [r3, #0]
}
 800667c:	bf00      	nop
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000cf0 	.word	0x20000cf0
 800668c:	200048f0 	.word	0x200048f0
 8006690:	200048f8 	.word	0x200048f8
 8006694:	20004900 	.word	0x20004900
 8006698:	200048fc 	.word	0x200048fc
 800669c:	20004904 	.word	0x20004904

080066a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066a8:	4b28      	ldr	r3, [pc, #160]	; (800674c <prvInsertBlockIntoFreeList+0xac>)
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e002      	b.n	80066b4 <prvInsertBlockIntoFreeList+0x14>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d8f7      	bhi.n	80066ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	4413      	add	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d108      	bne.n	80066e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	441a      	add	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d118      	bne.n	8006728 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b15      	ldr	r3, [pc, #84]	; (8006750 <prvInsertBlockIntoFreeList+0xb0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d00d      	beq.n	800671e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	441a      	add	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e008      	b.n	8006730 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <prvInsertBlockIntoFreeList+0xb0>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e003      	b.n	8006730 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d002      	beq.n	800673e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	200048f0 	.word	0x200048f0
 8006750:	200048f8 	.word	0x200048f8

08006754 <__errno>:
 8006754:	4b01      	ldr	r3, [pc, #4]	; (800675c <__errno+0x8>)
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000010 	.word	0x20000010

08006760 <__libc_init_array>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	4d0d      	ldr	r5, [pc, #52]	; (8006798 <__libc_init_array+0x38>)
 8006764:	4c0d      	ldr	r4, [pc, #52]	; (800679c <__libc_init_array+0x3c>)
 8006766:	1b64      	subs	r4, r4, r5
 8006768:	10a4      	asrs	r4, r4, #2
 800676a:	2600      	movs	r6, #0
 800676c:	42a6      	cmp	r6, r4
 800676e:	d109      	bne.n	8006784 <__libc_init_array+0x24>
 8006770:	4d0b      	ldr	r5, [pc, #44]	; (80067a0 <__libc_init_array+0x40>)
 8006772:	4c0c      	ldr	r4, [pc, #48]	; (80067a4 <__libc_init_array+0x44>)
 8006774:	f000 fcf8 	bl	8007168 <_init>
 8006778:	1b64      	subs	r4, r4, r5
 800677a:	10a4      	asrs	r4, r4, #2
 800677c:	2600      	movs	r6, #0
 800677e:	42a6      	cmp	r6, r4
 8006780:	d105      	bne.n	800678e <__libc_init_array+0x2e>
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	f855 3b04 	ldr.w	r3, [r5], #4
 8006788:	4798      	blx	r3
 800678a:	3601      	adds	r6, #1
 800678c:	e7ee      	b.n	800676c <__libc_init_array+0xc>
 800678e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006792:	4798      	blx	r3
 8006794:	3601      	adds	r6, #1
 8006796:	e7f2      	b.n	800677e <__libc_init_array+0x1e>
 8006798:	0800729c 	.word	0x0800729c
 800679c:	0800729c 	.word	0x0800729c
 80067a0:	0800729c 	.word	0x0800729c
 80067a4:	080072a0 	.word	0x080072a0

080067a8 <__retarget_lock_acquire_recursive>:
 80067a8:	4770      	bx	lr

080067aa <__retarget_lock_release_recursive>:
 80067aa:	4770      	bx	lr

080067ac <memcpy>:
 80067ac:	440a      	add	r2, r1
 80067ae:	4291      	cmp	r1, r2
 80067b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067b4:	d100      	bne.n	80067b8 <memcpy+0xc>
 80067b6:	4770      	bx	lr
 80067b8:	b510      	push	{r4, lr}
 80067ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c2:	4291      	cmp	r1, r2
 80067c4:	d1f9      	bne.n	80067ba <memcpy+0xe>
 80067c6:	bd10      	pop	{r4, pc}

080067c8 <memset>:
 80067c8:	4402      	add	r2, r0
 80067ca:	4603      	mov	r3, r0
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d100      	bne.n	80067d2 <memset+0xa>
 80067d0:	4770      	bx	lr
 80067d2:	f803 1b01 	strb.w	r1, [r3], #1
 80067d6:	e7f9      	b.n	80067cc <memset+0x4>

080067d8 <sbrk_aligned>:
 80067d8:	b570      	push	{r4, r5, r6, lr}
 80067da:	4e0e      	ldr	r6, [pc, #56]	; (8006814 <sbrk_aligned+0x3c>)
 80067dc:	460c      	mov	r4, r1
 80067de:	6831      	ldr	r1, [r6, #0]
 80067e0:	4605      	mov	r5, r0
 80067e2:	b911      	cbnz	r1, 80067ea <sbrk_aligned+0x12>
 80067e4:	f000 f8f6 	bl	80069d4 <_sbrk_r>
 80067e8:	6030      	str	r0, [r6, #0]
 80067ea:	4621      	mov	r1, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 f8f1 	bl	80069d4 <_sbrk_r>
 80067f2:	1c43      	adds	r3, r0, #1
 80067f4:	d00a      	beq.n	800680c <sbrk_aligned+0x34>
 80067f6:	1cc4      	adds	r4, r0, #3
 80067f8:	f024 0403 	bic.w	r4, r4, #3
 80067fc:	42a0      	cmp	r0, r4
 80067fe:	d007      	beq.n	8006810 <sbrk_aligned+0x38>
 8006800:	1a21      	subs	r1, r4, r0
 8006802:	4628      	mov	r0, r5
 8006804:	f000 f8e6 	bl	80069d4 <_sbrk_r>
 8006808:	3001      	adds	r0, #1
 800680a:	d101      	bne.n	8006810 <sbrk_aligned+0x38>
 800680c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006810:	4620      	mov	r0, r4
 8006812:	bd70      	pop	{r4, r5, r6, pc}
 8006814:	20004910 	.word	0x20004910

08006818 <_malloc_r>:
 8006818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681c:	1ccd      	adds	r5, r1, #3
 800681e:	f025 0503 	bic.w	r5, r5, #3
 8006822:	3508      	adds	r5, #8
 8006824:	2d0c      	cmp	r5, #12
 8006826:	bf38      	it	cc
 8006828:	250c      	movcc	r5, #12
 800682a:	2d00      	cmp	r5, #0
 800682c:	4607      	mov	r7, r0
 800682e:	db01      	blt.n	8006834 <_malloc_r+0x1c>
 8006830:	42a9      	cmp	r1, r5
 8006832:	d905      	bls.n	8006840 <_malloc_r+0x28>
 8006834:	230c      	movs	r3, #12
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	2600      	movs	r6, #0
 800683a:	4630      	mov	r0, r6
 800683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006840:	4e2e      	ldr	r6, [pc, #184]	; (80068fc <_malloc_r+0xe4>)
 8006842:	f000 f8f7 	bl	8006a34 <__malloc_lock>
 8006846:	6833      	ldr	r3, [r6, #0]
 8006848:	461c      	mov	r4, r3
 800684a:	bb34      	cbnz	r4, 800689a <_malloc_r+0x82>
 800684c:	4629      	mov	r1, r5
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff ffc2 	bl	80067d8 <sbrk_aligned>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	4604      	mov	r4, r0
 8006858:	d14d      	bne.n	80068f6 <_malloc_r+0xde>
 800685a:	6834      	ldr	r4, [r6, #0]
 800685c:	4626      	mov	r6, r4
 800685e:	2e00      	cmp	r6, #0
 8006860:	d140      	bne.n	80068e4 <_malloc_r+0xcc>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	4631      	mov	r1, r6
 8006866:	4638      	mov	r0, r7
 8006868:	eb04 0803 	add.w	r8, r4, r3
 800686c:	f000 f8b2 	bl	80069d4 <_sbrk_r>
 8006870:	4580      	cmp	r8, r0
 8006872:	d13a      	bne.n	80068ea <_malloc_r+0xd2>
 8006874:	6821      	ldr	r1, [r4, #0]
 8006876:	3503      	adds	r5, #3
 8006878:	1a6d      	subs	r5, r5, r1
 800687a:	f025 0503 	bic.w	r5, r5, #3
 800687e:	3508      	adds	r5, #8
 8006880:	2d0c      	cmp	r5, #12
 8006882:	bf38      	it	cc
 8006884:	250c      	movcc	r5, #12
 8006886:	4629      	mov	r1, r5
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff ffa5 	bl	80067d8 <sbrk_aligned>
 800688e:	3001      	adds	r0, #1
 8006890:	d02b      	beq.n	80068ea <_malloc_r+0xd2>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	442b      	add	r3, r5
 8006896:	6023      	str	r3, [r4, #0]
 8006898:	e00e      	b.n	80068b8 <_malloc_r+0xa0>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	1b52      	subs	r2, r2, r5
 800689e:	d41e      	bmi.n	80068de <_malloc_r+0xc6>
 80068a0:	2a0b      	cmp	r2, #11
 80068a2:	d916      	bls.n	80068d2 <_malloc_r+0xba>
 80068a4:	1961      	adds	r1, r4, r5
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	6025      	str	r5, [r4, #0]
 80068aa:	bf18      	it	ne
 80068ac:	6059      	strne	r1, [r3, #4]
 80068ae:	6863      	ldr	r3, [r4, #4]
 80068b0:	bf08      	it	eq
 80068b2:	6031      	streq	r1, [r6, #0]
 80068b4:	5162      	str	r2, [r4, r5]
 80068b6:	604b      	str	r3, [r1, #4]
 80068b8:	4638      	mov	r0, r7
 80068ba:	f104 060b 	add.w	r6, r4, #11
 80068be:	f000 f8bf 	bl	8006a40 <__malloc_unlock>
 80068c2:	f026 0607 	bic.w	r6, r6, #7
 80068c6:	1d23      	adds	r3, r4, #4
 80068c8:	1af2      	subs	r2, r6, r3
 80068ca:	d0b6      	beq.n	800683a <_malloc_r+0x22>
 80068cc:	1b9b      	subs	r3, r3, r6
 80068ce:	50a3      	str	r3, [r4, r2]
 80068d0:	e7b3      	b.n	800683a <_malloc_r+0x22>
 80068d2:	6862      	ldr	r2, [r4, #4]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	bf0c      	ite	eq
 80068d8:	6032      	streq	r2, [r6, #0]
 80068da:	605a      	strne	r2, [r3, #4]
 80068dc:	e7ec      	b.n	80068b8 <_malloc_r+0xa0>
 80068de:	4623      	mov	r3, r4
 80068e0:	6864      	ldr	r4, [r4, #4]
 80068e2:	e7b2      	b.n	800684a <_malloc_r+0x32>
 80068e4:	4634      	mov	r4, r6
 80068e6:	6876      	ldr	r6, [r6, #4]
 80068e8:	e7b9      	b.n	800685e <_malloc_r+0x46>
 80068ea:	230c      	movs	r3, #12
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	4638      	mov	r0, r7
 80068f0:	f000 f8a6 	bl	8006a40 <__malloc_unlock>
 80068f4:	e7a1      	b.n	800683a <_malloc_r+0x22>
 80068f6:	6025      	str	r5, [r4, #0]
 80068f8:	e7de      	b.n	80068b8 <_malloc_r+0xa0>
 80068fa:	bf00      	nop
 80068fc:	2000490c 	.word	0x2000490c

08006900 <cleanup_glue>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	460c      	mov	r4, r1
 8006904:	6809      	ldr	r1, [r1, #0]
 8006906:	4605      	mov	r5, r0
 8006908:	b109      	cbz	r1, 800690e <cleanup_glue+0xe>
 800690a:	f7ff fff9 	bl	8006900 <cleanup_glue>
 800690e:	4621      	mov	r1, r4
 8006910:	4628      	mov	r0, r5
 8006912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006916:	f000 b899 	b.w	8006a4c <_free_r>
	...

0800691c <_reclaim_reent>:
 800691c:	4b2c      	ldr	r3, [pc, #176]	; (80069d0 <_reclaim_reent+0xb4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4283      	cmp	r3, r0
 8006922:	b570      	push	{r4, r5, r6, lr}
 8006924:	4604      	mov	r4, r0
 8006926:	d051      	beq.n	80069cc <_reclaim_reent+0xb0>
 8006928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800692a:	b143      	cbz	r3, 800693e <_reclaim_reent+0x22>
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d14a      	bne.n	80069c8 <_reclaim_reent+0xac>
 8006932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006934:	6819      	ldr	r1, [r3, #0]
 8006936:	b111      	cbz	r1, 800693e <_reclaim_reent+0x22>
 8006938:	4620      	mov	r0, r4
 800693a:	f000 f887 	bl	8006a4c <_free_r>
 800693e:	6961      	ldr	r1, [r4, #20]
 8006940:	b111      	cbz	r1, 8006948 <_reclaim_reent+0x2c>
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f882 	bl	8006a4c <_free_r>
 8006948:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800694a:	b111      	cbz	r1, 8006952 <_reclaim_reent+0x36>
 800694c:	4620      	mov	r0, r4
 800694e:	f000 f87d 	bl	8006a4c <_free_r>
 8006952:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006954:	b111      	cbz	r1, 800695c <_reclaim_reent+0x40>
 8006956:	4620      	mov	r0, r4
 8006958:	f000 f878 	bl	8006a4c <_free_r>
 800695c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800695e:	b111      	cbz	r1, 8006966 <_reclaim_reent+0x4a>
 8006960:	4620      	mov	r0, r4
 8006962:	f000 f873 	bl	8006a4c <_free_r>
 8006966:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006968:	b111      	cbz	r1, 8006970 <_reclaim_reent+0x54>
 800696a:	4620      	mov	r0, r4
 800696c:	f000 f86e 	bl	8006a4c <_free_r>
 8006970:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006972:	b111      	cbz	r1, 800697a <_reclaim_reent+0x5e>
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f869 	bl	8006a4c <_free_r>
 800697a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800697c:	b111      	cbz	r1, 8006984 <_reclaim_reent+0x68>
 800697e:	4620      	mov	r0, r4
 8006980:	f000 f864 	bl	8006a4c <_free_r>
 8006984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006986:	b111      	cbz	r1, 800698e <_reclaim_reent+0x72>
 8006988:	4620      	mov	r0, r4
 800698a:	f000 f85f 	bl	8006a4c <_free_r>
 800698e:	69a3      	ldr	r3, [r4, #24]
 8006990:	b1e3      	cbz	r3, 80069cc <_reclaim_reent+0xb0>
 8006992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006994:	4620      	mov	r0, r4
 8006996:	4798      	blx	r3
 8006998:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800699a:	b1b9      	cbz	r1, 80069cc <_reclaim_reent+0xb0>
 800699c:	4620      	mov	r0, r4
 800699e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069a2:	f7ff bfad 	b.w	8006900 <cleanup_glue>
 80069a6:	5949      	ldr	r1, [r1, r5]
 80069a8:	b941      	cbnz	r1, 80069bc <_reclaim_reent+0xa0>
 80069aa:	3504      	adds	r5, #4
 80069ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ae:	2d80      	cmp	r5, #128	; 0x80
 80069b0:	68d9      	ldr	r1, [r3, #12]
 80069b2:	d1f8      	bne.n	80069a6 <_reclaim_reent+0x8a>
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 f849 	bl	8006a4c <_free_r>
 80069ba:	e7ba      	b.n	8006932 <_reclaim_reent+0x16>
 80069bc:	680e      	ldr	r6, [r1, #0]
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 f844 	bl	8006a4c <_free_r>
 80069c4:	4631      	mov	r1, r6
 80069c6:	e7ef      	b.n	80069a8 <_reclaim_reent+0x8c>
 80069c8:	2500      	movs	r5, #0
 80069ca:	e7ef      	b.n	80069ac <_reclaim_reent+0x90>
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
 80069ce:	bf00      	nop
 80069d0:	20000010 	.word	0x20000010

080069d4 <_sbrk_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d06      	ldr	r5, [pc, #24]	; (80069f0 <_sbrk_r+0x1c>)
 80069d8:	2300      	movs	r3, #0
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fa fbda 	bl	8001198 <_sbrk>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_sbrk_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_sbrk_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20004914 	.word	0x20004914

080069f4 <siprintf>:
 80069f4:	b40e      	push	{r1, r2, r3}
 80069f6:	b500      	push	{lr}
 80069f8:	b09c      	sub	sp, #112	; 0x70
 80069fa:	ab1d      	add	r3, sp, #116	; 0x74
 80069fc:	9002      	str	r0, [sp, #8]
 80069fe:	9006      	str	r0, [sp, #24]
 8006a00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a04:	4809      	ldr	r0, [pc, #36]	; (8006a2c <siprintf+0x38>)
 8006a06:	9107      	str	r1, [sp, #28]
 8006a08:	9104      	str	r1, [sp, #16]
 8006a0a:	4909      	ldr	r1, [pc, #36]	; (8006a30 <siprintf+0x3c>)
 8006a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a10:	9105      	str	r1, [sp, #20]
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	a902      	add	r1, sp, #8
 8006a18:	f000 f8c0 	bl	8006b9c <_svfiprintf_r>
 8006a1c:	9b02      	ldr	r3, [sp, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	b01c      	add	sp, #112	; 0x70
 8006a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a28:	b003      	add	sp, #12
 8006a2a:	4770      	bx	lr
 8006a2c:	20000010 	.word	0x20000010
 8006a30:	ffff0208 	.word	0xffff0208

08006a34 <__malloc_lock>:
 8006a34:	4801      	ldr	r0, [pc, #4]	; (8006a3c <__malloc_lock+0x8>)
 8006a36:	f7ff beb7 	b.w	80067a8 <__retarget_lock_acquire_recursive>
 8006a3a:	bf00      	nop
 8006a3c:	20004908 	.word	0x20004908

08006a40 <__malloc_unlock>:
 8006a40:	4801      	ldr	r0, [pc, #4]	; (8006a48 <__malloc_unlock+0x8>)
 8006a42:	f7ff beb2 	b.w	80067aa <__retarget_lock_release_recursive>
 8006a46:	bf00      	nop
 8006a48:	20004908 	.word	0x20004908

08006a4c <_free_r>:
 8006a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a4e:	2900      	cmp	r1, #0
 8006a50:	d044      	beq.n	8006adc <_free_r+0x90>
 8006a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a56:	9001      	str	r0, [sp, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a5e:	bfb8      	it	lt
 8006a60:	18e4      	addlt	r4, r4, r3
 8006a62:	f7ff ffe7 	bl	8006a34 <__malloc_lock>
 8006a66:	4a1e      	ldr	r2, [pc, #120]	; (8006ae0 <_free_r+0x94>)
 8006a68:	9801      	ldr	r0, [sp, #4]
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	b933      	cbnz	r3, 8006a7c <_free_r+0x30>
 8006a6e:	6063      	str	r3, [r4, #4]
 8006a70:	6014      	str	r4, [r2, #0]
 8006a72:	b003      	add	sp, #12
 8006a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a78:	f7ff bfe2 	b.w	8006a40 <__malloc_unlock>
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d908      	bls.n	8006a92 <_free_r+0x46>
 8006a80:	6825      	ldr	r5, [r4, #0]
 8006a82:	1961      	adds	r1, r4, r5
 8006a84:	428b      	cmp	r3, r1
 8006a86:	bf01      	itttt	eq
 8006a88:	6819      	ldreq	r1, [r3, #0]
 8006a8a:	685b      	ldreq	r3, [r3, #4]
 8006a8c:	1949      	addeq	r1, r1, r5
 8006a8e:	6021      	streq	r1, [r4, #0]
 8006a90:	e7ed      	b.n	8006a6e <_free_r+0x22>
 8006a92:	461a      	mov	r2, r3
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	b10b      	cbz	r3, 8006a9c <_free_r+0x50>
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d9fa      	bls.n	8006a92 <_free_r+0x46>
 8006a9c:	6811      	ldr	r1, [r2, #0]
 8006a9e:	1855      	adds	r5, r2, r1
 8006aa0:	42a5      	cmp	r5, r4
 8006aa2:	d10b      	bne.n	8006abc <_free_r+0x70>
 8006aa4:	6824      	ldr	r4, [r4, #0]
 8006aa6:	4421      	add	r1, r4
 8006aa8:	1854      	adds	r4, r2, r1
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	6011      	str	r1, [r2, #0]
 8006aae:	d1e0      	bne.n	8006a72 <_free_r+0x26>
 8006ab0:	681c      	ldr	r4, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	6053      	str	r3, [r2, #4]
 8006ab6:	4421      	add	r1, r4
 8006ab8:	6011      	str	r1, [r2, #0]
 8006aba:	e7da      	b.n	8006a72 <_free_r+0x26>
 8006abc:	d902      	bls.n	8006ac4 <_free_r+0x78>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	6003      	str	r3, [r0, #0]
 8006ac2:	e7d6      	b.n	8006a72 <_free_r+0x26>
 8006ac4:	6825      	ldr	r5, [r4, #0]
 8006ac6:	1961      	adds	r1, r4, r5
 8006ac8:	428b      	cmp	r3, r1
 8006aca:	bf04      	itt	eq
 8006acc:	6819      	ldreq	r1, [r3, #0]
 8006ace:	685b      	ldreq	r3, [r3, #4]
 8006ad0:	6063      	str	r3, [r4, #4]
 8006ad2:	bf04      	itt	eq
 8006ad4:	1949      	addeq	r1, r1, r5
 8006ad6:	6021      	streq	r1, [r4, #0]
 8006ad8:	6054      	str	r4, [r2, #4]
 8006ada:	e7ca      	b.n	8006a72 <_free_r+0x26>
 8006adc:	b003      	add	sp, #12
 8006ade:	bd30      	pop	{r4, r5, pc}
 8006ae0:	2000490c 	.word	0x2000490c

08006ae4 <__ssputs_r>:
 8006ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	688e      	ldr	r6, [r1, #8]
 8006aea:	429e      	cmp	r6, r3
 8006aec:	4682      	mov	sl, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	4690      	mov	r8, r2
 8006af2:	461f      	mov	r7, r3
 8006af4:	d838      	bhi.n	8006b68 <__ssputs_r+0x84>
 8006af6:	898a      	ldrh	r2, [r1, #12]
 8006af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006afc:	d032      	beq.n	8006b64 <__ssputs_r+0x80>
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	6909      	ldr	r1, [r1, #16]
 8006b02:	eba5 0901 	sub.w	r9, r5, r1
 8006b06:	6965      	ldr	r5, [r4, #20]
 8006b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b10:	3301      	adds	r3, #1
 8006b12:	444b      	add	r3, r9
 8006b14:	106d      	asrs	r5, r5, #1
 8006b16:	429d      	cmp	r5, r3
 8006b18:	bf38      	it	cc
 8006b1a:	461d      	movcc	r5, r3
 8006b1c:	0553      	lsls	r3, r2, #21
 8006b1e:	d531      	bpl.n	8006b84 <__ssputs_r+0xa0>
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7ff fe79 	bl	8006818 <_malloc_r>
 8006b26:	4606      	mov	r6, r0
 8006b28:	b950      	cbnz	r0, 8006b40 <__ssputs_r+0x5c>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	f8ca 3000 	str.w	r3, [sl]
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	6921      	ldr	r1, [r4, #16]
 8006b42:	464a      	mov	r2, r9
 8006b44:	f7ff fe32 	bl	80067ac <memcpy>
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	6126      	str	r6, [r4, #16]
 8006b56:	6165      	str	r5, [r4, #20]
 8006b58:	444e      	add	r6, r9
 8006b5a:	eba5 0509 	sub.w	r5, r5, r9
 8006b5e:	6026      	str	r6, [r4, #0]
 8006b60:	60a5      	str	r5, [r4, #8]
 8006b62:	463e      	mov	r6, r7
 8006b64:	42be      	cmp	r6, r7
 8006b66:	d900      	bls.n	8006b6a <__ssputs_r+0x86>
 8006b68:	463e      	mov	r6, r7
 8006b6a:	6820      	ldr	r0, [r4, #0]
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	4641      	mov	r1, r8
 8006b70:	f000 faa8 	bl	80070c4 <memmove>
 8006b74:	68a3      	ldr	r3, [r4, #8]
 8006b76:	1b9b      	subs	r3, r3, r6
 8006b78:	60a3      	str	r3, [r4, #8]
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	4433      	add	r3, r6
 8006b7e:	6023      	str	r3, [r4, #0]
 8006b80:	2000      	movs	r0, #0
 8006b82:	e7db      	b.n	8006b3c <__ssputs_r+0x58>
 8006b84:	462a      	mov	r2, r5
 8006b86:	f000 fab7 	bl	80070f8 <_realloc_r>
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d1e1      	bne.n	8006b54 <__ssputs_r+0x70>
 8006b90:	6921      	ldr	r1, [r4, #16]
 8006b92:	4650      	mov	r0, sl
 8006b94:	f7ff ff5a 	bl	8006a4c <_free_r>
 8006b98:	e7c7      	b.n	8006b2a <__ssputs_r+0x46>
	...

08006b9c <_svfiprintf_r>:
 8006b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	4698      	mov	r8, r3
 8006ba2:	898b      	ldrh	r3, [r1, #12]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	b09d      	sub	sp, #116	; 0x74
 8006ba8:	4607      	mov	r7, r0
 8006baa:	460d      	mov	r5, r1
 8006bac:	4614      	mov	r4, r2
 8006bae:	d50e      	bpl.n	8006bce <_svfiprintf_r+0x32>
 8006bb0:	690b      	ldr	r3, [r1, #16]
 8006bb2:	b963      	cbnz	r3, 8006bce <_svfiprintf_r+0x32>
 8006bb4:	2140      	movs	r1, #64	; 0x40
 8006bb6:	f7ff fe2f 	bl	8006818 <_malloc_r>
 8006bba:	6028      	str	r0, [r5, #0]
 8006bbc:	6128      	str	r0, [r5, #16]
 8006bbe:	b920      	cbnz	r0, 8006bca <_svfiprintf_r+0x2e>
 8006bc0:	230c      	movs	r3, #12
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc8:	e0d1      	b.n	8006d6e <_svfiprintf_r+0x1d2>
 8006bca:	2340      	movs	r3, #64	; 0x40
 8006bcc:	616b      	str	r3, [r5, #20]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd2:	2320      	movs	r3, #32
 8006bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bdc:	2330      	movs	r3, #48	; 0x30
 8006bde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d88 <_svfiprintf_r+0x1ec>
 8006be2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006be6:	f04f 0901 	mov.w	r9, #1
 8006bea:	4623      	mov	r3, r4
 8006bec:	469a      	mov	sl, r3
 8006bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf2:	b10a      	cbz	r2, 8006bf8 <_svfiprintf_r+0x5c>
 8006bf4:	2a25      	cmp	r2, #37	; 0x25
 8006bf6:	d1f9      	bne.n	8006bec <_svfiprintf_r+0x50>
 8006bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8006bfc:	d00b      	beq.n	8006c16 <_svfiprintf_r+0x7a>
 8006bfe:	465b      	mov	r3, fp
 8006c00:	4622      	mov	r2, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	4638      	mov	r0, r7
 8006c06:	f7ff ff6d 	bl	8006ae4 <__ssputs_r>
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	f000 80aa 	beq.w	8006d64 <_svfiprintf_r+0x1c8>
 8006c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c12:	445a      	add	r2, fp
 8006c14:	9209      	str	r2, [sp, #36]	; 0x24
 8006c16:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 80a2 	beq.w	8006d64 <_svfiprintf_r+0x1c8>
 8006c20:	2300      	movs	r3, #0
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c2a:	f10a 0a01 	add.w	sl, sl, #1
 8006c2e:	9304      	str	r3, [sp, #16]
 8006c30:	9307      	str	r3, [sp, #28]
 8006c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c36:	931a      	str	r3, [sp, #104]	; 0x68
 8006c38:	4654      	mov	r4, sl
 8006c3a:	2205      	movs	r2, #5
 8006c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c40:	4851      	ldr	r0, [pc, #324]	; (8006d88 <_svfiprintf_r+0x1ec>)
 8006c42:	f7f9 fafd 	bl	8000240 <memchr>
 8006c46:	9a04      	ldr	r2, [sp, #16]
 8006c48:	b9d8      	cbnz	r0, 8006c82 <_svfiprintf_r+0xe6>
 8006c4a:	06d0      	lsls	r0, r2, #27
 8006c4c:	bf44      	itt	mi
 8006c4e:	2320      	movmi	r3, #32
 8006c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c54:	0711      	lsls	r1, r2, #28
 8006c56:	bf44      	itt	mi
 8006c58:	232b      	movmi	r3, #43	; 0x2b
 8006c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c62:	2b2a      	cmp	r3, #42	; 0x2a
 8006c64:	d015      	beq.n	8006c92 <_svfiprintf_r+0xf6>
 8006c66:	9a07      	ldr	r2, [sp, #28]
 8006c68:	4654      	mov	r4, sl
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f04f 0c0a 	mov.w	ip, #10
 8006c70:	4621      	mov	r1, r4
 8006c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c76:	3b30      	subs	r3, #48	; 0x30
 8006c78:	2b09      	cmp	r3, #9
 8006c7a:	d94e      	bls.n	8006d1a <_svfiprintf_r+0x17e>
 8006c7c:	b1b0      	cbz	r0, 8006cac <_svfiprintf_r+0x110>
 8006c7e:	9207      	str	r2, [sp, #28]
 8006c80:	e014      	b.n	8006cac <_svfiprintf_r+0x110>
 8006c82:	eba0 0308 	sub.w	r3, r0, r8
 8006c86:	fa09 f303 	lsl.w	r3, r9, r3
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	9304      	str	r3, [sp, #16]
 8006c8e:	46a2      	mov	sl, r4
 8006c90:	e7d2      	b.n	8006c38 <_svfiprintf_r+0x9c>
 8006c92:	9b03      	ldr	r3, [sp, #12]
 8006c94:	1d19      	adds	r1, r3, #4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	9103      	str	r1, [sp, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bfbb      	ittet	lt
 8006c9e:	425b      	neglt	r3, r3
 8006ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ca4:	9307      	strge	r3, [sp, #28]
 8006ca6:	9307      	strlt	r3, [sp, #28]
 8006ca8:	bfb8      	it	lt
 8006caa:	9204      	strlt	r2, [sp, #16]
 8006cac:	7823      	ldrb	r3, [r4, #0]
 8006cae:	2b2e      	cmp	r3, #46	; 0x2e
 8006cb0:	d10c      	bne.n	8006ccc <_svfiprintf_r+0x130>
 8006cb2:	7863      	ldrb	r3, [r4, #1]
 8006cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb6:	d135      	bne.n	8006d24 <_svfiprintf_r+0x188>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	1d1a      	adds	r2, r3, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	9203      	str	r2, [sp, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bfb8      	it	lt
 8006cc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006cc8:	3402      	adds	r4, #2
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d98 <_svfiprintf_r+0x1fc>
 8006cd0:	7821      	ldrb	r1, [r4, #0]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	f7f9 fab3 	bl	8000240 <memchr>
 8006cda:	b140      	cbz	r0, 8006cee <_svfiprintf_r+0x152>
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	eba0 000a 	sub.w	r0, r0, sl
 8006ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	4303      	orrs	r3, r0
 8006cea:	3401      	adds	r4, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf2:	4826      	ldr	r0, [pc, #152]	; (8006d8c <_svfiprintf_r+0x1f0>)
 8006cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cf8:	2206      	movs	r2, #6
 8006cfa:	f7f9 faa1 	bl	8000240 <memchr>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d038      	beq.n	8006d74 <_svfiprintf_r+0x1d8>
 8006d02:	4b23      	ldr	r3, [pc, #140]	; (8006d90 <_svfiprintf_r+0x1f4>)
 8006d04:	bb1b      	cbnz	r3, 8006d4e <_svfiprintf_r+0x1b2>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	3307      	adds	r3, #7
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	3308      	adds	r3, #8
 8006d10:	9303      	str	r3, [sp, #12]
 8006d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d14:	4433      	add	r3, r6
 8006d16:	9309      	str	r3, [sp, #36]	; 0x24
 8006d18:	e767      	b.n	8006bea <_svfiprintf_r+0x4e>
 8006d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d1e:	460c      	mov	r4, r1
 8006d20:	2001      	movs	r0, #1
 8006d22:	e7a5      	b.n	8006c70 <_svfiprintf_r+0xd4>
 8006d24:	2300      	movs	r3, #0
 8006d26:	3401      	adds	r4, #1
 8006d28:	9305      	str	r3, [sp, #20]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f04f 0c0a 	mov.w	ip, #10
 8006d30:	4620      	mov	r0, r4
 8006d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d36:	3a30      	subs	r2, #48	; 0x30
 8006d38:	2a09      	cmp	r2, #9
 8006d3a:	d903      	bls.n	8006d44 <_svfiprintf_r+0x1a8>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0c5      	beq.n	8006ccc <_svfiprintf_r+0x130>
 8006d40:	9105      	str	r1, [sp, #20]
 8006d42:	e7c3      	b.n	8006ccc <_svfiprintf_r+0x130>
 8006d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d48:	4604      	mov	r4, r0
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e7f0      	b.n	8006d30 <_svfiprintf_r+0x194>
 8006d4e:	ab03      	add	r3, sp, #12
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	462a      	mov	r2, r5
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <_svfiprintf_r+0x1f8>)
 8006d56:	a904      	add	r1, sp, #16
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f3af 8000 	nop.w
 8006d5e:	1c42      	adds	r2, r0, #1
 8006d60:	4606      	mov	r6, r0
 8006d62:	d1d6      	bne.n	8006d12 <_svfiprintf_r+0x176>
 8006d64:	89ab      	ldrh	r3, [r5, #12]
 8006d66:	065b      	lsls	r3, r3, #25
 8006d68:	f53f af2c 	bmi.w	8006bc4 <_svfiprintf_r+0x28>
 8006d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d6e:	b01d      	add	sp, #116	; 0x74
 8006d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d74:	ab03      	add	r3, sp, #12
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	462a      	mov	r2, r5
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <_svfiprintf_r+0x1f8>)
 8006d7c:	a904      	add	r1, sp, #16
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f000 f87a 	bl	8006e78 <_printf_i>
 8006d84:	e7eb      	b.n	8006d5e <_svfiprintf_r+0x1c2>
 8006d86:	bf00      	nop
 8006d88:	08007260 	.word	0x08007260
 8006d8c:	0800726a 	.word	0x0800726a
 8006d90:	00000000 	.word	0x00000000
 8006d94:	08006ae5 	.word	0x08006ae5
 8006d98:	08007266 	.word	0x08007266

08006d9c <_printf_common>:
 8006d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	4616      	mov	r6, r2
 8006da2:	4699      	mov	r9, r3
 8006da4:	688a      	ldr	r2, [r1, #8]
 8006da6:	690b      	ldr	r3, [r1, #16]
 8006da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	bfb8      	it	lt
 8006db0:	4613      	movlt	r3, r2
 8006db2:	6033      	str	r3, [r6, #0]
 8006db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006db8:	4607      	mov	r7, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	b10a      	cbz	r2, 8006dc2 <_printf_common+0x26>
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	6033      	str	r3, [r6, #0]
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	0699      	lsls	r1, r3, #26
 8006dc6:	bf42      	ittt	mi
 8006dc8:	6833      	ldrmi	r3, [r6, #0]
 8006dca:	3302      	addmi	r3, #2
 8006dcc:	6033      	strmi	r3, [r6, #0]
 8006dce:	6825      	ldr	r5, [r4, #0]
 8006dd0:	f015 0506 	ands.w	r5, r5, #6
 8006dd4:	d106      	bne.n	8006de4 <_printf_common+0x48>
 8006dd6:	f104 0a19 	add.w	sl, r4, #25
 8006dda:	68e3      	ldr	r3, [r4, #12]
 8006ddc:	6832      	ldr	r2, [r6, #0]
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	42ab      	cmp	r3, r5
 8006de2:	dc26      	bgt.n	8006e32 <_printf_common+0x96>
 8006de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006de8:	1e13      	subs	r3, r2, #0
 8006dea:	6822      	ldr	r2, [r4, #0]
 8006dec:	bf18      	it	ne
 8006dee:	2301      	movne	r3, #1
 8006df0:	0692      	lsls	r2, r2, #26
 8006df2:	d42b      	bmi.n	8006e4c <_printf_common+0xb0>
 8006df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006df8:	4649      	mov	r1, r9
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c0      	blx	r8
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d01e      	beq.n	8006e40 <_printf_common+0xa4>
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	68e5      	ldr	r5, [r4, #12]
 8006e06:	6832      	ldr	r2, [r6, #0]
 8006e08:	f003 0306 	and.w	r3, r3, #6
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	bf08      	it	eq
 8006e10:	1aad      	subeq	r5, r5, r2
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	6922      	ldr	r2, [r4, #16]
 8006e16:	bf0c      	ite	eq
 8006e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e1c:	2500      	movne	r5, #0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bfc4      	itt	gt
 8006e22:	1a9b      	subgt	r3, r3, r2
 8006e24:	18ed      	addgt	r5, r5, r3
 8006e26:	2600      	movs	r6, #0
 8006e28:	341a      	adds	r4, #26
 8006e2a:	42b5      	cmp	r5, r6
 8006e2c:	d11a      	bne.n	8006e64 <_printf_common+0xc8>
 8006e2e:	2000      	movs	r0, #0
 8006e30:	e008      	b.n	8006e44 <_printf_common+0xa8>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4652      	mov	r2, sl
 8006e36:	4649      	mov	r1, r9
 8006e38:	4638      	mov	r0, r7
 8006e3a:	47c0      	blx	r8
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d103      	bne.n	8006e48 <_printf_common+0xac>
 8006e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e48:	3501      	adds	r5, #1
 8006e4a:	e7c6      	b.n	8006dda <_printf_common+0x3e>
 8006e4c:	18e1      	adds	r1, r4, r3
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	2030      	movs	r0, #48	; 0x30
 8006e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e56:	4422      	add	r2, r4
 8006e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e60:	3302      	adds	r3, #2
 8006e62:	e7c7      	b.n	8006df4 <_printf_common+0x58>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4622      	mov	r2, r4
 8006e68:	4649      	mov	r1, r9
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	47c0      	blx	r8
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d0e6      	beq.n	8006e40 <_printf_common+0xa4>
 8006e72:	3601      	adds	r6, #1
 8006e74:	e7d9      	b.n	8006e2a <_printf_common+0x8e>
	...

08006e78 <_printf_i>:
 8006e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7c:	7e0f      	ldrb	r7, [r1, #24]
 8006e7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e80:	2f78      	cmp	r7, #120	; 0x78
 8006e82:	4691      	mov	r9, r2
 8006e84:	4680      	mov	r8, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	469a      	mov	sl, r3
 8006e8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e8e:	d807      	bhi.n	8006ea0 <_printf_i+0x28>
 8006e90:	2f62      	cmp	r7, #98	; 0x62
 8006e92:	d80a      	bhi.n	8006eaa <_printf_i+0x32>
 8006e94:	2f00      	cmp	r7, #0
 8006e96:	f000 80d8 	beq.w	800704a <_printf_i+0x1d2>
 8006e9a:	2f58      	cmp	r7, #88	; 0x58
 8006e9c:	f000 80a3 	beq.w	8006fe6 <_printf_i+0x16e>
 8006ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ea8:	e03a      	b.n	8006f20 <_printf_i+0xa8>
 8006eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eae:	2b15      	cmp	r3, #21
 8006eb0:	d8f6      	bhi.n	8006ea0 <_printf_i+0x28>
 8006eb2:	a101      	add	r1, pc, #4	; (adr r1, 8006eb8 <_printf_i+0x40>)
 8006eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006eb8:	08006f11 	.word	0x08006f11
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006ea1 	.word	0x08006ea1
 8006ec4:	08006ea1 	.word	0x08006ea1
 8006ec8:	08006ea1 	.word	0x08006ea1
 8006ecc:	08006ea1 	.word	0x08006ea1
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	08006ea1 	.word	0x08006ea1
 8006ed8:	08006ea1 	.word	0x08006ea1
 8006edc:	08006ea1 	.word	0x08006ea1
 8006ee0:	08006ea1 	.word	0x08006ea1
 8006ee4:	08007031 	.word	0x08007031
 8006ee8:	08006f55 	.word	0x08006f55
 8006eec:	08007013 	.word	0x08007013
 8006ef0:	08006ea1 	.word	0x08006ea1
 8006ef4:	08006ea1 	.word	0x08006ea1
 8006ef8:	08007053 	.word	0x08007053
 8006efc:	08006ea1 	.word	0x08006ea1
 8006f00:	08006f55 	.word	0x08006f55
 8006f04:	08006ea1 	.word	0x08006ea1
 8006f08:	08006ea1 	.word	0x08006ea1
 8006f0c:	0800701b 	.word	0x0800701b
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	1d1a      	adds	r2, r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	602a      	str	r2, [r5, #0]
 8006f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0a3      	b.n	800706c <_printf_i+0x1f4>
 8006f24:	6820      	ldr	r0, [r4, #0]
 8006f26:	6829      	ldr	r1, [r5, #0]
 8006f28:	0606      	lsls	r6, r0, #24
 8006f2a:	f101 0304 	add.w	r3, r1, #4
 8006f2e:	d50a      	bpl.n	8006f46 <_printf_i+0xce>
 8006f30:	680e      	ldr	r6, [r1, #0]
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	2e00      	cmp	r6, #0
 8006f36:	da03      	bge.n	8006f40 <_printf_i+0xc8>
 8006f38:	232d      	movs	r3, #45	; 0x2d
 8006f3a:	4276      	negs	r6, r6
 8006f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f40:	485e      	ldr	r0, [pc, #376]	; (80070bc <_printf_i+0x244>)
 8006f42:	230a      	movs	r3, #10
 8006f44:	e019      	b.n	8006f7a <_printf_i+0x102>
 8006f46:	680e      	ldr	r6, [r1, #0]
 8006f48:	602b      	str	r3, [r5, #0]
 8006f4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f4e:	bf18      	it	ne
 8006f50:	b236      	sxthne	r6, r6
 8006f52:	e7ef      	b.n	8006f34 <_printf_i+0xbc>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	6820      	ldr	r0, [r4, #0]
 8006f58:	1d19      	adds	r1, r3, #4
 8006f5a:	6029      	str	r1, [r5, #0]
 8006f5c:	0601      	lsls	r1, r0, #24
 8006f5e:	d501      	bpl.n	8006f64 <_printf_i+0xec>
 8006f60:	681e      	ldr	r6, [r3, #0]
 8006f62:	e002      	b.n	8006f6a <_printf_i+0xf2>
 8006f64:	0646      	lsls	r6, r0, #25
 8006f66:	d5fb      	bpl.n	8006f60 <_printf_i+0xe8>
 8006f68:	881e      	ldrh	r6, [r3, #0]
 8006f6a:	4854      	ldr	r0, [pc, #336]	; (80070bc <_printf_i+0x244>)
 8006f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8006f6e:	bf0c      	ite	eq
 8006f70:	2308      	moveq	r3, #8
 8006f72:	230a      	movne	r3, #10
 8006f74:	2100      	movs	r1, #0
 8006f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f7a:	6865      	ldr	r5, [r4, #4]
 8006f7c:	60a5      	str	r5, [r4, #8]
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	bfa2      	ittt	ge
 8006f82:	6821      	ldrge	r1, [r4, #0]
 8006f84:	f021 0104 	bicge.w	r1, r1, #4
 8006f88:	6021      	strge	r1, [r4, #0]
 8006f8a:	b90e      	cbnz	r6, 8006f90 <_printf_i+0x118>
 8006f8c:	2d00      	cmp	r5, #0
 8006f8e:	d04d      	beq.n	800702c <_printf_i+0x1b4>
 8006f90:	4615      	mov	r5, r2
 8006f92:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f96:	fb03 6711 	mls	r7, r3, r1, r6
 8006f9a:	5dc7      	ldrb	r7, [r0, r7]
 8006f9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fa0:	4637      	mov	r7, r6
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	460e      	mov	r6, r1
 8006fa6:	d9f4      	bls.n	8006f92 <_printf_i+0x11a>
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d10b      	bne.n	8006fc4 <_printf_i+0x14c>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07de      	lsls	r6, r3, #31
 8006fb0:	d508      	bpl.n	8006fc4 <_printf_i+0x14c>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	4299      	cmp	r1, r3
 8006fb8:	bfde      	ittt	le
 8006fba:	2330      	movle	r3, #48	; 0x30
 8006fbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006fc4:	1b52      	subs	r2, r2, r5
 8006fc6:	6122      	str	r2, [r4, #16]
 8006fc8:	f8cd a000 	str.w	sl, [sp]
 8006fcc:	464b      	mov	r3, r9
 8006fce:	aa03      	add	r2, sp, #12
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f7ff fee2 	bl	8006d9c <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d14c      	bne.n	8007076 <_printf_i+0x1fe>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe0:	b004      	add	sp, #16
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	4835      	ldr	r0, [pc, #212]	; (80070bc <_printf_i+0x244>)
 8006fe8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006fec:	6829      	ldr	r1, [r5, #0]
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ff4:	6029      	str	r1, [r5, #0]
 8006ff6:	061d      	lsls	r5, r3, #24
 8006ff8:	d514      	bpl.n	8007024 <_printf_i+0x1ac>
 8006ffa:	07df      	lsls	r7, r3, #31
 8006ffc:	bf44      	itt	mi
 8006ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8007002:	6023      	strmi	r3, [r4, #0]
 8007004:	b91e      	cbnz	r6, 800700e <_printf_i+0x196>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f023 0320 	bic.w	r3, r3, #32
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	2310      	movs	r3, #16
 8007010:	e7b0      	b.n	8006f74 <_printf_i+0xfc>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	f043 0320 	orr.w	r3, r3, #32
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	2378      	movs	r3, #120	; 0x78
 800701c:	4828      	ldr	r0, [pc, #160]	; (80070c0 <_printf_i+0x248>)
 800701e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007022:	e7e3      	b.n	8006fec <_printf_i+0x174>
 8007024:	0659      	lsls	r1, r3, #25
 8007026:	bf48      	it	mi
 8007028:	b2b6      	uxthmi	r6, r6
 800702a:	e7e6      	b.n	8006ffa <_printf_i+0x182>
 800702c:	4615      	mov	r5, r2
 800702e:	e7bb      	b.n	8006fa8 <_printf_i+0x130>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	6826      	ldr	r6, [r4, #0]
 8007034:	6961      	ldr	r1, [r4, #20]
 8007036:	1d18      	adds	r0, r3, #4
 8007038:	6028      	str	r0, [r5, #0]
 800703a:	0635      	lsls	r5, r6, #24
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	d501      	bpl.n	8007044 <_printf_i+0x1cc>
 8007040:	6019      	str	r1, [r3, #0]
 8007042:	e002      	b.n	800704a <_printf_i+0x1d2>
 8007044:	0670      	lsls	r0, r6, #25
 8007046:	d5fb      	bpl.n	8007040 <_printf_i+0x1c8>
 8007048:	8019      	strh	r1, [r3, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	6123      	str	r3, [r4, #16]
 800704e:	4615      	mov	r5, r2
 8007050:	e7ba      	b.n	8006fc8 <_printf_i+0x150>
 8007052:	682b      	ldr	r3, [r5, #0]
 8007054:	1d1a      	adds	r2, r3, #4
 8007056:	602a      	str	r2, [r5, #0]
 8007058:	681d      	ldr	r5, [r3, #0]
 800705a:	6862      	ldr	r2, [r4, #4]
 800705c:	2100      	movs	r1, #0
 800705e:	4628      	mov	r0, r5
 8007060:	f7f9 f8ee 	bl	8000240 <memchr>
 8007064:	b108      	cbz	r0, 800706a <_printf_i+0x1f2>
 8007066:	1b40      	subs	r0, r0, r5
 8007068:	6060      	str	r0, [r4, #4]
 800706a:	6863      	ldr	r3, [r4, #4]
 800706c:	6123      	str	r3, [r4, #16]
 800706e:	2300      	movs	r3, #0
 8007070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007074:	e7a8      	b.n	8006fc8 <_printf_i+0x150>
 8007076:	6923      	ldr	r3, [r4, #16]
 8007078:	462a      	mov	r2, r5
 800707a:	4649      	mov	r1, r9
 800707c:	4640      	mov	r0, r8
 800707e:	47d0      	blx	sl
 8007080:	3001      	adds	r0, #1
 8007082:	d0ab      	beq.n	8006fdc <_printf_i+0x164>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	079b      	lsls	r3, r3, #30
 8007088:	d413      	bmi.n	80070b2 <_printf_i+0x23a>
 800708a:	68e0      	ldr	r0, [r4, #12]
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	4298      	cmp	r0, r3
 8007090:	bfb8      	it	lt
 8007092:	4618      	movlt	r0, r3
 8007094:	e7a4      	b.n	8006fe0 <_printf_i+0x168>
 8007096:	2301      	movs	r3, #1
 8007098:	4632      	mov	r2, r6
 800709a:	4649      	mov	r1, r9
 800709c:	4640      	mov	r0, r8
 800709e:	47d0      	blx	sl
 80070a0:	3001      	adds	r0, #1
 80070a2:	d09b      	beq.n	8006fdc <_printf_i+0x164>
 80070a4:	3501      	adds	r5, #1
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	9903      	ldr	r1, [sp, #12]
 80070aa:	1a5b      	subs	r3, r3, r1
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dcf2      	bgt.n	8007096 <_printf_i+0x21e>
 80070b0:	e7eb      	b.n	800708a <_printf_i+0x212>
 80070b2:	2500      	movs	r5, #0
 80070b4:	f104 0619 	add.w	r6, r4, #25
 80070b8:	e7f5      	b.n	80070a6 <_printf_i+0x22e>
 80070ba:	bf00      	nop
 80070bc:	08007271 	.word	0x08007271
 80070c0:	08007282 	.word	0x08007282

080070c4 <memmove>:
 80070c4:	4288      	cmp	r0, r1
 80070c6:	b510      	push	{r4, lr}
 80070c8:	eb01 0402 	add.w	r4, r1, r2
 80070cc:	d902      	bls.n	80070d4 <memmove+0x10>
 80070ce:	4284      	cmp	r4, r0
 80070d0:	4623      	mov	r3, r4
 80070d2:	d807      	bhi.n	80070e4 <memmove+0x20>
 80070d4:	1e43      	subs	r3, r0, #1
 80070d6:	42a1      	cmp	r1, r4
 80070d8:	d008      	beq.n	80070ec <memmove+0x28>
 80070da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070e2:	e7f8      	b.n	80070d6 <memmove+0x12>
 80070e4:	4402      	add	r2, r0
 80070e6:	4601      	mov	r1, r0
 80070e8:	428a      	cmp	r2, r1
 80070ea:	d100      	bne.n	80070ee <memmove+0x2a>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f6:	e7f7      	b.n	80070e8 <memmove+0x24>

080070f8 <_realloc_r>:
 80070f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070fc:	4680      	mov	r8, r0
 80070fe:	4614      	mov	r4, r2
 8007100:	460e      	mov	r6, r1
 8007102:	b921      	cbnz	r1, 800710e <_realloc_r+0x16>
 8007104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007108:	4611      	mov	r1, r2
 800710a:	f7ff bb85 	b.w	8006818 <_malloc_r>
 800710e:	b92a      	cbnz	r2, 800711c <_realloc_r+0x24>
 8007110:	f7ff fc9c 	bl	8006a4c <_free_r>
 8007114:	4625      	mov	r5, r4
 8007116:	4628      	mov	r0, r5
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800711c:	f000 f81b 	bl	8007156 <_malloc_usable_size_r>
 8007120:	4284      	cmp	r4, r0
 8007122:	4607      	mov	r7, r0
 8007124:	d802      	bhi.n	800712c <_realloc_r+0x34>
 8007126:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800712a:	d812      	bhi.n	8007152 <_realloc_r+0x5a>
 800712c:	4621      	mov	r1, r4
 800712e:	4640      	mov	r0, r8
 8007130:	f7ff fb72 	bl	8006818 <_malloc_r>
 8007134:	4605      	mov	r5, r0
 8007136:	2800      	cmp	r0, #0
 8007138:	d0ed      	beq.n	8007116 <_realloc_r+0x1e>
 800713a:	42bc      	cmp	r4, r7
 800713c:	4622      	mov	r2, r4
 800713e:	4631      	mov	r1, r6
 8007140:	bf28      	it	cs
 8007142:	463a      	movcs	r2, r7
 8007144:	f7ff fb32 	bl	80067ac <memcpy>
 8007148:	4631      	mov	r1, r6
 800714a:	4640      	mov	r0, r8
 800714c:	f7ff fc7e 	bl	8006a4c <_free_r>
 8007150:	e7e1      	b.n	8007116 <_realloc_r+0x1e>
 8007152:	4635      	mov	r5, r6
 8007154:	e7df      	b.n	8007116 <_realloc_r+0x1e>

08007156 <_malloc_usable_size_r>:
 8007156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715a:	1f18      	subs	r0, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	bfbc      	itt	lt
 8007160:	580b      	ldrlt	r3, [r1, r0]
 8007162:	18c0      	addlt	r0, r0, r3
 8007164:	4770      	bx	lr
	...

08007168 <_init>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr

08007174 <_fini>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr
