
rtos_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005228  08005228  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005228  08005228  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005228  08005228  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001114  20000074  080052a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001188  080052a4  00021188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148b1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e0  00000000  00000000  00034955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00037338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  000383d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7f4  00000000  00000000  00039360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001346c  00000000  00000000  00056b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae6f3  00000000  00000000  00069fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001186b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a28  00000000  00000000  00118704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005030 	.word	0x08005030

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005030 	.word	0x08005030

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <vApplicationGetIdleTaskMemory+0x2c>)
 8000280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000090 	.word	0x20000090
 80002a0:	20000144 	.word	0x20000144

080002a4 <send_defttask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_defttask (void)
{
 80002a4:	b5b0      	push	{r4, r5, r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from defttask\r\n";
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <send_defttask+0x30>)
 80002ac:	463c      	mov	r4, r7
 80002ae:	461d      	mov	r5, r3
 80002b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002b8:	6020      	str	r0, [r4, #0]
 80002ba:	3404      	adds	r4, #4
 80002bc:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 80002be:	4639      	mov	r1, r7
 80002c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002c4:	2216      	movs	r2, #22
 80002c6:	4804      	ldr	r0, [pc, #16]	; (80002d8 <send_defttask+0x34>)
 80002c8:	f002 fbc0 	bl	8002a4c <HAL_UART_Transmit>
}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bdb0      	pop	{r4, r5, r7, pc}
 80002d4:	08005070 	.word	0x08005070
 80002d8:	20000344 	.word	0x20000344

080002dc <send_task2>:

void send_task2 (void)
{
 80002dc:	b5b0      	push	{r4, r5, r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from Task2\r\n";
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <send_task2+0x34>)
 80002e4:	1d3c      	adds	r4, r7, #4
 80002e6:	461d      	mov	r5, r3
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	682b      	ldr	r3, [r5, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	8022      	strh	r2, [r4, #0]
 80002f2:	3402      	adds	r4, #2
 80002f4:	0c1b      	lsrs	r3, r3, #16
 80002f6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 80002f8:	1d39      	adds	r1, r7, #4
 80002fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002fe:	2213      	movs	r2, #19
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <send_task2+0x38>)
 8000302:	f002 fba3 	bl	8002a4c <HAL_UART_Transmit>
}
 8000306:	bf00      	nop
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bdb0      	pop	{r4, r5, r7, pc}
 800030e:	bf00      	nop
 8000310:	08005088 	.word	0x08005088
 8000314:	20000344 	.word	0x20000344

08000318 <send_task3>:

void send_task3 (void)
{
 8000318:	b5b0      	push	{r4, r5, r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
	uint8_t data[] = "Hello from Task3\r\n";
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <send_task3+0x34>)
 8000320:	1d3c      	adds	r4, r7, #4
 8000322:	461d      	mov	r5, r3
 8000324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000328:	682b      	ldr	r3, [r5, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	8022      	strh	r2, [r4, #0]
 800032e:	3402      	adds	r4, #2
 8000330:	0c1b      	lsrs	r3, r3, #16
 8000332:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8000334:	1d39      	adds	r1, r7, #4
 8000336:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800033a:	2213      	movs	r2, #19
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <send_task3+0x38>)
 800033e:	f002 fb85 	bl	8002a4c <HAL_UART_Transmit>
}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bdb0      	pop	{r4, r5, r7, pc}
 800034a:	bf00      	nop
 800034c:	0800509c 	.word	0x0800509c
 8000350:	20000344 	.word	0x20000344

08000354 <send_rtosTimer>:

void send_rtosTimer (int count)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b08d      	sub	sp, #52	; 0x34
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	char buffer[16];
	uint8_t data[] = "Time at t = ";
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <send_rtosTimer+0x6c>)
 800035e:	f107 0410 	add.w	r4, r7, #16
 8000362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000364:	c407      	stmia	r4!, {r0, r1, r2}
 8000366:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8000368:	f107 0110 	add.w	r1, r7, #16
 800036c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000370:	220d      	movs	r2, #13
 8000372:	4814      	ldr	r0, [pc, #80]	; (80003c4 <send_rtosTimer+0x70>)
 8000374:	f002 fb6a 	bl	8002a4c <HAL_UART_Transmit>
	sprintf(buffer, "%d", count);
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	4912      	ldr	r1, [pc, #72]	; (80003c8 <send_rtosTimer+0x74>)
 8000380:	4618      	mov	r0, r3
 8000382:	f004 fa9b 	bl	80048bc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 500);
 8000386:	f107 0120 	add.w	r1, r7, #32
 800038a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800038e:	2210      	movs	r2, #16
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <send_rtosTimer+0x70>)
 8000392:	f002 fb5b 	bl	8002a4c <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart2, (uint8_t *) count, sizeof(count), 500);
	uint8_t newline[] = "\r\n";
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <send_rtosTimer+0x78>)
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	4611      	mov	r1, r2
 80003a0:	8019      	strh	r1, [r3, #0]
 80003a2:	3302      	adds	r3, #2
 80003a4:	0c12      	lsrs	r2, r2, #16
 80003a6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, newline, sizeof(newline), 500);
 80003a8:	f107 010c 	add.w	r1, r7, #12
 80003ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003b0:	2203      	movs	r2, #3
 80003b2:	4804      	ldr	r0, [pc, #16]	; (80003c4 <send_rtosTimer+0x70>)
 80003b4:	f002 fb4a 	bl	8002a4c <HAL_UART_Transmit>
}
 80003b8:	bf00      	nop
 80003ba:	3734      	adds	r7, #52	; 0x34
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd90      	pop	{r4, r7, pc}
 80003c0:	080050b4 	.word	0x080050b4
 80003c4:	20000344 	.word	0x20000344
 80003c8:	080050b0 	.word	0x080050b0
 80003cc:	080050c4 	.word	0x080050c4

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b5b0      	push	{r4, r5, r7, lr}
 80003d2:	b0a4      	sub	sp, #144	; 0x90
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 fb19 	bl	8000a0c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f877 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f000 f8eb 	bl	80005b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003e2:	f000 f8b9 	bl	8000558 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);  //1 second (low)
 80003e6:	4b2f      	ldr	r3, [pc, #188]	; (80004a4 <main+0xd4>)
 80003e8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80003ec:	461d      	mov	r5, r3
 80003ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f002 febb 	bl	800317c <osThreadCreate>
 8000406:	4603      	mov	r3, r0
 8000408:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <main+0xd8>)
 800040a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);		//2 second (mid)
 800040c:	4b27      	ldr	r3, [pc, #156]	; (80004ac <main+0xdc>)
 800040e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000412:	461d      	mov	r5, r3
 8000414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000418:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800041c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000420:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fea8 	bl	800317c <osThreadCreate>
 800042c:	4603      	mov	r3, r0
 800042e:	4a20      	ldr	r2, [pc, #128]	; (80004b0 <main+0xe0>)
 8000430:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(Task3, Task3_init, osPriorityAboveNormal, 0, 128);		//3 second (high)
 8000432:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <main+0xe4>)
 8000434:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000438:	461d      	mov	r5, r3
 800043a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800043c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000442:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000446:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fe95 	bl	800317c <osThreadCreate>
 8000452:	4603      	mov	r3, r0
 8000454:	4a18      	ldr	r2, [pc, #96]	; (80004b8 <main+0xe8>)
 8000456:	6013      	str	r3, [r2, #0]

   osThreadDef(rtosTimer, rtosTimer_init, osPriorityHigh, 0, 128);		//Timer (very high)
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <main+0xec>)
 800045a:	f107 0420 	add.w	r4, r7, #32
 800045e:	461d      	mov	r5, r3
 8000460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   rtosTimerHandle = osThreadCreate(osThread(rtosTimer), NULL);
 800046c:	f107 0320 	add.w	r3, r7, #32
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fe82 	bl	800317c <osThreadCreate>
 8000478:	4603      	mov	r3, r0
 800047a:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <main+0xf0>)
 800047c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

   // Beginning to receive data
	uint8_t data[] = "Beginning transmission\r\n";
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <main+0xf4>)
 8000480:	1d3c      	adds	r4, r7, #4
 8000482:	461d      	mov	r5, r3
 8000484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800048c:	c403      	stmia	r4!, {r0, r1}
 800048e:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8000490:	1d39      	adds	r1, r7, #4
 8000492:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000496:	2219      	movs	r2, #25
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <main+0xf8>)
 800049a:	f002 fad7 	bl	8002a4c <HAL_UART_Transmit>
  /* Start scheduler */
  osKernelStart();
 800049e:	f002 fe66 	bl	800316e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <main+0xd2>
 80004a4:	080050c8 	.word	0x080050c8
 80004a8:	200003c8 	.word	0x200003c8
 80004ac:	080050e4 	.word	0x080050e4
 80004b0:	200003cc 	.word	0x200003cc
 80004b4:	08005100 	.word	0x08005100
 80004b8:	200003d0 	.word	0x200003d0
 80004bc:	0800511c 	.word	0x0800511c
 80004c0:	200003d4 	.word	0x200003d4
 80004c4:	08005138 	.word	0x08005138
 80004c8:	20000344 	.word	0x20000344

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b090      	sub	sp, #64	; 0x40
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	2228      	movs	r2, #40	; 0x28
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f004 f8d8 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fc:	2301      	movs	r3, #1
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800050a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800050e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	f107 0318 	add.w	r3, r7, #24
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fd1b 	bl	8000f50 <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000520:	f000 f8f8 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000524:	230f      	movs	r3, #15
 8000526:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000528:	2302      	movs	r3, #2
 800052a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2102      	movs	r1, #2
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fd44 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800054a:	f000 f8e3 	bl	8000714 <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3740      	adds	r7, #64	; 0x40
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 800055e:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <MX_USART2_UART_Init+0x5c>)
 8000560:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 8000564:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000568:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 800057e:	220c      	movs	r2, #12
 8000580:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 8000596:	2200      	movs	r2, #0
 8000598:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_USART2_UART_Init+0x58>)
 800059c:	f002 fa08 	bl	80029b0 <HAL_UART_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005a6:	f000 f8b5 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000344 	.word	0x20000344
 80005b4:	40004400 	.word	0x40004400

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <MX_GPIO_Init+0xc4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a2a      	ldr	r2, [pc, #168]	; (800067c <MX_GPIO_Init+0xc4>)
 80005d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <MX_GPIO_Init+0xc4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <MX_GPIO_Init+0xc4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a24      	ldr	r2, [pc, #144]	; (800067c <MX_GPIO_Init+0xc4>)
 80005ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <MX_GPIO_Init+0xc4>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_GPIO_Init+0xc4>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_GPIO_Init+0xc4>)
 8000604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_GPIO_Init+0xc4>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_GPIO_Init+0xc4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <MX_GPIO_Init+0xc4>)
 800061c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_GPIO_Init+0xc4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <MX_GPIO_Init+0xc8>)
 8000636:	f000 fc73 	bl	8000f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000640:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_GPIO_Init+0xcc>)
 8000652:	f000 faf3 	bl	8000c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0xc8>)
 8000670:	f000 fae4 	bl	8000c3c <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	48000400 	.word	0x48000400
 8000684:	48000800 	.word	0x48000800

08000688 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	  send_defttask();
 8000690:	f7ff fe08 	bl	80002a4 <send_defttask>
    osDelay(1000);
 8000694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000698:	f002 fdbc 	bl	8003214 <osDelay>
	  send_defttask();
 800069c:	e7f8      	b.n	8000690 <StartDefaultTask+0x8>

0800069e <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	  send_task2();
 80006a6:	f7ff fe19 	bl	80002dc <send_task2>
    osDelay(2000);
 80006aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ae:	f002 fdb1 	bl	8003214 <osDelay>
	  send_task2();
 80006b2:	e7f8      	b.n	80006a6 <Task2_init+0x8>

080006b4 <Task3_init>:
  }
  /* USER CODE END Task2_init */
}

void Task3_init (void const * argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	while (1)
	{
		send_task3();
 80006bc:	f7ff fe2c 	bl	8000318 <send_task3>
		osDelay(3000); //3 sec delay
 80006c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c4:	f002 fda6 	bl	8003214 <osDelay>
		send_task3();
 80006c8:	e7f8      	b.n	80006bc <Task3_init+0x8>

080006ca <rtosTimer_init>:
	}
}

void rtosTimer_init (void const * argument)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
	int cnt = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		send_rtosTimer(cnt);
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f7ff fe3c 	bl	8000354 <send_rtosTimer>
		osDelay(1000); 		//will display every second
 80006dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e0:	f002 fd98 	bl	8003214 <osDelay>
		cnt = cnt + 1000;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80006ea:	60fb      	str	r3, [r7, #12]
		send_rtosTimer(cnt);
 80006ec:	e7f3      	b.n	80006d6 <rtosTimer_init+0xc>
	...

080006f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d101      	bne.n	8000706 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000702:	f000 f999 	bl	8000a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40001000 	.word	0x40001000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <HAL_MspInit+0x4c>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_MspInit+0x4c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <HAL_MspInit+0x4c>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <HAL_MspInit+0x4c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	61d3      	str	r3, [r2, #28]
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	210f      	movs	r1, #15
 800075a:	f06f 0001 	mvn.w	r0, #1
 800075e:	f000 fa43 	bl	8000be8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_UART_MspInit+0x7c>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d128      	bne.n	80007e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_UART_MspInit+0x80>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <HAL_UART_MspInit+0x80>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_UART_MspInit+0x80>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_MspInit+0x80>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_UART_MspInit+0x80>)
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_UART_MspInit+0x80>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007c2:	230c      	movs	r3, #12
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d2:	2307      	movs	r3, #7
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f000 fa2c 	bl	8000c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40004400 	.word	0x40004400
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08e      	sub	sp, #56	; 0x38
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000804:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <HAL_InitTick+0xe0>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	4a32      	ldr	r2, [pc, #200]	; (80008d4 <HAL_InitTick+0xe0>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	61d3      	str	r3, [r2, #28]
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <HAL_InitTick+0xe0>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	f003 0310 	and.w	r3, r3, #16
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800081c:	f107 0210 	add.w	r2, r7, #16
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fe06 	bl	8002438 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800082c:	6a3b      	ldr	r3, [r7, #32]
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000832:	2b00      	cmp	r3, #0
 8000834:	d103      	bne.n	800083e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000836:	f001 fdbb 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 800083a:	6378      	str	r0, [r7, #52]	; 0x34
 800083c:	e004      	b.n	8000848 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800083e:	f001 fdb7 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8000842:	4603      	mov	r3, r0
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <HAL_InitTick+0xe4>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	0c9b      	lsrs	r3, r3, #18
 8000852:	3b01      	subs	r3, #1
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <HAL_InitTick+0xe8>)
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <HAL_InitTick+0xec>)
 800085a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <HAL_InitTick+0xe8>)
 800085e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000862:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <HAL_InitTick+0xe8>)
 8000866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000868:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_InitTick+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_InitTick+0xe8>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <HAL_InitTick+0xe8>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800087c:	4817      	ldr	r0, [pc, #92]	; (80008dc <HAL_InitTick+0xe8>)
 800087e:	f001 fe0d 	bl	800249c <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800088c:	2b00      	cmp	r3, #0
 800088e:	d11b      	bne.n	80008c8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000890:	4812      	ldr	r0, [pc, #72]	; (80008dc <HAL_InitTick+0xe8>)
 8000892:	f001 fe65 	bl	8002560 <HAL_TIM_Base_Start_IT>
 8000896:	4603      	mov	r3, r0
 8000898:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800089c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d111      	bne.n	80008c8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008a4:	2036      	movs	r0, #54	; 0x36
 80008a6:	f000 f9bb 	bl	8000c20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d808      	bhi.n	80008c2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	2036      	movs	r0, #54	; 0x36
 80008b6:	f000 f997 	bl	8000be8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_InitTick+0xf0>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	e002      	b.n	80008c8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3738      	adds	r7, #56	; 0x38
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000
 80008d8:	431bde83 	.word	0x431bde83
 80008dc:	200003d8 	.word	0x200003d8
 80008e0:	40001000 	.word	0x40001000
 80008e4:	20000004 	.word	0x20000004

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <TIM6_DAC_IRQHandler+0x10>)
 800091a:	f001 fe75 	bl	8002608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200003d8 	.word	0x200003d8

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f003 fe60 	bl	800461c <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20004000 	.word	0x20004000
 8000988:	00000400 	.word	0x00000400
 800098c:	20000424 	.word	0x20000424
 8000990:	20001188 	.word	0x20001188

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009e2:	f7ff ffd7 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f003 fe1f 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ea:	f7ff fcf1 	bl	80003d0 <main>

080009ee <LoopForever>:

LoopForever:
    b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009fc:	08005230 	.word	0x08005230
  ldr r2, =_sbss
 8000a00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a04:	20001188 	.word	0x20001188

08000a08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x28>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x28>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f8d8 	bl	8000bd2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f7ff fee6 	bl	80007f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fe7a 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x20>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x24>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_IncTick+0x24>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000428 	.word	0x20000428

08000a60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000428 	.word	0x20000428

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff4c 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfa:	f7ff ff61 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000bfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	68b9      	ldr	r1, [r7, #8]
 8000c04:	6978      	ldr	r0, [r7, #20]
 8000c06:	f7ff ffb1 	bl	8000b6c <NVIC_EncodePriority>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff80 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff54 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4a:	e14e      	b.n	8000eea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2101      	movs	r1, #1
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 8140 	beq.w	8000ee4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d005      	beq.n	8000c7c <HAL_GPIO_Init+0x40>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d130      	bne.n	8000cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	091b      	lsrs	r3, r3, #4
 8000cc8:	f003 0201 	and.w	r2, r3, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d017      	beq.n	8000d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d123      	bne.n	8000d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	691a      	ldr	r2, [r3, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	6939      	ldr	r1, [r7, #16]
 8000d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0203 	and.w	r2, r3, #3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 809a 	beq.w	8000ee4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db0:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_GPIO_Init+0x2cc>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a54      	ldr	r2, [pc, #336]	; (8000f08 <HAL_GPIO_Init+0x2cc>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <HAL_GPIO_Init+0x2cc>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dc8:	4a50      	ldr	r2, [pc, #320]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000df2:	d013      	beq.n	8000e1c <HAL_GPIO_Init+0x1e0>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a46      	ldr	r2, [pc, #280]	; (8000f10 <HAL_GPIO_Init+0x2d4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d00d      	beq.n	8000e18 <HAL_GPIO_Init+0x1dc>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a45      	ldr	r2, [pc, #276]	; (8000f14 <HAL_GPIO_Init+0x2d8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d007      	beq.n	8000e14 <HAL_GPIO_Init+0x1d8>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a44      	ldr	r2, [pc, #272]	; (8000f18 <HAL_GPIO_Init+0x2dc>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d101      	bne.n	8000e10 <HAL_GPIO_Init+0x1d4>
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x1e2>
 8000e10:	2305      	movs	r3, #5
 8000e12:	e004      	b.n	8000e1e <HAL_GPIO_Init+0x1e2>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0x1e2>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_GPIO_Init+0x1e2>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2e:	4937      	ldr	r1, [pc, #220]	; (8000f0c <HAL_GPIO_Init+0x2d0>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e60:	4a2e      	ldr	r2, [pc, #184]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e8a:	4a24      	ldr	r2, [pc, #144]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_GPIO_Init+0x2e0>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f aea9 	bne.w	8000c4c <HAL_GPIO_Init+0x10>
  }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48000800 	.word	0x48000800
 8000f18:	48000c00 	.word	0x48000c00
 8000f1c:	40010400 	.word	0x40010400

08000f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f30:	787b      	ldrb	r3, [r7, #1]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f60:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f001 b823 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 817d 	beq.w	8001286 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f8c:	4bbc      	ldr	r3, [pc, #752]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d00c      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f98:	4bb9      	ldr	r3, [pc, #740]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d15c      	bne.n	800105e <HAL_RCC_OscConfig+0x10e>
 8000fa4:	4bb6      	ldr	r3, [pc, #728]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb0:	d155      	bne.n	800105e <HAL_RCC_OscConfig+0x10e>
 8000fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fc6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fca:	fab3 f383 	clz	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	095b      	lsrs	r3, r3, #5
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d102      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x94>
 8000fde:	4ba8      	ldr	r3, [pc, #672]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	e015      	b.n	8001010 <HAL_RCC_OscConfig+0xc0>
 8000fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ff0:	fa93 f3a3 	rbit	r3, r3
 8000ff4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001000:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800100c:	4b9c      	ldr	r3, [pc, #624]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001014:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001018:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800101c:	fa92 f2a2 	rbit	r2, r2
 8001020:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001024:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001028:	fab2 f282 	clz	r2, r2
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f002 021f 	and.w	r2, r2, #31
 8001038:	2101      	movs	r1, #1
 800103a:	fa01 f202 	lsl.w	r2, r1, r2
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 811f 	beq.w	8001284 <HAL_RCC_OscConfig+0x334>
 8001046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800104a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 8116 	bne.w	8001284 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	f000 bfaf 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x12e>
 8001070:	4b83      	ldr	r3, [pc, #524]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a82      	ldr	r2, [pc, #520]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e036      	b.n	80010ec <HAL_RCC_OscConfig+0x19c>
 800107e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x158>
 800108e:	4b7c      	ldr	r3, [pc, #496]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a7b      	ldr	r2, [pc, #492]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b79      	ldr	r3, [pc, #484]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a78      	ldr	r2, [pc, #480]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e021      	b.n	80010ec <HAL_RCC_OscConfig+0x19c>
 80010a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x184>
 80010ba:	4b71      	ldr	r3, [pc, #452]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a70      	ldr	r2, [pc, #448]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a6d      	ldr	r2, [pc, #436]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e00b      	b.n	80010ec <HAL_RCC_OscConfig+0x19c>
 80010d4:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a69      	ldr	r2, [pc, #420]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a66      	ldr	r2, [pc, #408]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ec:	4b64      	ldr	r3, [pc, #400]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	f023 020f 	bic.w	r2, r3, #15
 80010f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	495f      	ldr	r1, [pc, #380]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001102:	4313      	orrs	r3, r2
 8001104:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800110a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d059      	beq.n	80011ca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fca3 	bl	8000a60 <HAL_GetTick>
 800111a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e00a      	b.n	8001136 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fc9e 	bl	8000a60 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b64      	cmp	r3, #100	; 0x64
 800112e:	d902      	bls.n	8001136 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	f000 bf43 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800114a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d102      	bne.n	8001168 <HAL_RCC_OscConfig+0x218>
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	e015      	b.n	8001194 <HAL_RCC_OscConfig+0x244>
 8001168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800117c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001180:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001184:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001198:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800119c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011a0:	fa92 f2a2 	rbit	r2, r2
 80011a4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80011a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011ac:	fab2 f282 	clz	r2, r2
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	f002 021f 	and.w	r2, r2, #31
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0ab      	beq.n	8001120 <HAL_RCC_OscConfig+0x1d0>
 80011c8:	e05d      	b.n	8001286 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ca:	f7ff fc49 	bl	8000a60 <HAL_GetTick>
 80011ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fc44 	bl	8000a60 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d902      	bls.n	80011ea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f000 bee9 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>
 80011ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80011fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	095b      	lsrs	r3, r3, #5
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x2cc>
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	e015      	b.n	8001248 <HAL_RCC_OscConfig+0x2f8>
 800121c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001220:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001234:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001238:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_RCC_OscConfig+0x330>)
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800124c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001250:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001254:	fa92 f2a2 	rbit	r2, r2
 8001258:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800125c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001260:	fab2 f282 	clz	r2, r2
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f042 0220 	orr.w	r2, r2, #32
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	f002 021f 	and.w	r2, r2, #31
 8001270:	2101      	movs	r1, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	4013      	ands	r3, r2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ab      	bne.n	80011d4 <HAL_RCC_OscConfig+0x284>
 800127c:	e003      	b.n	8001286 <HAL_RCC_OscConfig+0x336>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 817d 	beq.w	8001596 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800129c:	4ba6      	ldr	r3, [pc, #664]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 030c 	and.w	r3, r3, #12
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00b      	beq.n	80012c0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012a8:	4ba3      	ldr	r3, [pc, #652]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d172      	bne.n	800139a <HAL_RCC_OscConfig+0x44a>
 80012b4:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d16c      	bne.n	800139a <HAL_RCC_OscConfig+0x44a>
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	095b      	lsrs	r3, r3, #5
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d102      	bne.n	80012f0 <HAL_RCC_OscConfig+0x3a0>
 80012ea:	4b93      	ldr	r3, [pc, #588]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	e013      	b.n	8001318 <HAL_RCC_OscConfig+0x3c8>
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001308:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001314:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2202      	movs	r2, #2
 800131a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800131e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001322:	fa92 f2a2 	rbit	r2, r2
 8001326:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800132a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800132e:	fab2 f282 	clz	r2, r2
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	f042 0220 	orr.w	r2, r2, #32
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	f002 021f 	and.w	r2, r2, #31
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	4013      	ands	r3, r2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00a      	beq.n	8001360 <HAL_RCC_OscConfig+0x410>
 800134a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d002      	beq.n	8001360 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	f000 be2e 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b75      	ldr	r3, [pc, #468]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	21f8      	movs	r1, #248	; 0xf8
 8001376:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800137e:	fa91 f1a1 	rbit	r1, r1
 8001382:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001386:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800138a:	fab1 f181 	clz	r1, r1
 800138e:	b2c9      	uxtb	r1, r1
 8001390:	408b      	lsls	r3, r1
 8001392:	4969      	ldr	r1, [pc, #420]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001398:	e0fd      	b.n	8001596 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800139a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8088 	beq.w	80014bc <HAL_RCC_OscConfig+0x56c>
 80013ac:	2301      	movs	r3, #1
 80013ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	461a      	mov	r2, r3
 80013d4:	2301      	movs	r3, #1
 80013d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fb42 	bl	8000a60 <HAL_GetTick>
 80013dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fb3d 	bl	8000a60 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d902      	bls.n	80013f8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f000 bde2 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>
 80013f8:	2302      	movs	r3, #2
 80013fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800140a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	095b      	lsrs	r3, r3, #5
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d102      	bne.n	8001428 <HAL_RCC_OscConfig+0x4d8>
 8001422:	4b45      	ldr	r3, [pc, #276]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	e013      	b.n	8001450 <HAL_RCC_OscConfig+0x500>
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001440:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800144c:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2202      	movs	r2, #2
 8001452:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001456:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800145a:	fa92 f2a2 	rbit	r2, r2
 800145e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001462:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001466:	fab2 f282 	clz	r2, r2
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	f042 0220 	orr.w	r2, r2, #32
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f002 021f 	and.w	r2, r2, #31
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	4013      	ands	r3, r2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0af      	beq.n	80013e2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	21f8      	movs	r1, #248	; 0xf8
 8001498:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014a0:	fa91 f1a1 	rbit	r1, r1
 80014a4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80014a8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014ac:	fab1 f181 	clz	r1, r1
 80014b0:	b2c9      	uxtb	r1, r1
 80014b2:	408b      	lsls	r3, r1
 80014b4:	4920      	ldr	r1, [pc, #128]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
 80014ba:	e06c      	b.n	8001596 <HAL_RCC_OscConfig+0x646>
 80014bc:	2301      	movs	r3, #1
 80014be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	2300      	movs	r3, #0
 80014e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff faba 	bl	8000a60 <HAL_GetTick>
 80014ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f0:	e00a      	b.n	8001508 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fab5 	bl	8000a60 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d902      	bls.n	8001508 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	f000 bd5a 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001508:	2302      	movs	r3, #2
 800150a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800151a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	095b      	lsrs	r3, r3, #5
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d104      	bne.n	800153c <HAL_RCC_OscConfig+0x5ec>
 8001532:	4b01      	ldr	r3, [pc, #4]	; (8001538 <HAL_RCC_OscConfig+0x5e8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	e015      	b.n	8001564 <HAL_RCC_OscConfig+0x614>
 8001538:	40021000 	.word	0x40021000
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800154e:	2302      	movs	r3, #2
 8001550:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001554:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001560:	4bc8      	ldr	r3, [pc, #800]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	2202      	movs	r2, #2
 8001566:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800156a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800156e:	fa92 f2a2 	rbit	r2, r2
 8001572:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001576:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800157a:	fab2 f282 	clz	r2, r2
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	f042 0220 	orr.w	r2, r2, #32
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f002 021f 	and.w	r2, r2, #31
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ad      	bne.n	80014f2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 8110 	beq.w	80017cc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d079      	beq.n	80016b0 <HAL_RCC_OscConfig+0x760>
 80015bc:	2301      	movs	r3, #1
 80015be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80015ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	4bab      	ldr	r3, [pc, #684]	; (8001888 <HAL_RCC_OscConfig+0x938>)
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	461a      	mov	r2, r3
 80015e2:	2301      	movs	r3, #1
 80015e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fa3b 	bl	8000a60 <HAL_GetTick>
 80015ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fa36 	bl	8000a60 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d902      	bls.n	8001606 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	f000 bcdb 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001620:	2202      	movs	r2, #2
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	fa93 f2a3 	rbit	r2, r3
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001644:	2202      	movs	r2, #2
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800165e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001660:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 8001662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800166c:	2102      	movs	r1, #2
 800166e:	6019      	str	r1, [r3, #0]
 8001670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001674:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	fa93 f1a3 	rbit	r1, r3
 800167e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001682:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001686:	6019      	str	r1, [r3, #0]
  return result;
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f003 031f 	and.w	r3, r3, #31
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0a0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x6a0>
 80016ae:	e08d      	b.n	80017cc <HAL_RCC_OscConfig+0x87c>
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016b8:	2201      	movs	r2, #1
 80016ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f2a3 	rbit	r2, r3
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016d2:	601a      	str	r2, [r3, #0]
  return result;
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80016dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b68      	ldr	r3, [pc, #416]	; (8001888 <HAL_RCC_OscConfig+0x938>)
 80016e8:	4413      	add	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	461a      	mov	r2, r3
 80016ee:	2300      	movs	r3, #0
 80016f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff f9b5 	bl	8000a60 <HAL_GetTick>
 80016f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fc:	f7ff f9b0 	bl	8000a60 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d902      	bls.n	8001712 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	f000 bc55 	b.w	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001716:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800171a:	2202      	movs	r2, #2
 800171c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001722:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	fa93 f2a3 	rbit	r2, r3
 800172c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001730:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001762:	2202      	movs	r2, #2
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800177c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 8001780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800178a:	2102      	movs	r1, #2
 800178c:	6019      	str	r1, [r3, #0]
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f1a3 	rbit	r1, r3
 800179c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017a4:	6019      	str	r1, [r3, #0]
  return result;
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d197      	bne.n	80016fc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 81a1 	beq.w	8001b24 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d116      	bne.n	8001822 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	61d3      	str	r3, [r2, #28]
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800181a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_RCC_OscConfig+0x93c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d11a      	bne.n	8001864 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_RCC_OscConfig+0x93c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_RCC_OscConfig+0x93c>)
 8001834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001838:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183a:	f7ff f911 	bl	8000a60 <HAL_GetTick>
 800183e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	e009      	b.n	8001858 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001844:	f7ff f90c 	bl	8000a60 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e3b1      	b.n	8001fbc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_RCC_OscConfig+0x93c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ef      	beq.n	8001844 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d10d      	bne.n	8001890 <HAL_RCC_OscConfig+0x940>
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a02      	ldr	r2, [pc, #8]	; (8001884 <HAL_RCC_OscConfig+0x934>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6213      	str	r3, [r2, #32]
 8001880:	e03c      	b.n	80018fc <HAL_RCC_OscConfig+0x9ac>
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	10908120 	.word	0x10908120
 800188c:	40007000 	.word	0x40007000
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x96a>
 80018a0:	4bc1      	ldr	r3, [pc, #772]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4ac0      	ldr	r2, [pc, #768]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6213      	str	r3, [r2, #32]
 80018ac:	4bbe      	ldr	r3, [pc, #760]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4abd      	ldr	r2, [pc, #756]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018b2:	f023 0304 	bic.w	r3, r3, #4
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	e020      	b.n	80018fc <HAL_RCC_OscConfig+0x9ac>
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x994>
 80018ca:	4bb7      	ldr	r3, [pc, #732]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4ab6      	ldr	r2, [pc, #728]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	4bb4      	ldr	r3, [pc, #720]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4ab3      	ldr	r2, [pc, #716]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0x9ac>
 80018e4:	4bb0      	ldr	r3, [pc, #704]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4aaf      	ldr	r2, [pc, #700]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	4bad      	ldr	r3, [pc, #692]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4aac      	ldr	r2, [pc, #688]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80018f6:	f023 0304 	bic.w	r3, r3, #4
 80018fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8081 	beq.w	8001a10 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff f8a7 	bl	8000a60 <HAL_GetTick>
 8001912:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff f8a2 	bl	8000a60 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e345      	b.n	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001938:	2202      	movs	r2, #2
 800193a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	fa93 f2a3 	rbit	r2, r3
 800194a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001958:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800195c:	2202      	movs	r2, #2
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001976:	601a      	str	r2, [r3, #0]
  return result;
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001980:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	095b      	lsrs	r3, r3, #5
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d102      	bne.n	800199c <HAL_RCC_OscConfig+0xa4c>
 8001996:	4b84      	ldr	r3, [pc, #528]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	e013      	b.n	80019c4 <HAL_RCC_OscConfig+0xa74>
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019a4:	2202      	movs	r2, #2
 80019a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	4b79      	ldr	r3, [pc, #484]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019cc:	2102      	movs	r1, #2
 80019ce:	6011      	str	r1, [r2, #0]
 80019d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	fa92 f1a2 	rbit	r1, r2
 80019de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019e6:	6011      	str	r1, [r2, #0]
  return result;
 80019e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fab2 f282 	clz	r2, r2
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	f002 021f 	and.w	r2, r2, #31
 8001a02:	2101      	movs	r1, #1
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d084      	beq.n	8001918 <HAL_RCC_OscConfig+0x9c8>
 8001a0e:	e07f      	b.n	8001b10 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff f826 	bl	8000a60 <HAL_GetTick>
 8001a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	e00b      	b.n	8001a32 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f821 	bl	8000a60 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e2c4      	b.n	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a5e:	2202      	movs	r2, #2
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a66:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a78:	601a      	str	r2, [r3, #0]
  return result;
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_OscConfig+0xb4e>
 8001a98:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	e013      	b.n	8001ac6 <HAL_RCC_OscConfig+0xb76>
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ace:	2102      	movs	r1, #2
 8001ad0:	6011      	str	r1, [r2, #0]
 8001ad2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ad6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	fa92 f1a2 	rbit	r1, r2
 8001ae0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ae4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ae8:	6011      	str	r1, [r2, #0]
  return result;
 8001aea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d184      	bne.n	8001a1a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 8001b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8242 	beq.w	8001fba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b36:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_RCC_OscConfig+0xc58>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	f000 8213 	beq.w	8001f6a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	f040 8162 	bne.w	8001e1a <HAL_RCC_OscConfig+0xeca>
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b7a:	601a      	str	r2, [r3, #0]
  return result;
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	461a      	mov	r2, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7fe ff60 	bl	8000a60 <HAL_GetTick>
 8001ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba4:	e00c      	b.n	8001bc0 <HAL_RCC_OscConfig+0xc70>
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe ff58 	bl	8000a60 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1fd      	b.n	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fa93 f2a3 	rbit	r2, r3
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001be4:	601a      	str	r2, [r3, #0]
  return result;
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001bee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0xcba>
 8001c04:	4bb0      	ldr	r3, [pc, #704]	; (8001ec8 <HAL_RCC_OscConfig+0xf78>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	e027      	b.n	8001c5a <HAL_RCC_OscConfig+0xd0a>
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0xf78>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c66:	6011      	str	r1, [r2, #0]
 8001c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c6c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	fa92 f1a2 	rbit	r1, r2
 8001c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c7a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c7e:	6011      	str	r1, [r2, #0]
  return result;
 8001c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c84:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f042 0220 	orr.w	r2, r2, #32
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f002 021f 	and.w	r2, r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d182      	bne.n	8001bac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca6:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <HAL_RCC_OscConfig+0xf78>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	497f      	ldr	r1, [pc, #508]	; (8001ec8 <HAL_RCC_OscConfig+0xf78>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001cd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cf2:	601a      	str	r2, [r3, #0]
  return result;
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cfc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2301      	movs	r3, #1
 8001d12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe fea4 	bl	8000a60 <HAL_GetTick>
 8001d18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7fe fe9f 	bl	8000a60 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e144      	b.n	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d36:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d56:	601a      	str	r2, [r3, #0]
  return result;
 8001d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_OscConfig+0xe2c>
 8001d76:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <HAL_RCC_OscConfig+0xf78>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e027      	b.n	8001dcc <HAL_RCC_OscConfig+0xe7c>
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f2a3 	rbit	r2, r3
 8001dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <HAL_RCC_OscConfig+0xf78>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dd0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001dd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dd8:	6011      	str	r1, [r2, #0]
 8001dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dde:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	fa92 f1a2 	rbit	r1, r2
 8001de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001df0:	6011      	str	r1, [r2, #0]
  return result;
 8001df2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	fab2 f282 	clz	r2, r2
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	f042 0220 	orr.w	r2, r2, #32
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	f002 021f 	and.w	r2, r2, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d082      	beq.n	8001d1e <HAL_RCC_OscConfig+0xdce>
 8001e18:	e0cf      	b.n	8001fba <HAL_RCC_OscConfig+0x106a>
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e3e:	601a      	str	r2, [r3, #0]
  return result;
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7fe fdfe 	bl	8000a60 <HAL_GetTick>
 8001e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6a:	f7fe fdf9 	bl	8000a60 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e09e      	b.n	8001fbc <HAL_RCC_OscConfig+0x106c>
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ea2:	601a      	str	r2, [r3, #0]
  return result;
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001eac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d104      	bne.n	8001ecc <HAL_RCC_OscConfig+0xf7c>
 8001ec2:	4b01      	ldr	r3, [pc, #4]	; (8001ec8 <HAL_RCC_OscConfig+0xf78>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e029      	b.n	8001f1c <HAL_RCC_OscConfig+0xfcc>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCC_OscConfig+0x1078>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f20:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f28:	6011      	str	r1, [r2, #0]
 8001f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f2e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	fa92 f1a2 	rbit	r1, r2
 8001f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f3c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f40:	6011      	str	r1, [r2, #0]
  return result;
 8001f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f46:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fab2 f282 	clz	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f042 0220 	orr.w	r2, r2, #32
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f002 021f 	and.w	r2, r2, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d180      	bne.n	8001e6a <HAL_RCC_OscConfig+0xf1a>
 8001f68:	e027      	b.n	8001fba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e01e      	b.n	8001fbc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_OscConfig+0x1078>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f8a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b09e      	sub	sp, #120	; 0x78
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e162      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b90      	ldr	r3, [pc, #576]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d910      	bls.n	8002014 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b8d      	ldr	r3, [pc, #564]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 0207 	bic.w	r2, r3, #7
 8001ffa:	498b      	ldr	r1, [pc, #556]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b89      	ldr	r3, [pc, #548]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e14a      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b82      	ldr	r3, [pc, #520]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	497f      	ldr	r1, [pc, #508]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80dc 	beq.w	80021f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d13c      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xf6>
 8002048:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d102      	bne.n	8002072 <HAL_RCC_ClockConfig+0xa6>
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	e00f      	b.n	8002092 <HAL_RCC_ClockConfig+0xc6>
 8002072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002076:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	667b      	str	r3, [r7, #100]	; 0x64
 8002080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002084:	663b      	str	r3, [r7, #96]	; 0x60
 8002086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002096:	65ba      	str	r2, [r7, #88]	; 0x58
 8002098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800209a:	fa92 f2a2 	rbit	r2, r2
 800209e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020a2:	fab2 f282 	clz	r2, r2
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f002 021f 	and.w	r2, r2, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f202 	lsl.w	r2, r1, r2
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d17b      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0f3      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d13c      	bne.n	8002144 <HAL_RCC_ClockConfig+0x178>
 80020ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	095b      	lsrs	r3, r3, #5
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x128>
 80020ee:	4b4f      	ldr	r3, [pc, #316]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	e00f      	b.n	8002114 <HAL_RCC_ClockConfig+0x148>
 80020f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
 8002102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002106:	643b      	str	r3, [r7, #64]	; 0x40
 8002108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002110:	4b46      	ldr	r3, [pc, #280]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002118:	63ba      	str	r2, [r7, #56]	; 0x38
 800211a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800211c:	fa92 f2a2 	rbit	r2, r2
 8002120:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f002 021f 	and.w	r2, r2, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f202 	lsl.w	r2, r1, r2
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d13a      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0b2      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
 8002144:	2302      	movs	r3, #2
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_RCC_ClockConfig+0x1a0>
 8002166:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e00d      	b.n	8002188 <HAL_RCC_ClockConfig+0x1bc>
 800216c:	2302      	movs	r3, #2
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2202      	movs	r2, #2
 800218a:	61ba      	str	r2, [r7, #24]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	fa92 f2a2 	rbit	r2, r2
 8002192:	617a      	str	r2, [r7, #20]
  return result;
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	fab2 f282 	clz	r2, r2
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f042 0220 	orr.w	r2, r2, #32
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f002 021f 	and.w	r2, r2, #31
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e079      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	491a      	ldr	r1, [pc, #104]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c8:	f7fe fc4a 	bl	8000a60 <HAL_GetTick>
 80021cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fc46 	bl	8000a60 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e061      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_ClockConfig+0x260>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d214      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4906      	ldr	r1, [pc, #24]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCC_ClockConfig+0x25c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e040      	b.n	80022aa <HAL_RCC_ClockConfig+0x2de>
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	491a      	ldr	r1, [pc, #104]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4912      	ldr	r1, [pc, #72]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800226e:	f000 f829 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002272:	4601      	mov	r1, r0
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800227c:	22f0      	movs	r2, #240	; 0xf0
 800227e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	fa92 f2a2 	rbit	r2, r2
 8002286:	60fa      	str	r2, [r7, #12]
  return result;
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	fab2 f282 	clz	r2, r2
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	40d3      	lsrs	r3, r2
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	fa21 f303 	lsr.w	r3, r1, r3
 800229a:	4a08      	ldr	r2, [pc, #32]	; (80022bc <HAL_RCC_ClockConfig+0x2f0>)
 800229c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_RCC_ClockConfig+0x2f4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe faa6 	bl	80007f4 <HAL_InitTick>
  
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3778      	adds	r7, #120	; 0x78
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	0800515c 	.word	0x0800515c
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b08b      	sub	sp, #44	; 0x2c
 80022c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x30>
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x36>
 80022f2:	e03c      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022f6:	623b      	str	r3, [r7, #32]
      break;
 80022f8:	e03c      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002300:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002304:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	fa92 f2a2 	rbit	r2, r2
 800230c:	607a      	str	r2, [r7, #4]
  return result;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	40d3      	lsrs	r3, r2
 8002318:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_RCC_GetSysClockFreq+0xc8>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	220f      	movs	r2, #15
 8002328:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	fa92 f2a2 	rbit	r2, r2
 8002330:	60fa      	str	r2, [r7, #12]
  return result;
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	40d3      	lsrs	r3, r2
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_RCC_GetSysClockFreq+0xcc>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_RCC_GetSysClockFreq+0xc4>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	fbb2 f2f3 	udiv	r2, r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
 800235c:	e004      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	623b      	str	r3, [r7, #32]
      break;
 800236c:	e002      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002370:	623b      	str	r3, [r7, #32]
      break;
 8002372:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002374:	6a3b      	ldr	r3, [r7, #32]
}
 8002376:	4618      	mov	r0, r3
 8002378:	372c      	adds	r7, #44	; 0x2c
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	007a1200 	.word	0x007a1200
 800238c:	08005174 	.word	0x08005174
 8002390:	08005184 	.word	0x08005184
 8002394:	003d0900 	.word	0x003d0900

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_RCC_GetHCLKFreq+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023b6:	f7ff ffef 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	603a      	str	r2, [r7, #0]
  return result;
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	40d3      	lsrs	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	0800516c 	.word	0x0800516c

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023fa:	f7ff ffcd 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023fe:	4601      	mov	r1, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002408:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800240c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	fa92 f2a2 	rbit	r2, r2
 8002414:	603a      	str	r2, [r7, #0]
  return result;
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	40d3      	lsrs	r3, r2
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	0800516c 	.word	0x0800516c

08002438 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	220f      	movs	r2, #15
 8002446:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_RCC_GetClockConfig+0x5c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_RCC_GetClockConfig+0x5c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_RCC_GetClockConfig+0x5c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <HAL_RCC_GetClockConfig+0x5c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_RCC_GetClockConfig+0x60>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0207 	and.w	r2, r3, #7
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	601a      	str	r2, [r3, #0]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e049      	b.n	8002542 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f841 	bl	800254a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 f9dc 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d001      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e03b      	b.n	80025f0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <HAL_TIM_Base_Start_IT+0x9c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d009      	beq.n	80025ae <HAL_TIM_Base_Start_IT+0x4e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d004      	beq.n	80025ae <HAL_TIM_Base_Start_IT+0x4e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a15      	ldr	r2, [pc, #84]	; (8002600 <HAL_TIM_Base_Start_IT+0xa0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d115      	bne.n	80025da <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_TIM_Base_Start_IT+0xa4>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b06      	cmp	r3, #6
 80025be:	d015      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x8c>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c6:	d011      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d8:	e008      	b.n	80025ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e000      	b.n	80025ee <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40014000 	.word	0x40014000
 8002604:	00010007 	.word	0x00010007

08002608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d122      	bne.n	8002664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d11b      	bne.n	8002664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0202 	mvn.w	r2, #2
 8002634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f905 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 8002650:	e005      	b.n	800265e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8f7 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f908 	bl	800286e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b04      	cmp	r3, #4
 8002670:	d122      	bne.n	80026b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d11b      	bne.n	80026b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0204 	mvn.w	r2, #4
 8002688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8db 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 80026a4:	e005      	b.n	80026b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f8cd 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f8de 	bl	800286e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d122      	bne.n	800270c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d11b      	bne.n	800270c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0208 	mvn.w	r2, #8
 80026dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2204      	movs	r2, #4
 80026e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8b1 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8a3 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f8b4 	bl	800286e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b10      	cmp	r3, #16
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b10      	cmp	r3, #16
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0210 	mvn.w	r2, #16
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2208      	movs	r2, #8
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f887 	bl	800285a <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f879 	bl	8002846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f88a 	bl	800286e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10e      	bne.n	800278c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0201 	mvn.w	r2, #1
 8002784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fd ffb2 	bl	80006f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	2b80      	cmp	r3, #128	; 0x80
 8002798:	d10e      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d107      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8e8 	bl	8002988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c6:	d10e      	bne.n	80027e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	2b80      	cmp	r3, #128	; 0x80
 80027d4:	d107      	bne.n	80027e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f8db 	bl	800299c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d10e      	bne.n	8002812 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d107      	bne.n	8002812 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800280a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f838 	bl	8002882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b20      	cmp	r3, #32
 800281e:	d10e      	bne.n	800283e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b20      	cmp	r3, #32
 800282c:	d107      	bne.n	800283e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0220 	mvn.w	r2, #32
 8002836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f89b 	bl	8002974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <TIM_Base_SetConfig+0xcc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d003      	beq.n	80028b8 <TIM_Base_SetConfig+0x20>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d108      	bne.n	80028ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a25      	ldr	r2, [pc, #148]	; (8002964 <TIM_Base_SetConfig+0xcc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00f      	beq.n	80028f2 <TIM_Base_SetConfig+0x5a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d00b      	beq.n	80028f2 <TIM_Base_SetConfig+0x5a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a22      	ldr	r2, [pc, #136]	; (8002968 <TIM_Base_SetConfig+0xd0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <TIM_Base_SetConfig+0x5a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a21      	ldr	r2, [pc, #132]	; (800296c <TIM_Base_SetConfig+0xd4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d003      	beq.n	80028f2 <TIM_Base_SetConfig+0x5a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a20      	ldr	r2, [pc, #128]	; (8002970 <TIM_Base_SetConfig+0xd8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d108      	bne.n	8002904 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <TIM_Base_SetConfig+0xcc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00b      	beq.n	8002948 <TIM_Base_SetConfig+0xb0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <TIM_Base_SetConfig+0xd0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <TIM_Base_SetConfig+0xb0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a0c      	ldr	r2, [pc, #48]	; (800296c <TIM_Base_SetConfig+0xd4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d003      	beq.n	8002948 <TIM_Base_SetConfig+0xb0>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <TIM_Base_SetConfig+0xd8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d103      	bne.n	8002950 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	615a      	str	r2, [r3, #20]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40014000 	.word	0x40014000
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800

08002974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e040      	b.n	8002a44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fecc 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8c0 	bl	8002b74 <UART_SetConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e022      	b.n	8002a44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f9ea 	bl	8002de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fa71 	bl	8002f24 <UART_CheckIdleState>
 8002a42:	4603      	mov	r3, r0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	f040 8082 	bne.w	8002b6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_UART_Transmit+0x26>
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07a      	b.n	8002b6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_UART_Transmit+0x38>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e073      	b.n	8002b6c <HAL_UART_Transmit+0x120>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2221      	movs	r2, #33	; 0x21
 8002a98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a9a:	f7fd ffe1 	bl	8000a60 <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	88fa      	ldrh	r2, [r7, #6]
 8002aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab8:	d108      	bne.n	8002acc <HAL_UART_Transmit+0x80>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e003      	b.n	8002ad4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002adc:	e02d      	b.n	8002b3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fa64 	bl	8002fb6 <UART_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e039      	b.n	8002b6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	3302      	adds	r3, #2
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	e008      	b.n	8002b28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1cb      	bne.n	8002ade <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fa30 	bl	8002fb6 <UART_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e005      	b.n	8002b6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b8a      	ldr	r3, [pc, #552]	; (8002dc8 <UART_SetConfig+0x254>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	6979      	ldr	r1, [r7, #20]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a78      	ldr	r2, [pc, #480]	; (8002dcc <UART_SetConfig+0x258>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d120      	bne.n	8002c32 <UART_SetConfig+0xbe>
 8002bf0:	4b77      	ldr	r3, [pc, #476]	; (8002dd0 <UART_SetConfig+0x25c>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d817      	bhi.n	8002c2c <UART_SetConfig+0xb8>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <UART_SetConfig+0x90>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c15 	.word	0x08002c15
 8002c08:	08002c21 	.word	0x08002c21
 8002c0c:	08002c27 	.word	0x08002c27
 8002c10:	08002c1b 	.word	0x08002c1b
 8002c14:	2300      	movs	r3, #0
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e01d      	b.n	8002c56 <UART_SetConfig+0xe2>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	e01a      	b.n	8002c56 <UART_SetConfig+0xe2>
 8002c20:	2304      	movs	r3, #4
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e017      	b.n	8002c56 <UART_SetConfig+0xe2>
 8002c26:	2308      	movs	r3, #8
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e014      	b.n	8002c56 <UART_SetConfig+0xe2>
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e011      	b.n	8002c56 <UART_SetConfig+0xe2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a67      	ldr	r2, [pc, #412]	; (8002dd4 <UART_SetConfig+0x260>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d102      	bne.n	8002c42 <UART_SetConfig+0xce>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	77fb      	strb	r3, [r7, #31]
 8002c40:	e009      	b.n	8002c56 <UART_SetConfig+0xe2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a64      	ldr	r2, [pc, #400]	; (8002dd8 <UART_SetConfig+0x264>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d102      	bne.n	8002c52 <UART_SetConfig+0xde>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e001      	b.n	8002c56 <UART_SetConfig+0xe2>
 8002c52:	2310      	movs	r3, #16
 8002c54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5e:	d15b      	bne.n	8002d18 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002c60:	7ffb      	ldrb	r3, [r7, #31]
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d827      	bhi.n	8002cb6 <UART_SetConfig+0x142>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <UART_SetConfig+0xf8>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002c91 	.word	0x08002c91
 8002c70:	08002c99 	.word	0x08002c99
 8002c74:	08002ca1 	.word	0x08002ca1
 8002c78:	08002cb7 	.word	0x08002cb7
 8002c7c:	08002ca7 	.word	0x08002ca7
 8002c80:	08002cb7 	.word	0x08002cb7
 8002c84:	08002cb7 	.word	0x08002cb7
 8002c88:	08002cb7 	.word	0x08002cb7
 8002c8c:	08002caf 	.word	0x08002caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c90:	f7ff fb8e 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8002c94:	61b8      	str	r0, [r7, #24]
        break;
 8002c96:	e013      	b.n	8002cc0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c98:	f7ff fbac 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8002c9c:	61b8      	str	r0, [r7, #24]
        break;
 8002c9e:	e00f      	b.n	8002cc0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca0:	4b4e      	ldr	r3, [pc, #312]	; (8002ddc <UART_SetConfig+0x268>)
 8002ca2:	61bb      	str	r3, [r7, #24]
        break;
 8002ca4:	e00c      	b.n	8002cc0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca6:	f7ff fb0d 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002caa:	61b8      	str	r0, [r7, #24]
        break;
 8002cac:	e008      	b.n	8002cc0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb2:	61bb      	str	r3, [r7, #24]
        break;
 8002cb4:	e004      	b.n	8002cc0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	77bb      	strb	r3, [r7, #30]
        break;
 8002cbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d074      	beq.n	8002db0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	005a      	lsls	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b0f      	cmp	r3, #15
 8002ce2:	d916      	bls.n	8002d12 <UART_SetConfig+0x19e>
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cea:	d212      	bcs.n	8002d12 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f023 030f 	bic.w	r3, r3, #15
 8002cf4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	89fa      	ldrh	r2, [r7, #14]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	e04e      	b.n	8002db0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	77bb      	strb	r3, [r7, #30]
 8002d16:	e04b      	b.n	8002db0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d18:	7ffb      	ldrb	r3, [r7, #31]
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d827      	bhi.n	8002d6e <UART_SetConfig+0x1fa>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <UART_SetConfig+0x1b0>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08002d51 	.word	0x08002d51
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002d6f 	.word	0x08002d6f
 8002d34:	08002d5f 	.word	0x08002d5f
 8002d38:	08002d6f 	.word	0x08002d6f
 8002d3c:	08002d6f 	.word	0x08002d6f
 8002d40:	08002d6f 	.word	0x08002d6f
 8002d44:	08002d67 	.word	0x08002d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d48:	f7ff fb32 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8002d4c:	61b8      	str	r0, [r7, #24]
        break;
 8002d4e:	e013      	b.n	8002d78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d50:	f7ff fb50 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8002d54:	61b8      	str	r0, [r7, #24]
        break;
 8002d56:	e00f      	b.n	8002d78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d58:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <UART_SetConfig+0x268>)
 8002d5a:	61bb      	str	r3, [r7, #24]
        break;
 8002d5c:	e00c      	b.n	8002d78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5e:	f7ff fab1 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002d62:	61b8      	str	r0, [r7, #24]
        break;
 8002d64:	e008      	b.n	8002d78 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6a:	61bb      	str	r3, [r7, #24]
        break;
 8002d6c:	e004      	b.n	8002d78 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	77bb      	strb	r3, [r7, #30]
        break;
 8002d76:	bf00      	nop
    }

    if (pclk != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d018      	beq.n	8002db0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	085a      	lsrs	r2, r3, #1
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	441a      	add	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b0f      	cmp	r3, #15
 8002d98:	d908      	bls.n	8002dac <UART_SetConfig+0x238>
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d204      	bcs.n	8002dac <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	e001      	b.n	8002db0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002dbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	efff69f3 	.word	0xefff69f3
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	40004800 	.word	0x40004800
 8002ddc:	007a1200 	.word	0x007a1200

08002de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01a      	beq.n	8002ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ede:	d10a      	bne.n	8002ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	605a      	str	r2, [r3, #4]
  }
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f34:	f7fd fd94 	bl	8000a60 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d10e      	bne.n	8002f66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f82d 	bl	8002fb6 <UART_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e023      	b.n	8002fae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d10e      	bne.n	8002f92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f817 	bl	8002fb6 <UART_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e00d      	b.n	8002fae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b09c      	sub	sp, #112	; 0x70
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc6:	e0a5      	b.n	8003114 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	f000 80a1 	beq.w	8003114 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fd fd45 	bl	8000a60 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d13e      	bne.n	8003066 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003008:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800300c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e6      	bne.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3308      	adds	r3, #8
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	663b      	str	r3, [r7, #96]	; 0x60
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3308      	adds	r3, #8
 8003038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800303a:	64ba      	str	r2, [r7, #72]	; 0x48
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e5      	bne.n	800301a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e067      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d04f      	beq.n	8003114 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003082:	d147      	bne.n	8003114 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800308c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34
 80030ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e6      	bne.n	800308e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3308      	adds	r3, #8
 80030c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	e853 3f00 	ldrex	r3, [r3]
 80030ce:	613b      	str	r3, [r7, #16]
   return(result);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3308      	adds	r3, #8
 80030de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030e0:	623a      	str	r2, [r7, #32]
 80030e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	69f9      	ldr	r1, [r7, #28]
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	e841 2300 	strex	r3, r2, [r1]
 80030ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e5      	bne.n	80030c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e010      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	429a      	cmp	r2, r3
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	429a      	cmp	r2, r3
 8003130:	f43f af4a 	beq.w	8002fc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3770      	adds	r7, #112	; 0x70
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800314c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003150:	2b84      	cmp	r3, #132	; 0x84
 8003152:	d005      	beq.n	8003160 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003154:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	3303      	adds	r3, #3
 800315e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003160:	68fb      	ldr	r3, [r7, #12]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003172:	f000 faed 	bl	8003750 <vTaskStartScheduler>
  
  return osOK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}

0800317c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800317c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af04      	add	r7, sp, #16
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d020      	beq.n	80031d0 <osThreadCreate+0x54>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01c      	beq.n	80031d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685c      	ldr	r4, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681d      	ldr	r5, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691e      	ldr	r6, [r3, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ffc8 	bl	800313e <makeFreeRtosPriority>
 80031ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031b8:	9202      	str	r2, [sp, #8]
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	9100      	str	r1, [sp, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	4632      	mov	r2, r6
 80031c2:	4629      	mov	r1, r5
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 f8ed 	bl	80033a4 <xTaskCreateStatic>
 80031ca:	4603      	mov	r3, r0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e01c      	b.n	800320a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685c      	ldr	r4, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031dc:	b29e      	uxth	r6, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ffaa 	bl	800313e <makeFreeRtosPriority>
 80031ea:	4602      	mov	r2, r0
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	9200      	str	r2, [sp, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4632      	mov	r2, r6
 80031f8:	4629      	mov	r1, r5
 80031fa:	4620      	mov	r0, r4
 80031fc:	f000 f92e 	bl	800345c <xTaskCreate>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003214 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <osDelay+0x16>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	e000      	b.n	800322c <osDelay+0x18>
 800322a:	2301      	movs	r3, #1
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fa5b 	bl	80036e8 <vTaskDelay>
  
  return osOK;
 8003232:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f103 0208 	add.w	r2, r3, #8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f103 0208 	add.w	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f103 0208 	add.w	r2, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003296:	b480      	push	{r7}
 8003298:	b085      	sub	sp, #20
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d103      	bne.n	80032fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e00c      	b.n	8003318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3308      	adds	r3, #8
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e002      	b.n	800330c <vListInsert+0x2e>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d2f6      	bcs.n	8003306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	601a      	str	r2, [r3, #0]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6892      	ldr	r2, [r2, #8]
 8003366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6852      	ldr	r2, [r2, #4]
 8003370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d103      	bne.n	8003384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1e5a      	subs	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	; 0x38
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <xTaskCreateStatic+0x46>
	__asm volatile
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	61fb      	str	r3, [r7, #28]
}
 80033e6:	bf00      	nop
 80033e8:	e7fe      	b.n	80033e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033ea:	23b4      	movs	r3, #180	; 0xb4
 80033ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2bb4      	cmp	r3, #180	; 0xb4
 80033f2:	d00a      	beq.n	800340a <xTaskCreateStatic+0x66>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	61bb      	str	r3, [r7, #24]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01e      	beq.n	800344e <xTaskCreateStatic+0xaa>
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	2b00      	cmp	r3, #0
 8003414:	d01b      	beq.n	800344e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800341e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	2202      	movs	r2, #2
 8003424:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003428:	2300      	movs	r3, #0
 800342a:	9303      	str	r3, [sp, #12]
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	9302      	str	r3, [sp, #8]
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f851 	bl	80034e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003448:	f000 f8e4 	bl	8003614 <prvAddNewTaskToReadyList>
 800344c:	e001      	b.n	8003452 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003452:	697b      	ldr	r3, [r7, #20]
	}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08c      	sub	sp, #48	; 0x30
 8003460:	af04      	add	r7, sp, #16
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fef9 	bl	8004268 <pvPortMalloc>
 8003476:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00e      	beq.n	800349c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800347e:	20b4      	movs	r0, #180	; 0xb4
 8003480:	f000 fef2 	bl	8004268 <pvPortMalloc>
 8003484:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
 8003492:	e005      	b.n	80034a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003494:	6978      	ldr	r0, [r7, #20]
 8003496:	f000 ffab 	bl	80043f0 <vPortFree>
 800349a:	e001      	b.n	80034a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800349c:	2300      	movs	r3, #0
 800349e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d017      	beq.n	80034d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	2300      	movs	r3, #0
 80034b2:	9303      	str	r3, [sp, #12]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f80f 	bl	80034e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034ca:	69f8      	ldr	r0, [r7, #28]
 80034cc:	f000 f8a2 	bl	8003614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034d0:	2301      	movs	r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e002      	b.n	80034dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034dc:	69bb      	ldr	r3, [r7, #24]
	}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80034f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003500:	3b01      	subs	r3, #1
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	f023 0307 	bic.w	r3, r3, #7
 800350e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <prvInitialiseNewTask+0x48>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	617b      	str	r3, [r7, #20]
}
 800352c:	bf00      	nop
 800352e:	e7fe      	b.n	800352e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	e012      	b.n	800355c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	7819      	ldrb	r1, [r3, #0]
 800353e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	4413      	add	r3, r2
 8003544:	3334      	adds	r3, #52	; 0x34
 8003546:	460a      	mov	r2, r1
 8003548:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b0f      	cmp	r3, #15
 8003560:	d9e9      	bls.n	8003536 <prvInitialiseNewTask+0x4e>
 8003562:	e000      	b.n	8003566 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003564:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	2b06      	cmp	r3, #6
 8003572:	d901      	bls.n	8003578 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003574:	2306      	movs	r3, #6
 8003576:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800357c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2200      	movs	r2, #0
 8003588:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fe74 	bl	800327c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	3318      	adds	r3, #24
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fe6f 	bl	800327c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	f1c3 0207 	rsb	r2, r3, #7
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	334c      	adds	r3, #76	; 0x4c
 80035c8:	2260      	movs	r2, #96	; 0x60
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 f85f 	bl	8004690 <memset>
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <prvInitialiseNewTask+0x120>)
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <prvInitialiseNewTask+0x124>)
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <prvInitialiseNewTask+0x128>)
 80035e2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	69b8      	ldr	r0, [r7, #24]
 80035ea:	f000 fc2b 	bl	8003e44 <pxPortInitialiseStack>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003600:	bf00      	nop
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	080051b4 	.word	0x080051b4
 800360c:	080051d4 	.word	0x080051d4
 8003610:	08005194 	.word	0x08005194

08003614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800361c:	f000 fd42 	bl	80040a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <prvAddNewTaskToReadyList+0xb8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	4a29      	ldr	r2, [pc, #164]	; (80036cc <prvAddNewTaskToReadyList+0xb8>)
 8003628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003632:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <prvAddNewTaskToReadyList+0xb8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d110      	bne.n	8003662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003640:	f000 fad2 	bl	8003be8 <prvInitialiseTaskLists>
 8003644:	e00d      	b.n	8003662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003646:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <prvAddNewTaskToReadyList+0xc0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	429a      	cmp	r2, r3
 800365a:	d802      	bhi.n	8003662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003662:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <prvAddNewTaskToReadyList+0xc4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3301      	adds	r3, #1
 8003668:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <prvAddNewTaskToReadyList+0xc4>)
 800366a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	2201      	movs	r2, #1
 8003672:	409a      	lsls	r2, r3
 8003674:	4b19      	ldr	r3, [pc, #100]	; (80036dc <prvAddNewTaskToReadyList+0xc8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <prvAddNewTaskToReadyList+0xc8>)
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <prvAddNewTaskToReadyList+0xcc>)
 800368c:	441a      	add	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f7ff fdfe 	bl	8003296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800369a:	f000 fd33 	bl	8004104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <prvAddNewTaskToReadyList+0xc0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00e      	beq.n	80036c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <prvAddNewTaskToReadyList+0xbc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d207      	bcs.n	80036c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <prvAddNewTaskToReadyList+0xd0>)
 80036b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	2000052c 	.word	0x2000052c
 80036d0:	2000042c 	.word	0x2000042c
 80036d4:	20000538 	.word	0x20000538
 80036d8:	20000548 	.word	0x20000548
 80036dc:	20000534 	.word	0x20000534
 80036e0:	20000430 	.word	0x20000430
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d017      	beq.n	800372a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <vTaskDelay+0x60>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <vTaskDelay+0x30>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	60bb      	str	r3, [r7, #8]
}
 8003714:	bf00      	nop
 8003716:	e7fe      	b.n	8003716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003718:	f000 f884 	bl	8003824 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800371c:	2100      	movs	r1, #0
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fb2a 	bl	8003d78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003724:	f000 f88c 	bl	8003840 <xTaskResumeAll>
 8003728:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <vTaskDelay+0x64>)
 8003732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20000554 	.word	0x20000554
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800375e:	463a      	mov	r2, r7
 8003760:	1d39      	adds	r1, r7, #4
 8003762:	f107 0308 	add.w	r3, r7, #8
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc fd82 	bl	8000270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	9202      	str	r2, [sp, #8]
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	2300      	movs	r3, #0
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2300      	movs	r3, #0
 800377c:	460a      	mov	r2, r1
 800377e:	4921      	ldr	r1, [pc, #132]	; (8003804 <vTaskStartScheduler+0xb4>)
 8003780:	4821      	ldr	r0, [pc, #132]	; (8003808 <vTaskStartScheduler+0xb8>)
 8003782:	f7ff fe0f 	bl	80033a4 <xTaskCreateStatic>
 8003786:	4603      	mov	r3, r0
 8003788:	4a20      	ldr	r2, [pc, #128]	; (800380c <vTaskStartScheduler+0xbc>)
 800378a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800378c:	4b1f      	ldr	r3, [pc, #124]	; (800380c <vTaskStartScheduler+0xbc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003794:	2301      	movs	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e001      	b.n	800379e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d11b      	bne.n	80037dc <vTaskStartScheduler+0x8c>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	613b      	str	r3, [r7, #16]
}
 80037b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037b8:	4b15      	ldr	r3, [pc, #84]	; (8003810 <vTaskStartScheduler+0xc0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	334c      	adds	r3, #76	; 0x4c
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <vTaskStartScheduler+0xc4>)
 80037c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <vTaskStartScheduler+0xc8>)
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295
 80037c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037ca:	4b14      	ldr	r3, [pc, #80]	; (800381c <vTaskStartScheduler+0xcc>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <vTaskStartScheduler+0xd0>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037d6:	f000 fbc3 	bl	8003f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037da:	e00e      	b.n	80037fa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d10a      	bne.n	80037fa <vTaskStartScheduler+0xaa>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	60fb      	str	r3, [r7, #12]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <vTaskStartScheduler+0xa8>
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	08005154 	.word	0x08005154
 8003808:	08003bb9 	.word	0x08003bb9
 800380c:	20000550 	.word	0x20000550
 8003810:	2000042c 	.word	0x2000042c
 8003814:	20000010 	.word	0x20000010
 8003818:	2000054c 	.word	0x2000054c
 800381c:	20000538 	.word	0x20000538
 8003820:	20000530 	.word	0x20000530

08003824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <vTaskSuspendAll+0x18>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a03      	ldr	r2, [pc, #12]	; (800383c <vTaskSuspendAll+0x18>)
 8003830:	6013      	str	r3, [r2, #0]
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	20000554 	.word	0x20000554

08003840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800384e:	4b41      	ldr	r3, [pc, #260]	; (8003954 <xTaskResumeAll+0x114>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <xTaskResumeAll+0x2c>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	603b      	str	r3, [r7, #0]
}
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800386c:	f000 fc1a 	bl	80040a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003870:	4b38      	ldr	r3, [pc, #224]	; (8003954 <xTaskResumeAll+0x114>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	4a37      	ldr	r2, [pc, #220]	; (8003954 <xTaskResumeAll+0x114>)
 8003878:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <xTaskResumeAll+0x114>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d161      	bne.n	8003946 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003882:	4b35      	ldr	r3, [pc, #212]	; (8003958 <xTaskResumeAll+0x118>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d05d      	beq.n	8003946 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800388a:	e02e      	b.n	80038ea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800388c:	4b33      	ldr	r3, [pc, #204]	; (800395c <xTaskResumeAll+0x11c>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3318      	adds	r3, #24
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fd59 	bl	8003350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fd54 	bl	8003350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	2201      	movs	r2, #1
 80038ae:	409a      	lsls	r2, r3
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <xTaskResumeAll+0x120>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <xTaskResumeAll+0x120>)
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4a27      	ldr	r2, [pc, #156]	; (8003964 <xTaskResumeAll+0x124>)
 80038c8:	441a      	add	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7ff fce0 	bl	8003296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <xTaskResumeAll+0x128>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <xTaskResumeAll+0x12c>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <xTaskResumeAll+0x11c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1cc      	bne.n	800388c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038f8:	f000 fa18 	bl	8003d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038fc:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <xTaskResumeAll+0x130>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003908:	f000 f836 	bl	8003978 <xTaskIncrementTick>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <xTaskResumeAll+0x12c>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f1      	bne.n	8003908 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <xTaskResumeAll+0x130>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <xTaskResumeAll+0x12c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003932:	2301      	movs	r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003936:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <xTaskResumeAll+0x134>)
 8003938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003946:	f000 fbdd 	bl	8004104 <vPortExitCritical>

	return xAlreadyYielded;
 800394a:	68bb      	ldr	r3, [r7, #8]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000554 	.word	0x20000554
 8003958:	2000052c 	.word	0x2000052c
 800395c:	200004ec 	.word	0x200004ec
 8003960:	20000534 	.word	0x20000534
 8003964:	20000430 	.word	0x20000430
 8003968:	2000042c 	.word	0x2000042c
 800396c:	20000540 	.word	0x20000540
 8003970:	2000053c 	.word	0x2000053c
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003982:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <xTaskIncrementTick+0x150>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 808d 	bne.w	8003aa6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800398c:	4b4f      	ldr	r3, [pc, #316]	; (8003acc <xTaskIncrementTick+0x154>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003994:	4a4d      	ldr	r2, [pc, #308]	; (8003acc <xTaskIncrementTick+0x154>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d120      	bne.n	80039e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039a0:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	603b      	str	r3, [r7, #0]
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <xTaskIncrementTick+0x46>
 80039c0:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <xTaskIncrementTick+0x15c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a41      	ldr	r2, [pc, #260]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4a41      	ldr	r2, [pc, #260]	; (8003ad4 <xTaskIncrementTick+0x15c>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <xTaskIncrementTick+0x160>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	4a3f      	ldr	r2, [pc, #252]	; (8003ad8 <xTaskIncrementTick+0x160>)
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	f000 f9a5 	bl	8003d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039e2:	4b3e      	ldr	r3, [pc, #248]	; (8003adc <xTaskIncrementTick+0x164>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d34d      	bcc.n	8003a88 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ec:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <xTaskIncrementTick+0x82>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <xTaskIncrementTick+0x84>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a00:	4b36      	ldr	r3, [pc, #216]	; (8003adc <xTaskIncrementTick+0x164>)
 8003a02:	f04f 32ff 	mov.w	r2, #4294967295
 8003a06:	601a      	str	r2, [r3, #0]
					break;
 8003a08:	e03e      	b.n	8003a88 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <xTaskIncrementTick+0x158>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d203      	bcs.n	8003a2a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a22:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <xTaskIncrementTick+0x164>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6013      	str	r3, [r2, #0]
						break;
 8003a28:	e02e      	b.n	8003a88 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fc8e 	bl	8003350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fc85 	bl	8003350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <xTaskIncrementTick+0x168>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <xTaskIncrementTick+0x168>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <xTaskIncrementTick+0x16c>)
 8003a66:	441a      	add	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7ff fc11 	bl	8003296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <xTaskIncrementTick+0x170>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3b4      	bcc.n	80039ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a82:	2301      	movs	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a86:	e7b1      	b.n	80039ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a88:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <xTaskIncrementTick+0x170>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8e:	4915      	ldr	r1, [pc, #84]	; (8003ae4 <xTaskIncrementTick+0x16c>)
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d907      	bls.n	8003ab0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e004      	b.n	8003ab0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <xTaskIncrementTick+0x174>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <xTaskIncrementTick+0x174>)
 8003aae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <xTaskIncrementTick+0x178>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003abc:	697b      	ldr	r3, [r7, #20]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000554 	.word	0x20000554
 8003acc:	20000530 	.word	0x20000530
 8003ad0:	200004e4 	.word	0x200004e4
 8003ad4:	200004e8 	.word	0x200004e8
 8003ad8:	20000544 	.word	0x20000544
 8003adc:	2000054c 	.word	0x2000054c
 8003ae0:	20000534 	.word	0x20000534
 8003ae4:	20000430 	.word	0x20000430
 8003ae8:	2000042c 	.word	0x2000042c
 8003aec:	2000053c 	.word	0x2000053c
 8003af0:	20000540 	.word	0x20000540

08003af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003afa:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <vTaskSwitchContext+0xac>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <vTaskSwitchContext+0xb0>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b08:	e044      	b.n	8003b94 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003b0a:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <vTaskSwitchContext+0xb0>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <vTaskSwitchContext+0xb4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	f1c3 031f 	rsb	r3, r3, #31
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	4921      	ldr	r1, [pc, #132]	; (8003bac <vTaskSwitchContext+0xb8>)
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	607b      	str	r3, [r7, #4]
}
 8003b4c:	bf00      	nop
 8003b4e:	e7fe      	b.n	8003b4e <vTaskSwitchContext+0x5a>
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4a14      	ldr	r2, [pc, #80]	; (8003bac <vTaskSwitchContext+0xb8>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	3308      	adds	r3, #8
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d104      	bne.n	8003b80 <vTaskSwitchContext+0x8c>
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <vTaskSwitchContext+0xbc>)
 8003b88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <vTaskSwitchContext+0xbc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	334c      	adds	r3, #76	; 0x4c
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <vTaskSwitchContext+0xc0>)
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	20000554 	.word	0x20000554
 8003ba4:	20000540 	.word	0x20000540
 8003ba8:	20000534 	.word	0x20000534
 8003bac:	20000430 	.word	0x20000430
 8003bb0:	2000042c 	.word	0x2000042c
 8003bb4:	20000010 	.word	0x20000010

08003bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bc0:	f000 f852 	bl	8003c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <prvIdleTask+0x28>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d9f9      	bls.n	8003bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <prvIdleTask+0x2c>)
 8003bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bdc:	e7f0      	b.n	8003bc0 <prvIdleTask+0x8>
 8003bde:	bf00      	nop
 8003be0:	20000430 	.word	0x20000430
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	e00c      	b.n	8003c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <prvInitialiseTaskLists+0x60>)
 8003c00:	4413      	add	r3, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fb1a 	bl	800323c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d9ef      	bls.n	8003bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c14:	480d      	ldr	r0, [pc, #52]	; (8003c4c <prvInitialiseTaskLists+0x64>)
 8003c16:	f7ff fb11 	bl	800323c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c1a:	480d      	ldr	r0, [pc, #52]	; (8003c50 <prvInitialiseTaskLists+0x68>)
 8003c1c:	f7ff fb0e 	bl	800323c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c20:	480c      	ldr	r0, [pc, #48]	; (8003c54 <prvInitialiseTaskLists+0x6c>)
 8003c22:	f7ff fb0b 	bl	800323c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c26:	480c      	ldr	r0, [pc, #48]	; (8003c58 <prvInitialiseTaskLists+0x70>)
 8003c28:	f7ff fb08 	bl	800323c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c2c:	480b      	ldr	r0, [pc, #44]	; (8003c5c <prvInitialiseTaskLists+0x74>)
 8003c2e:	f7ff fb05 	bl	800323c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <prvInitialiseTaskLists+0x78>)
 8003c34:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <prvInitialiseTaskLists+0x64>)
 8003c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <prvInitialiseTaskLists+0x7c>)
 8003c3a:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <prvInitialiseTaskLists+0x68>)
 8003c3c:	601a      	str	r2, [r3, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000430 	.word	0x20000430
 8003c4c:	200004bc 	.word	0x200004bc
 8003c50:	200004d0 	.word	0x200004d0
 8003c54:	200004ec 	.word	0x200004ec
 8003c58:	20000500 	.word	0x20000500
 8003c5c:	20000518 	.word	0x20000518
 8003c60:	200004e4 	.word	0x200004e4
 8003c64:	200004e8 	.word	0x200004e8

08003c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c6e:	e019      	b.n	8003ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c70:	f000 fa18 	bl	80040a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c74:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <prvCheckTasksWaitingTermination+0x50>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fb65 	bl	8003350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <prvCheckTasksWaitingTermination+0x54>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <prvCheckTasksWaitingTermination+0x54>)
 8003c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <prvCheckTasksWaitingTermination+0x58>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <prvCheckTasksWaitingTermination+0x58>)
 8003c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c9a:	f000 fa33 	bl	8004104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f810 	bl	8003cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <prvCheckTasksWaitingTermination+0x58>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e1      	bne.n	8003c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000500 	.word	0x20000500
 8003cbc:	2000052c 	.word	0x2000052c
 8003cc0:	20000514 	.word	0x20000514

08003cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	334c      	adds	r3, #76	; 0x4c
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fd87 	bl	80047e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d108      	bne.n	8003cf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb83 	bl	80043f0 <vPortFree>
				vPortFree( pxTCB );
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fb80 	bl	80043f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cf0:	e018      	b.n	8003d24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d103      	bne.n	8003d04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fb77 	bl	80043f0 <vPortFree>
	}
 8003d02:	e00f      	b.n	8003d24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d00a      	beq.n	8003d24 <prvDeleteTCB+0x60>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	60fb      	str	r3, [r7, #12]
}
 8003d20:	bf00      	nop
 8003d22:	e7fe      	b.n	8003d22 <prvDeleteTCB+0x5e>
	}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <prvResetNextTaskUnblockTime+0x44>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <prvResetNextTaskUnblockTime+0x14>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <prvResetNextTaskUnblockTime+0x16>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <prvResetNextTaskUnblockTime+0x48>)
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d4e:	e008      	b.n	8003d62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <prvResetNextTaskUnblockTime+0x44>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <prvResetNextTaskUnblockTime+0x48>)
 8003d60:	6013      	str	r3, [r2, #0]
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	200004e4 	.word	0x200004e4
 8003d74:	2000054c 	.word	0x2000054c

08003d78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d88:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fade 	bl	8003350 <uxListRemove>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	2201      	movs	r2, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43da      	mvns	r2, r3
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4013      	ands	r3, r2
 8003dae:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003db0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d10a      	bne.n	8003dd0 <prvAddCurrentTaskToDelayedList+0x58>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	481a      	ldr	r0, [pc, #104]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003dca:	f7ff fa64 	bl	8003296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003dce:	e026      	b.n	8003e1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d209      	bcs.n	8003dfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f7ff fa72 	bl	80032de <vListInsert>
}
 8003dfa:	e010      	b.n	8003e1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7ff fa68 	bl	80032de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d202      	bcs.n	8003e1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e18:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6013      	str	r3, [r2, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000530 	.word	0x20000530
 8003e2c:	2000042c 	.word	0x2000042c
 8003e30:	20000534 	.word	0x20000534
 8003e34:	20000518 	.word	0x20000518
 8003e38:	200004e8 	.word	0x200004e8
 8003e3c:	200004e4 	.word	0x200004e4
 8003e40:	2000054c 	.word	0x2000054c

08003e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3b04      	subs	r3, #4
 8003e54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3b04      	subs	r3, #4
 8003e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f023 0201 	bic.w	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3b04      	subs	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e74:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <pxPortInitialiseStack+0x64>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3b14      	subs	r3, #20
 8003e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b04      	subs	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f06f 0202 	mvn.w	r2, #2
 8003e92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3b20      	subs	r3, #32
 8003e98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	08003ead 	.word	0x08003ead

08003eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <prvTaskExitError+0x54>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d00a      	beq.n	8003ed6 <prvTaskExitError+0x2a>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	60fb      	str	r3, [r7, #12]
}
 8003ed2:	bf00      	nop
 8003ed4:	e7fe      	b.n	8003ed4 <prvTaskExitError+0x28>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	60bb      	str	r3, [r7, #8]
}
 8003ee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003eea:	bf00      	nop
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0fc      	beq.n	8003eec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	2000000c 	.word	0x2000000c
	...

08003f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <pxCurrentTCBConst2>)
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	6808      	ldr	r0, [r1, #0]
 8003f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f1a:	f380 8809 	msr	PSP, r0
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f380 8811 	msr	BASEPRI, r0
 8003f2a:	4770      	bx	lr
 8003f2c:	f3af 8000 	nop.w

08003f30 <pxCurrentTCBConst2>:
 8003f30:	2000042c 	.word	0x2000042c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop

08003f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f38:	4808      	ldr	r0, [pc, #32]	; (8003f5c <prvPortStartFirstTask+0x24>)
 8003f3a:	6800      	ldr	r0, [r0, #0]
 8003f3c:	6800      	ldr	r0, [r0, #0]
 8003f3e:	f380 8808 	msr	MSP, r0
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f380 8814 	msr	CONTROL, r0
 8003f4a:	b662      	cpsie	i
 8003f4c:	b661      	cpsie	f
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	df00      	svc	0
 8003f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f5a:	bf00      	nop
 8003f5c:	e000ed08 	.word	0xe000ed08

08003f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f66:	4b46      	ldr	r3, [pc, #280]	; (8004080 <xPortStartScheduler+0x120>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a46      	ldr	r2, [pc, #280]	; (8004084 <xPortStartScheduler+0x124>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d10a      	bne.n	8003f86 <xPortStartScheduler+0x26>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	613b      	str	r3, [r7, #16]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f86:	4b3e      	ldr	r3, [pc, #248]	; (8004080 <xPortStartScheduler+0x120>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a3f      	ldr	r2, [pc, #252]	; (8004088 <xPortStartScheduler+0x128>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10a      	bne.n	8003fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	60fb      	str	r3, [r7, #12]
}
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fa6:	4b39      	ldr	r3, [pc, #228]	; (800408c <xPortStartScheduler+0x12c>)
 8003fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	22ff      	movs	r2, #255	; 0xff
 8003fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <xPortStartScheduler+0x130>)
 8003fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fce:	4b31      	ldr	r3, [pc, #196]	; (8004094 <xPortStartScheduler+0x134>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fd4:	e009      	b.n	8003fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <xPortStartScheduler+0x134>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	4a2d      	ldr	r2, [pc, #180]	; (8004094 <xPortStartScheduler+0x134>)
 8003fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d0ef      	beq.n	8003fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ff6:	4b27      	ldr	r3, [pc, #156]	; (8004094 <xPortStartScheduler+0x134>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1c3 0307 	rsb	r3, r3, #7
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d00a      	beq.n	8004018 <xPortStartScheduler+0xb8>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	60bb      	str	r3, [r7, #8]
}
 8004014:	bf00      	nop
 8004016:	e7fe      	b.n	8004016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004018:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <xPortStartScheduler+0x134>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <xPortStartScheduler+0x134>)
 8004020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004022:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <xPortStartScheduler+0x134>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800402a:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <xPortStartScheduler+0x134>)
 800402c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004036:	4b18      	ldr	r3, [pc, #96]	; (8004098 <xPortStartScheduler+0x138>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a17      	ldr	r2, [pc, #92]	; (8004098 <xPortStartScheduler+0x138>)
 800403c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <xPortStartScheduler+0x138>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a14      	ldr	r2, [pc, #80]	; (8004098 <xPortStartScheduler+0x138>)
 8004048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800404c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800404e:	f000 f8dd 	bl	800420c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <xPortStartScheduler+0x13c>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004058:	f000 f8fc 	bl	8004254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800405c:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <xPortStartScheduler+0x140>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <xPortStartScheduler+0x140>)
 8004062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004068:	f7ff ff66 	bl	8003f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800406c:	f7ff fd42 	bl	8003af4 <vTaskSwitchContext>
	prvTaskExitError();
 8004070:	f7ff ff1c 	bl	8003eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	e000ed00 	.word	0xe000ed00
 8004084:	410fc271 	.word	0x410fc271
 8004088:	410fc270 	.word	0x410fc270
 800408c:	e000e400 	.word	0xe000e400
 8004090:	20000558 	.word	0x20000558
 8004094:	2000055c 	.word	0x2000055c
 8004098:	e000ed20 	.word	0xe000ed20
 800409c:	2000000c 	.word	0x2000000c
 80040a0:	e000ef34 	.word	0xe000ef34

080040a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	607b      	str	r3, [r7, #4]
}
 80040bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <vPortEnterCritical+0x58>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3301      	adds	r3, #1
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <vPortEnterCritical+0x58>)
 80040c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <vPortEnterCritical+0x58>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d10f      	bne.n	80040f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <vPortEnterCritical+0x5c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	603b      	str	r3, [r7, #0]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <vPortEnterCritical+0x4a>
	}
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	2000000c 	.word	0x2000000c
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <vPortExitCritical+0x50>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <vPortExitCritical+0x24>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	607b      	str	r3, [r7, #4]
}
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <vPortExitCritical+0x50>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <vPortExitCritical+0x50>)
 8004130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <vPortExitCritical+0x50>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <vPortExitCritical+0x42>
 800413a:	2300      	movs	r3, #0
 800413c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	2000000c 	.word	0x2000000c
	...

08004160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004160:	f3ef 8009 	mrs	r0, PSP
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <pxCurrentTCBConst>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f01e 0f10 	tst.w	lr, #16
 8004170:	bf08      	it	eq
 8004172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004184:	f380 8811 	msr	BASEPRI, r0
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f7ff fcb0 	bl	8003af4 <vTaskSwitchContext>
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f380 8811 	msr	BASEPRI, r0
 800419c:	bc09      	pop	{r0, r3}
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	6808      	ldr	r0, [r1, #0]
 80041a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a6:	f01e 0f10 	tst.w	lr, #16
 80041aa:	bf08      	it	eq
 80041ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041b0:	f380 8809 	msr	PSP, r0
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	f3af 8000 	nop.w

080041c0 <pxCurrentTCBConst>:
 80041c0:	2000042c 	.word	0x2000042c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
}
 80041e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041e2:	f7ff fbc9 	bl	8003978 <xTaskIncrementTick>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <SysTick_Handler+0x40>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f383 8811 	msr	BASEPRI, r3
}
 80041fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004200:	bf00      	nop
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <vPortSetupTimerInterrupt+0x34>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <vPortSetupTimerInterrupt+0x38>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <vPortSetupTimerInterrupt+0x3c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <vPortSetupTimerInterrupt+0x40>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	4a09      	ldr	r2, [pc, #36]	; (8004250 <vPortSetupTimerInterrupt+0x44>)
 800422a:	3b01      	subs	r3, #1
 800422c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800422e:	4b04      	ldr	r3, [pc, #16]	; (8004240 <vPortSetupTimerInterrupt+0x34>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e010 	.word	0xe000e010
 8004244:	e000e018 	.word	0xe000e018
 8004248:	20000000 	.word	0x20000000
 800424c:	10624dd3 	.word	0x10624dd3
 8004250:	e000e014 	.word	0xe000e014

08004254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004264 <vPortEnableVFP+0x10>
 8004258:	6801      	ldr	r1, [r0, #0]
 800425a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800425e:	6001      	str	r1, [r0, #0]
 8004260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004262:	bf00      	nop
 8004264:	e000ed88 	.word	0xe000ed88

08004268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004274:	f7ff fad6 	bl	8003824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004278:	4b58      	ldr	r3, [pc, #352]	; (80043dc <pvPortMalloc+0x174>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004280:	f000 f910 	bl	80044a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004284:	4b56      	ldr	r3, [pc, #344]	; (80043e0 <pvPortMalloc+0x178>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	f040 808e 	bne.w	80043ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01d      	beq.n	80042d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004298:	2208      	movs	r2, #8
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d014      	beq.n	80042d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f023 0307 	bic.w	r3, r3, #7
 80042b0:	3308      	adds	r3, #8
 80042b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <pvPortMalloc+0x6c>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	617b      	str	r3, [r7, #20]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d069      	beq.n	80043ae <pvPortMalloc+0x146>
 80042da:	4b42      	ldr	r3, [pc, #264]	; (80043e4 <pvPortMalloc+0x17c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d864      	bhi.n	80043ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042e4:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <pvPortMalloc+0x180>)
 80042e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042e8:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <pvPortMalloc+0x180>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042ee:	e004      	b.n	80042fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d903      	bls.n	800430c <pvPortMalloc+0xa4>
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f1      	bne.n	80042f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800430c:	4b33      	ldr	r3, [pc, #204]	; (80043dc <pvPortMalloc+0x174>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004312:	429a      	cmp	r2, r3
 8004314:	d04b      	beq.n	80043ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2208      	movs	r2, #8
 800431c:	4413      	add	r3, r2
 800431e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	1ad2      	subs	r2, r2, r3
 8004330:	2308      	movs	r3, #8
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	429a      	cmp	r2, r3
 8004336:	d91f      	bls.n	8004378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <pvPortMalloc+0xf8>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	613b      	str	r3, [r7, #16]
}
 800435c:	bf00      	nop
 800435e:	e7fe      	b.n	800435e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	1ad2      	subs	r2, r2, r3
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004372:	69b8      	ldr	r0, [r7, #24]
 8004374:	f000 f8f8 	bl	8004568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <pvPortMalloc+0x17c>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <pvPortMalloc+0x17c>)
 8004384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <pvPortMalloc+0x17c>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b18      	ldr	r3, [pc, #96]	; (80043ec <pvPortMalloc+0x184>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d203      	bcs.n	800439a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004392:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <pvPortMalloc+0x17c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <pvPortMalloc+0x184>)
 8004398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <pvPortMalloc+0x178>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80043ae:	f7ff fa47 	bl	8003840 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <pvPortMalloc+0x16a>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	60fb      	str	r3, [r7, #12]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <pvPortMalloc+0x168>
	return pvReturn;
 80043d2:	69fb      	ldr	r3, [r7, #28]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20001168 	.word	0x20001168
 80043e0:	20001174 	.word	0x20001174
 80043e4:	2000116c 	.word	0x2000116c
 80043e8:	20001160 	.word	0x20001160
 80043ec:	20001170 	.word	0x20001170

080043f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d048      	beq.n	8004494 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004402:	2308      	movs	r3, #8
 8004404:	425b      	negs	r3, r3
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4413      	add	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	4b21      	ldr	r3, [pc, #132]	; (800449c <vPortFree+0xac>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <vPortFree+0x44>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	60fb      	str	r3, [r7, #12]
}
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <vPortFree+0x62>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60bb      	str	r3, [r7, #8]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <vPortFree+0xac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d019      	beq.n	8004494 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d115      	bne.n	8004494 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <vPortFree+0xac>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004478:	f7ff f9d4 	bl	8003824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <vPortFree+0xb0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4413      	add	r3, r2
 8004486:	4a06      	ldr	r2, [pc, #24]	; (80044a0 <vPortFree+0xb0>)
 8004488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800448a:	6938      	ldr	r0, [r7, #16]
 800448c:	f000 f86c 	bl	8004568 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004490:	f7ff f9d6 	bl	8003840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004494:	bf00      	nop
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20001174 	.word	0x20001174
 80044a0:	2000116c 	.word	0x2000116c

080044a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <prvHeapInit+0xac>)
 80044b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3307      	adds	r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0307 	bic.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <prvHeapInit+0xac>)
 80044d4:	4413      	add	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044dc:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <prvHeapInit+0xb0>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <prvHeapInit+0xb0>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	4413      	add	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044f0:	2208      	movs	r2, #8
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0307 	bic.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <prvHeapInit+0xb4>)
 8004504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004506:	4b14      	ldr	r3, [pc, #80]	; (8004558 <prvHeapInit+0xb4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <prvHeapInit+0xb4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	1ad2      	subs	r2, r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <prvHeapInit+0xb4>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <prvHeapInit+0xb8>)
 8004532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <prvHeapInit+0xbc>)
 800453a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <prvHeapInit+0xc0>)
 800453e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	20000560 	.word	0x20000560
 8004554:	20001160 	.word	0x20001160
 8004558:	20001168 	.word	0x20001168
 800455c:	20001170 	.word	0x20001170
 8004560:	2000116c 	.word	0x2000116c
 8004564:	20001174 	.word	0x20001174

08004568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004570:	4b28      	ldr	r3, [pc, #160]	; (8004614 <prvInsertBlockIntoFreeList+0xac>)
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e002      	b.n	800457c <prvInsertBlockIntoFreeList+0x14>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	429a      	cmp	r2, r3
 8004584:	d8f7      	bhi.n	8004576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4413      	add	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d108      	bne.n	80045aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	441a      	add	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	441a      	add	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d118      	bne.n	80045f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <prvInsertBlockIntoFreeList+0xb0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d00d      	beq.n	80045e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e008      	b.n	80045f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <prvInsertBlockIntoFreeList+0xb0>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e003      	b.n	80045f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d002      	beq.n	8004606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20001160 	.word	0x20001160
 8004618:	20001168 	.word	0x20001168

0800461c <__errno>:
 800461c:	4b01      	ldr	r3, [pc, #4]	; (8004624 <__errno+0x8>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000010 	.word	0x20000010

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2600      	movs	r6, #0
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f000 fcf8 	bl	8005030 <_init>
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2600      	movs	r6, #0
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	08005228 	.word	0x08005228
 8004664:	08005228 	.word	0x08005228
 8004668:	08005228 	.word	0x08005228
 800466c:	0800522c 	.word	0x0800522c

08004670 <__retarget_lock_acquire_recursive>:
 8004670:	4770      	bx	lr

08004672 <__retarget_lock_release_recursive>:
 8004672:	4770      	bx	lr

08004674 <memcpy>:
 8004674:	440a      	add	r2, r1
 8004676:	4291      	cmp	r1, r2
 8004678:	f100 33ff 	add.w	r3, r0, #4294967295
 800467c:	d100      	bne.n	8004680 <memcpy+0xc>
 800467e:	4770      	bx	lr
 8004680:	b510      	push	{r4, lr}
 8004682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800468a:	4291      	cmp	r1, r2
 800468c:	d1f9      	bne.n	8004682 <memcpy+0xe>
 800468e:	bd10      	pop	{r4, pc}

08004690 <memset>:
 8004690:	4402      	add	r2, r0
 8004692:	4603      	mov	r3, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <sbrk_aligned>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	4e0e      	ldr	r6, [pc, #56]	; (80046dc <sbrk_aligned+0x3c>)
 80046a4:	460c      	mov	r4, r1
 80046a6:	6831      	ldr	r1, [r6, #0]
 80046a8:	4605      	mov	r5, r0
 80046aa:	b911      	cbnz	r1, 80046b2 <sbrk_aligned+0x12>
 80046ac:	f000 f8f6 	bl	800489c <_sbrk_r>
 80046b0:	6030      	str	r0, [r6, #0]
 80046b2:	4621      	mov	r1, r4
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f8f1 	bl	800489c <_sbrk_r>
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	d00a      	beq.n	80046d4 <sbrk_aligned+0x34>
 80046be:	1cc4      	adds	r4, r0, #3
 80046c0:	f024 0403 	bic.w	r4, r4, #3
 80046c4:	42a0      	cmp	r0, r4
 80046c6:	d007      	beq.n	80046d8 <sbrk_aligned+0x38>
 80046c8:	1a21      	subs	r1, r4, r0
 80046ca:	4628      	mov	r0, r5
 80046cc:	f000 f8e6 	bl	800489c <_sbrk_r>
 80046d0:	3001      	adds	r0, #1
 80046d2:	d101      	bne.n	80046d8 <sbrk_aligned+0x38>
 80046d4:	f04f 34ff 	mov.w	r4, #4294967295
 80046d8:	4620      	mov	r0, r4
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	20001180 	.word	0x20001180

080046e0 <_malloc_r>:
 80046e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e4:	1ccd      	adds	r5, r1, #3
 80046e6:	f025 0503 	bic.w	r5, r5, #3
 80046ea:	3508      	adds	r5, #8
 80046ec:	2d0c      	cmp	r5, #12
 80046ee:	bf38      	it	cc
 80046f0:	250c      	movcc	r5, #12
 80046f2:	2d00      	cmp	r5, #0
 80046f4:	4607      	mov	r7, r0
 80046f6:	db01      	blt.n	80046fc <_malloc_r+0x1c>
 80046f8:	42a9      	cmp	r1, r5
 80046fa:	d905      	bls.n	8004708 <_malloc_r+0x28>
 80046fc:	230c      	movs	r3, #12
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	2600      	movs	r6, #0
 8004702:	4630      	mov	r0, r6
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	4e2e      	ldr	r6, [pc, #184]	; (80047c4 <_malloc_r+0xe4>)
 800470a:	f000 f8f7 	bl	80048fc <__malloc_lock>
 800470e:	6833      	ldr	r3, [r6, #0]
 8004710:	461c      	mov	r4, r3
 8004712:	bb34      	cbnz	r4, 8004762 <_malloc_r+0x82>
 8004714:	4629      	mov	r1, r5
 8004716:	4638      	mov	r0, r7
 8004718:	f7ff ffc2 	bl	80046a0 <sbrk_aligned>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	4604      	mov	r4, r0
 8004720:	d14d      	bne.n	80047be <_malloc_r+0xde>
 8004722:	6834      	ldr	r4, [r6, #0]
 8004724:	4626      	mov	r6, r4
 8004726:	2e00      	cmp	r6, #0
 8004728:	d140      	bne.n	80047ac <_malloc_r+0xcc>
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	4631      	mov	r1, r6
 800472e:	4638      	mov	r0, r7
 8004730:	eb04 0803 	add.w	r8, r4, r3
 8004734:	f000 f8b2 	bl	800489c <_sbrk_r>
 8004738:	4580      	cmp	r8, r0
 800473a:	d13a      	bne.n	80047b2 <_malloc_r+0xd2>
 800473c:	6821      	ldr	r1, [r4, #0]
 800473e:	3503      	adds	r5, #3
 8004740:	1a6d      	subs	r5, r5, r1
 8004742:	f025 0503 	bic.w	r5, r5, #3
 8004746:	3508      	adds	r5, #8
 8004748:	2d0c      	cmp	r5, #12
 800474a:	bf38      	it	cc
 800474c:	250c      	movcc	r5, #12
 800474e:	4629      	mov	r1, r5
 8004750:	4638      	mov	r0, r7
 8004752:	f7ff ffa5 	bl	80046a0 <sbrk_aligned>
 8004756:	3001      	adds	r0, #1
 8004758:	d02b      	beq.n	80047b2 <_malloc_r+0xd2>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	442b      	add	r3, r5
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	e00e      	b.n	8004780 <_malloc_r+0xa0>
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	1b52      	subs	r2, r2, r5
 8004766:	d41e      	bmi.n	80047a6 <_malloc_r+0xc6>
 8004768:	2a0b      	cmp	r2, #11
 800476a:	d916      	bls.n	800479a <_malloc_r+0xba>
 800476c:	1961      	adds	r1, r4, r5
 800476e:	42a3      	cmp	r3, r4
 8004770:	6025      	str	r5, [r4, #0]
 8004772:	bf18      	it	ne
 8004774:	6059      	strne	r1, [r3, #4]
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	bf08      	it	eq
 800477a:	6031      	streq	r1, [r6, #0]
 800477c:	5162      	str	r2, [r4, r5]
 800477e:	604b      	str	r3, [r1, #4]
 8004780:	4638      	mov	r0, r7
 8004782:	f104 060b 	add.w	r6, r4, #11
 8004786:	f000 f8bf 	bl	8004908 <__malloc_unlock>
 800478a:	f026 0607 	bic.w	r6, r6, #7
 800478e:	1d23      	adds	r3, r4, #4
 8004790:	1af2      	subs	r2, r6, r3
 8004792:	d0b6      	beq.n	8004702 <_malloc_r+0x22>
 8004794:	1b9b      	subs	r3, r3, r6
 8004796:	50a3      	str	r3, [r4, r2]
 8004798:	e7b3      	b.n	8004702 <_malloc_r+0x22>
 800479a:	6862      	ldr	r2, [r4, #4]
 800479c:	42a3      	cmp	r3, r4
 800479e:	bf0c      	ite	eq
 80047a0:	6032      	streq	r2, [r6, #0]
 80047a2:	605a      	strne	r2, [r3, #4]
 80047a4:	e7ec      	b.n	8004780 <_malloc_r+0xa0>
 80047a6:	4623      	mov	r3, r4
 80047a8:	6864      	ldr	r4, [r4, #4]
 80047aa:	e7b2      	b.n	8004712 <_malloc_r+0x32>
 80047ac:	4634      	mov	r4, r6
 80047ae:	6876      	ldr	r6, [r6, #4]
 80047b0:	e7b9      	b.n	8004726 <_malloc_r+0x46>
 80047b2:	230c      	movs	r3, #12
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4638      	mov	r0, r7
 80047b8:	f000 f8a6 	bl	8004908 <__malloc_unlock>
 80047bc:	e7a1      	b.n	8004702 <_malloc_r+0x22>
 80047be:	6025      	str	r5, [r4, #0]
 80047c0:	e7de      	b.n	8004780 <_malloc_r+0xa0>
 80047c2:	bf00      	nop
 80047c4:	2000117c 	.word	0x2000117c

080047c8 <cleanup_glue>:
 80047c8:	b538      	push	{r3, r4, r5, lr}
 80047ca:	460c      	mov	r4, r1
 80047cc:	6809      	ldr	r1, [r1, #0]
 80047ce:	4605      	mov	r5, r0
 80047d0:	b109      	cbz	r1, 80047d6 <cleanup_glue+0xe>
 80047d2:	f7ff fff9 	bl	80047c8 <cleanup_glue>
 80047d6:	4621      	mov	r1, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047de:	f000 b899 	b.w	8004914 <_free_r>
	...

080047e4 <_reclaim_reent>:
 80047e4:	4b2c      	ldr	r3, [pc, #176]	; (8004898 <_reclaim_reent+0xb4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4283      	cmp	r3, r0
 80047ea:	b570      	push	{r4, r5, r6, lr}
 80047ec:	4604      	mov	r4, r0
 80047ee:	d051      	beq.n	8004894 <_reclaim_reent+0xb0>
 80047f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047f2:	b143      	cbz	r3, 8004806 <_reclaim_reent+0x22>
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d14a      	bne.n	8004890 <_reclaim_reent+0xac>
 80047fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047fc:	6819      	ldr	r1, [r3, #0]
 80047fe:	b111      	cbz	r1, 8004806 <_reclaim_reent+0x22>
 8004800:	4620      	mov	r0, r4
 8004802:	f000 f887 	bl	8004914 <_free_r>
 8004806:	6961      	ldr	r1, [r4, #20]
 8004808:	b111      	cbz	r1, 8004810 <_reclaim_reent+0x2c>
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f882 	bl	8004914 <_free_r>
 8004810:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004812:	b111      	cbz	r1, 800481a <_reclaim_reent+0x36>
 8004814:	4620      	mov	r0, r4
 8004816:	f000 f87d 	bl	8004914 <_free_r>
 800481a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800481c:	b111      	cbz	r1, 8004824 <_reclaim_reent+0x40>
 800481e:	4620      	mov	r0, r4
 8004820:	f000 f878 	bl	8004914 <_free_r>
 8004824:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004826:	b111      	cbz	r1, 800482e <_reclaim_reent+0x4a>
 8004828:	4620      	mov	r0, r4
 800482a:	f000 f873 	bl	8004914 <_free_r>
 800482e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004830:	b111      	cbz	r1, 8004838 <_reclaim_reent+0x54>
 8004832:	4620      	mov	r0, r4
 8004834:	f000 f86e 	bl	8004914 <_free_r>
 8004838:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800483a:	b111      	cbz	r1, 8004842 <_reclaim_reent+0x5e>
 800483c:	4620      	mov	r0, r4
 800483e:	f000 f869 	bl	8004914 <_free_r>
 8004842:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004844:	b111      	cbz	r1, 800484c <_reclaim_reent+0x68>
 8004846:	4620      	mov	r0, r4
 8004848:	f000 f864 	bl	8004914 <_free_r>
 800484c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484e:	b111      	cbz	r1, 8004856 <_reclaim_reent+0x72>
 8004850:	4620      	mov	r0, r4
 8004852:	f000 f85f 	bl	8004914 <_free_r>
 8004856:	69a3      	ldr	r3, [r4, #24]
 8004858:	b1e3      	cbz	r3, 8004894 <_reclaim_reent+0xb0>
 800485a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800485c:	4620      	mov	r0, r4
 800485e:	4798      	blx	r3
 8004860:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004862:	b1b9      	cbz	r1, 8004894 <_reclaim_reent+0xb0>
 8004864:	4620      	mov	r0, r4
 8004866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800486a:	f7ff bfad 	b.w	80047c8 <cleanup_glue>
 800486e:	5949      	ldr	r1, [r1, r5]
 8004870:	b941      	cbnz	r1, 8004884 <_reclaim_reent+0xa0>
 8004872:	3504      	adds	r5, #4
 8004874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004876:	2d80      	cmp	r5, #128	; 0x80
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	d1f8      	bne.n	800486e <_reclaim_reent+0x8a>
 800487c:	4620      	mov	r0, r4
 800487e:	f000 f849 	bl	8004914 <_free_r>
 8004882:	e7ba      	b.n	80047fa <_reclaim_reent+0x16>
 8004884:	680e      	ldr	r6, [r1, #0]
 8004886:	4620      	mov	r0, r4
 8004888:	f000 f844 	bl	8004914 <_free_r>
 800488c:	4631      	mov	r1, r6
 800488e:	e7ef      	b.n	8004870 <_reclaim_reent+0x8c>
 8004890:	2500      	movs	r5, #0
 8004892:	e7ef      	b.n	8004874 <_reclaim_reent+0x90>
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	bf00      	nop
 8004898:	20000010 	.word	0x20000010

0800489c <_sbrk_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4d06      	ldr	r5, [pc, #24]	; (80048b8 <_sbrk_r+0x1c>)
 80048a0:	2300      	movs	r3, #0
 80048a2:	4604      	mov	r4, r0
 80048a4:	4608      	mov	r0, r1
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	f7fc f83e 	bl	8000928 <_sbrk>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_sbrk_r+0x1a>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_sbrk_r+0x1a>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	20001184 	.word	0x20001184

080048bc <siprintf>:
 80048bc:	b40e      	push	{r1, r2, r3}
 80048be:	b500      	push	{lr}
 80048c0:	b09c      	sub	sp, #112	; 0x70
 80048c2:	ab1d      	add	r3, sp, #116	; 0x74
 80048c4:	9002      	str	r0, [sp, #8]
 80048c6:	9006      	str	r0, [sp, #24]
 80048c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048cc:	4809      	ldr	r0, [pc, #36]	; (80048f4 <siprintf+0x38>)
 80048ce:	9107      	str	r1, [sp, #28]
 80048d0:	9104      	str	r1, [sp, #16]
 80048d2:	4909      	ldr	r1, [pc, #36]	; (80048f8 <siprintf+0x3c>)
 80048d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d8:	9105      	str	r1, [sp, #20]
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	a902      	add	r1, sp, #8
 80048e0:	f000 f8c0 	bl	8004a64 <_svfiprintf_r>
 80048e4:	9b02      	ldr	r3, [sp, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	b01c      	add	sp, #112	; 0x70
 80048ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80048f0:	b003      	add	sp, #12
 80048f2:	4770      	bx	lr
 80048f4:	20000010 	.word	0x20000010
 80048f8:	ffff0208 	.word	0xffff0208

080048fc <__malloc_lock>:
 80048fc:	4801      	ldr	r0, [pc, #4]	; (8004904 <__malloc_lock+0x8>)
 80048fe:	f7ff beb7 	b.w	8004670 <__retarget_lock_acquire_recursive>
 8004902:	bf00      	nop
 8004904:	20001178 	.word	0x20001178

08004908 <__malloc_unlock>:
 8004908:	4801      	ldr	r0, [pc, #4]	; (8004910 <__malloc_unlock+0x8>)
 800490a:	f7ff beb2 	b.w	8004672 <__retarget_lock_release_recursive>
 800490e:	bf00      	nop
 8004910:	20001178 	.word	0x20001178

08004914 <_free_r>:
 8004914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004916:	2900      	cmp	r1, #0
 8004918:	d044      	beq.n	80049a4 <_free_r+0x90>
 800491a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491e:	9001      	str	r0, [sp, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f1a1 0404 	sub.w	r4, r1, #4
 8004926:	bfb8      	it	lt
 8004928:	18e4      	addlt	r4, r4, r3
 800492a:	f7ff ffe7 	bl	80048fc <__malloc_lock>
 800492e:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <_free_r+0x94>)
 8004930:	9801      	ldr	r0, [sp, #4]
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	b933      	cbnz	r3, 8004944 <_free_r+0x30>
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	6014      	str	r4, [r2, #0]
 800493a:	b003      	add	sp, #12
 800493c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004940:	f7ff bfe2 	b.w	8004908 <__malloc_unlock>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d908      	bls.n	800495a <_free_r+0x46>
 8004948:	6825      	ldr	r5, [r4, #0]
 800494a:	1961      	adds	r1, r4, r5
 800494c:	428b      	cmp	r3, r1
 800494e:	bf01      	itttt	eq
 8004950:	6819      	ldreq	r1, [r3, #0]
 8004952:	685b      	ldreq	r3, [r3, #4]
 8004954:	1949      	addeq	r1, r1, r5
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	e7ed      	b.n	8004936 <_free_r+0x22>
 800495a:	461a      	mov	r2, r3
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b10b      	cbz	r3, 8004964 <_free_r+0x50>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d9fa      	bls.n	800495a <_free_r+0x46>
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	1855      	adds	r5, r2, r1
 8004968:	42a5      	cmp	r5, r4
 800496a:	d10b      	bne.n	8004984 <_free_r+0x70>
 800496c:	6824      	ldr	r4, [r4, #0]
 800496e:	4421      	add	r1, r4
 8004970:	1854      	adds	r4, r2, r1
 8004972:	42a3      	cmp	r3, r4
 8004974:	6011      	str	r1, [r2, #0]
 8004976:	d1e0      	bne.n	800493a <_free_r+0x26>
 8004978:	681c      	ldr	r4, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	6053      	str	r3, [r2, #4]
 800497e:	4421      	add	r1, r4
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	e7da      	b.n	800493a <_free_r+0x26>
 8004984:	d902      	bls.n	800498c <_free_r+0x78>
 8004986:	230c      	movs	r3, #12
 8004988:	6003      	str	r3, [r0, #0]
 800498a:	e7d6      	b.n	800493a <_free_r+0x26>
 800498c:	6825      	ldr	r5, [r4, #0]
 800498e:	1961      	adds	r1, r4, r5
 8004990:	428b      	cmp	r3, r1
 8004992:	bf04      	itt	eq
 8004994:	6819      	ldreq	r1, [r3, #0]
 8004996:	685b      	ldreq	r3, [r3, #4]
 8004998:	6063      	str	r3, [r4, #4]
 800499a:	bf04      	itt	eq
 800499c:	1949      	addeq	r1, r1, r5
 800499e:	6021      	streq	r1, [r4, #0]
 80049a0:	6054      	str	r4, [r2, #4]
 80049a2:	e7ca      	b.n	800493a <_free_r+0x26>
 80049a4:	b003      	add	sp, #12
 80049a6:	bd30      	pop	{r4, r5, pc}
 80049a8:	2000117c 	.word	0x2000117c

080049ac <__ssputs_r>:
 80049ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b0:	688e      	ldr	r6, [r1, #8]
 80049b2:	429e      	cmp	r6, r3
 80049b4:	4682      	mov	sl, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	4690      	mov	r8, r2
 80049ba:	461f      	mov	r7, r3
 80049bc:	d838      	bhi.n	8004a30 <__ssputs_r+0x84>
 80049be:	898a      	ldrh	r2, [r1, #12]
 80049c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049c4:	d032      	beq.n	8004a2c <__ssputs_r+0x80>
 80049c6:	6825      	ldr	r5, [r4, #0]
 80049c8:	6909      	ldr	r1, [r1, #16]
 80049ca:	eba5 0901 	sub.w	r9, r5, r1
 80049ce:	6965      	ldr	r5, [r4, #20]
 80049d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049d8:	3301      	adds	r3, #1
 80049da:	444b      	add	r3, r9
 80049dc:	106d      	asrs	r5, r5, #1
 80049de:	429d      	cmp	r5, r3
 80049e0:	bf38      	it	cc
 80049e2:	461d      	movcc	r5, r3
 80049e4:	0553      	lsls	r3, r2, #21
 80049e6:	d531      	bpl.n	8004a4c <__ssputs_r+0xa0>
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7ff fe79 	bl	80046e0 <_malloc_r>
 80049ee:	4606      	mov	r6, r0
 80049f0:	b950      	cbnz	r0, 8004a08 <__ssputs_r+0x5c>
 80049f2:	230c      	movs	r3, #12
 80049f4:	f8ca 3000 	str.w	r3, [sl]
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	f04f 30ff 	mov.w	r0, #4294967295
 8004a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a08:	6921      	ldr	r1, [r4, #16]
 8004a0a:	464a      	mov	r2, r9
 8004a0c:	f7ff fe32 	bl	8004674 <memcpy>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1a:	81a3      	strh	r3, [r4, #12]
 8004a1c:	6126      	str	r6, [r4, #16]
 8004a1e:	6165      	str	r5, [r4, #20]
 8004a20:	444e      	add	r6, r9
 8004a22:	eba5 0509 	sub.w	r5, r5, r9
 8004a26:	6026      	str	r6, [r4, #0]
 8004a28:	60a5      	str	r5, [r4, #8]
 8004a2a:	463e      	mov	r6, r7
 8004a2c:	42be      	cmp	r6, r7
 8004a2e:	d900      	bls.n	8004a32 <__ssputs_r+0x86>
 8004a30:	463e      	mov	r6, r7
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	4632      	mov	r2, r6
 8004a36:	4641      	mov	r1, r8
 8004a38:	f000 faa8 	bl	8004f8c <memmove>
 8004a3c:	68a3      	ldr	r3, [r4, #8]
 8004a3e:	1b9b      	subs	r3, r3, r6
 8004a40:	60a3      	str	r3, [r4, #8]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	4433      	add	r3, r6
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e7db      	b.n	8004a04 <__ssputs_r+0x58>
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	f000 fab7 	bl	8004fc0 <_realloc_r>
 8004a52:	4606      	mov	r6, r0
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d1e1      	bne.n	8004a1c <__ssputs_r+0x70>
 8004a58:	6921      	ldr	r1, [r4, #16]
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	f7ff ff5a 	bl	8004914 <_free_r>
 8004a60:	e7c7      	b.n	80049f2 <__ssputs_r+0x46>
	...

08004a64 <_svfiprintf_r>:
 8004a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	4698      	mov	r8, r3
 8004a6a:	898b      	ldrh	r3, [r1, #12]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	b09d      	sub	sp, #116	; 0x74
 8004a70:	4607      	mov	r7, r0
 8004a72:	460d      	mov	r5, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	d50e      	bpl.n	8004a96 <_svfiprintf_r+0x32>
 8004a78:	690b      	ldr	r3, [r1, #16]
 8004a7a:	b963      	cbnz	r3, 8004a96 <_svfiprintf_r+0x32>
 8004a7c:	2140      	movs	r1, #64	; 0x40
 8004a7e:	f7ff fe2f 	bl	80046e0 <_malloc_r>
 8004a82:	6028      	str	r0, [r5, #0]
 8004a84:	6128      	str	r0, [r5, #16]
 8004a86:	b920      	cbnz	r0, 8004a92 <_svfiprintf_r+0x2e>
 8004a88:	230c      	movs	r3, #12
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	e0d1      	b.n	8004c36 <_svfiprintf_r+0x1d2>
 8004a92:	2340      	movs	r3, #64	; 0x40
 8004a94:	616b      	str	r3, [r5, #20]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9a:	2320      	movs	r3, #32
 8004a9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aa4:	2330      	movs	r3, #48	; 0x30
 8004aa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c50 <_svfiprintf_r+0x1ec>
 8004aaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aae:	f04f 0901 	mov.w	r9, #1
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	469a      	mov	sl, r3
 8004ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aba:	b10a      	cbz	r2, 8004ac0 <_svfiprintf_r+0x5c>
 8004abc:	2a25      	cmp	r2, #37	; 0x25
 8004abe:	d1f9      	bne.n	8004ab4 <_svfiprintf_r+0x50>
 8004ac0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ac4:	d00b      	beq.n	8004ade <_svfiprintf_r+0x7a>
 8004ac6:	465b      	mov	r3, fp
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4629      	mov	r1, r5
 8004acc:	4638      	mov	r0, r7
 8004ace:	f7ff ff6d 	bl	80049ac <__ssputs_r>
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f000 80aa 	beq.w	8004c2c <_svfiprintf_r+0x1c8>
 8004ad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ada:	445a      	add	r2, fp
 8004adc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ade:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80a2 	beq.w	8004c2c <_svfiprintf_r+0x1c8>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f04f 32ff 	mov.w	r2, #4294967295
 8004aee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af2:	f10a 0a01 	add.w	sl, sl, #1
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	9307      	str	r3, [sp, #28]
 8004afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004afe:	931a      	str	r3, [sp, #104]	; 0x68
 8004b00:	4654      	mov	r4, sl
 8004b02:	2205      	movs	r2, #5
 8004b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b08:	4851      	ldr	r0, [pc, #324]	; (8004c50 <_svfiprintf_r+0x1ec>)
 8004b0a:	f7fb fb61 	bl	80001d0 <memchr>
 8004b0e:	9a04      	ldr	r2, [sp, #16]
 8004b10:	b9d8      	cbnz	r0, 8004b4a <_svfiprintf_r+0xe6>
 8004b12:	06d0      	lsls	r0, r2, #27
 8004b14:	bf44      	itt	mi
 8004b16:	2320      	movmi	r3, #32
 8004b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b1c:	0711      	lsls	r1, r2, #28
 8004b1e:	bf44      	itt	mi
 8004b20:	232b      	movmi	r3, #43	; 0x2b
 8004b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b26:	f89a 3000 	ldrb.w	r3, [sl]
 8004b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b2c:	d015      	beq.n	8004b5a <_svfiprintf_r+0xf6>
 8004b2e:	9a07      	ldr	r2, [sp, #28]
 8004b30:	4654      	mov	r4, sl
 8004b32:	2000      	movs	r0, #0
 8004b34:	f04f 0c0a 	mov.w	ip, #10
 8004b38:	4621      	mov	r1, r4
 8004b3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b3e:	3b30      	subs	r3, #48	; 0x30
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	d94e      	bls.n	8004be2 <_svfiprintf_r+0x17e>
 8004b44:	b1b0      	cbz	r0, 8004b74 <_svfiprintf_r+0x110>
 8004b46:	9207      	str	r2, [sp, #28]
 8004b48:	e014      	b.n	8004b74 <_svfiprintf_r+0x110>
 8004b4a:	eba0 0308 	sub.w	r3, r0, r8
 8004b4e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b52:	4313      	orrs	r3, r2
 8004b54:	9304      	str	r3, [sp, #16]
 8004b56:	46a2      	mov	sl, r4
 8004b58:	e7d2      	b.n	8004b00 <_svfiprintf_r+0x9c>
 8004b5a:	9b03      	ldr	r3, [sp, #12]
 8004b5c:	1d19      	adds	r1, r3, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	9103      	str	r1, [sp, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfbb      	ittet	lt
 8004b66:	425b      	neglt	r3, r3
 8004b68:	f042 0202 	orrlt.w	r2, r2, #2
 8004b6c:	9307      	strge	r3, [sp, #28]
 8004b6e:	9307      	strlt	r3, [sp, #28]
 8004b70:	bfb8      	it	lt
 8004b72:	9204      	strlt	r2, [sp, #16]
 8004b74:	7823      	ldrb	r3, [r4, #0]
 8004b76:	2b2e      	cmp	r3, #46	; 0x2e
 8004b78:	d10c      	bne.n	8004b94 <_svfiprintf_r+0x130>
 8004b7a:	7863      	ldrb	r3, [r4, #1]
 8004b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b7e:	d135      	bne.n	8004bec <_svfiprintf_r+0x188>
 8004b80:	9b03      	ldr	r3, [sp, #12]
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	9203      	str	r2, [sp, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bfb8      	it	lt
 8004b8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b90:	3402      	adds	r4, #2
 8004b92:	9305      	str	r3, [sp, #20]
 8004b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c60 <_svfiprintf_r+0x1fc>
 8004b98:	7821      	ldrb	r1, [r4, #0]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	4650      	mov	r0, sl
 8004b9e:	f7fb fb17 	bl	80001d0 <memchr>
 8004ba2:	b140      	cbz	r0, 8004bb6 <_svfiprintf_r+0x152>
 8004ba4:	2340      	movs	r3, #64	; 0x40
 8004ba6:	eba0 000a 	sub.w	r0, r0, sl
 8004baa:	fa03 f000 	lsl.w	r0, r3, r0
 8004bae:	9b04      	ldr	r3, [sp, #16]
 8004bb0:	4303      	orrs	r3, r0
 8004bb2:	3401      	adds	r4, #1
 8004bb4:	9304      	str	r3, [sp, #16]
 8004bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bba:	4826      	ldr	r0, [pc, #152]	; (8004c54 <_svfiprintf_r+0x1f0>)
 8004bbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bc0:	2206      	movs	r2, #6
 8004bc2:	f7fb fb05 	bl	80001d0 <memchr>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d038      	beq.n	8004c3c <_svfiprintf_r+0x1d8>
 8004bca:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <_svfiprintf_r+0x1f4>)
 8004bcc:	bb1b      	cbnz	r3, 8004c16 <_svfiprintf_r+0x1b2>
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	3307      	adds	r3, #7
 8004bd2:	f023 0307 	bic.w	r3, r3, #7
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	9303      	str	r3, [sp, #12]
 8004bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bdc:	4433      	add	r3, r6
 8004bde:	9309      	str	r3, [sp, #36]	; 0x24
 8004be0:	e767      	b.n	8004ab2 <_svfiprintf_r+0x4e>
 8004be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004be6:	460c      	mov	r4, r1
 8004be8:	2001      	movs	r0, #1
 8004bea:	e7a5      	b.n	8004b38 <_svfiprintf_r+0xd4>
 8004bec:	2300      	movs	r3, #0
 8004bee:	3401      	adds	r4, #1
 8004bf0:	9305      	str	r3, [sp, #20]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f04f 0c0a 	mov.w	ip, #10
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bfe:	3a30      	subs	r2, #48	; 0x30
 8004c00:	2a09      	cmp	r2, #9
 8004c02:	d903      	bls.n	8004c0c <_svfiprintf_r+0x1a8>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0c5      	beq.n	8004b94 <_svfiprintf_r+0x130>
 8004c08:	9105      	str	r1, [sp, #20]
 8004c0a:	e7c3      	b.n	8004b94 <_svfiprintf_r+0x130>
 8004c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c10:	4604      	mov	r4, r0
 8004c12:	2301      	movs	r3, #1
 8004c14:	e7f0      	b.n	8004bf8 <_svfiprintf_r+0x194>
 8004c16:	ab03      	add	r3, sp, #12
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	462a      	mov	r2, r5
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <_svfiprintf_r+0x1f8>)
 8004c1e:	a904      	add	r1, sp, #16
 8004c20:	4638      	mov	r0, r7
 8004c22:	f3af 8000 	nop.w
 8004c26:	1c42      	adds	r2, r0, #1
 8004c28:	4606      	mov	r6, r0
 8004c2a:	d1d6      	bne.n	8004bda <_svfiprintf_r+0x176>
 8004c2c:	89ab      	ldrh	r3, [r5, #12]
 8004c2e:	065b      	lsls	r3, r3, #25
 8004c30:	f53f af2c 	bmi.w	8004a8c <_svfiprintf_r+0x28>
 8004c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c36:	b01d      	add	sp, #116	; 0x74
 8004c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3c:	ab03      	add	r3, sp, #12
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	462a      	mov	r2, r5
 8004c42:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <_svfiprintf_r+0x1f8>)
 8004c44:	a904      	add	r1, sp, #16
 8004c46:	4638      	mov	r0, r7
 8004c48:	f000 f87a 	bl	8004d40 <_printf_i>
 8004c4c:	e7eb      	b.n	8004c26 <_svfiprintf_r+0x1c2>
 8004c4e:	bf00      	nop
 8004c50:	080051f4 	.word	0x080051f4
 8004c54:	080051fe 	.word	0x080051fe
 8004c58:	00000000 	.word	0x00000000
 8004c5c:	080049ad 	.word	0x080049ad
 8004c60:	080051fa 	.word	0x080051fa

08004c64 <_printf_common>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	4616      	mov	r6, r2
 8004c6a:	4699      	mov	r9, r3
 8004c6c:	688a      	ldr	r2, [r1, #8]
 8004c6e:	690b      	ldr	r3, [r1, #16]
 8004c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c74:	4293      	cmp	r3, r2
 8004c76:	bfb8      	it	lt
 8004c78:	4613      	movlt	r3, r2
 8004c7a:	6033      	str	r3, [r6, #0]
 8004c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c80:	4607      	mov	r7, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	b10a      	cbz	r2, 8004c8a <_printf_common+0x26>
 8004c86:	3301      	adds	r3, #1
 8004c88:	6033      	str	r3, [r6, #0]
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	0699      	lsls	r1, r3, #26
 8004c8e:	bf42      	ittt	mi
 8004c90:	6833      	ldrmi	r3, [r6, #0]
 8004c92:	3302      	addmi	r3, #2
 8004c94:	6033      	strmi	r3, [r6, #0]
 8004c96:	6825      	ldr	r5, [r4, #0]
 8004c98:	f015 0506 	ands.w	r5, r5, #6
 8004c9c:	d106      	bne.n	8004cac <_printf_common+0x48>
 8004c9e:	f104 0a19 	add.w	sl, r4, #25
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	6832      	ldr	r2, [r6, #0]
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	42ab      	cmp	r3, r5
 8004caa:	dc26      	bgt.n	8004cfa <_printf_common+0x96>
 8004cac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cb0:	1e13      	subs	r3, r2, #0
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	bf18      	it	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	0692      	lsls	r2, r2, #26
 8004cba:	d42b      	bmi.n	8004d14 <_printf_common+0xb0>
 8004cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d01e      	beq.n	8004d08 <_printf_common+0xa4>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	68e5      	ldr	r5, [r4, #12]
 8004cce:	6832      	ldr	r2, [r6, #0]
 8004cd0:	f003 0306 	and.w	r3, r3, #6
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	bf08      	it	eq
 8004cd8:	1aad      	subeq	r5, r5, r2
 8004cda:	68a3      	ldr	r3, [r4, #8]
 8004cdc:	6922      	ldr	r2, [r4, #16]
 8004cde:	bf0c      	ite	eq
 8004ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ce4:	2500      	movne	r5, #0
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bfc4      	itt	gt
 8004cea:	1a9b      	subgt	r3, r3, r2
 8004cec:	18ed      	addgt	r5, r5, r3
 8004cee:	2600      	movs	r6, #0
 8004cf0:	341a      	adds	r4, #26
 8004cf2:	42b5      	cmp	r5, r6
 8004cf4:	d11a      	bne.n	8004d2c <_printf_common+0xc8>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e008      	b.n	8004d0c <_printf_common+0xa8>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	4649      	mov	r1, r9
 8004d00:	4638      	mov	r0, r7
 8004d02:	47c0      	blx	r8
 8004d04:	3001      	adds	r0, #1
 8004d06:	d103      	bne.n	8004d10 <_printf_common+0xac>
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	3501      	adds	r5, #1
 8004d12:	e7c6      	b.n	8004ca2 <_printf_common+0x3e>
 8004d14:	18e1      	adds	r1, r4, r3
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	2030      	movs	r0, #48	; 0x30
 8004d1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d1e:	4422      	add	r2, r4
 8004d20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d28:	3302      	adds	r3, #2
 8004d2a:	e7c7      	b.n	8004cbc <_printf_common+0x58>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4649      	mov	r1, r9
 8004d32:	4638      	mov	r0, r7
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d0e6      	beq.n	8004d08 <_printf_common+0xa4>
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7d9      	b.n	8004cf2 <_printf_common+0x8e>
	...

08004d40 <_printf_i>:
 8004d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	7e0f      	ldrb	r7, [r1, #24]
 8004d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d48:	2f78      	cmp	r7, #120	; 0x78
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	469a      	mov	sl, r3
 8004d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d56:	d807      	bhi.n	8004d68 <_printf_i+0x28>
 8004d58:	2f62      	cmp	r7, #98	; 0x62
 8004d5a:	d80a      	bhi.n	8004d72 <_printf_i+0x32>
 8004d5c:	2f00      	cmp	r7, #0
 8004d5e:	f000 80d8 	beq.w	8004f12 <_printf_i+0x1d2>
 8004d62:	2f58      	cmp	r7, #88	; 0x58
 8004d64:	f000 80a3 	beq.w	8004eae <_printf_i+0x16e>
 8004d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d70:	e03a      	b.n	8004de8 <_printf_i+0xa8>
 8004d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d76:	2b15      	cmp	r3, #21
 8004d78:	d8f6      	bhi.n	8004d68 <_printf_i+0x28>
 8004d7a:	a101      	add	r1, pc, #4	; (adr r1, 8004d80 <_printf_i+0x40>)
 8004d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d80:	08004dd9 	.word	0x08004dd9
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004d69 	.word	0x08004d69
 8004d8c:	08004d69 	.word	0x08004d69
 8004d90:	08004d69 	.word	0x08004d69
 8004d94:	08004d69 	.word	0x08004d69
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004d69 	.word	0x08004d69
 8004da0:	08004d69 	.word	0x08004d69
 8004da4:	08004d69 	.word	0x08004d69
 8004da8:	08004d69 	.word	0x08004d69
 8004dac:	08004ef9 	.word	0x08004ef9
 8004db0:	08004e1d 	.word	0x08004e1d
 8004db4:	08004edb 	.word	0x08004edb
 8004db8:	08004d69 	.word	0x08004d69
 8004dbc:	08004d69 	.word	0x08004d69
 8004dc0:	08004f1b 	.word	0x08004f1b
 8004dc4:	08004d69 	.word	0x08004d69
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004d69 	.word	0x08004d69
 8004dd0:	08004d69 	.word	0x08004d69
 8004dd4:	08004ee3 	.word	0x08004ee3
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	602a      	str	r2, [r5, #0]
 8004de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0a3      	b.n	8004f34 <_printf_i+0x1f4>
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	6829      	ldr	r1, [r5, #0]
 8004df0:	0606      	lsls	r6, r0, #24
 8004df2:	f101 0304 	add.w	r3, r1, #4
 8004df6:	d50a      	bpl.n	8004e0e <_printf_i+0xce>
 8004df8:	680e      	ldr	r6, [r1, #0]
 8004dfa:	602b      	str	r3, [r5, #0]
 8004dfc:	2e00      	cmp	r6, #0
 8004dfe:	da03      	bge.n	8004e08 <_printf_i+0xc8>
 8004e00:	232d      	movs	r3, #45	; 0x2d
 8004e02:	4276      	negs	r6, r6
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e08:	485e      	ldr	r0, [pc, #376]	; (8004f84 <_printf_i+0x244>)
 8004e0a:	230a      	movs	r3, #10
 8004e0c:	e019      	b.n	8004e42 <_printf_i+0x102>
 8004e0e:	680e      	ldr	r6, [r1, #0]
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e16:	bf18      	it	ne
 8004e18:	b236      	sxthne	r6, r6
 8004e1a:	e7ef      	b.n	8004dfc <_printf_i+0xbc>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	6820      	ldr	r0, [r4, #0]
 8004e20:	1d19      	adds	r1, r3, #4
 8004e22:	6029      	str	r1, [r5, #0]
 8004e24:	0601      	lsls	r1, r0, #24
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0xec>
 8004e28:	681e      	ldr	r6, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0xf2>
 8004e2c:	0646      	lsls	r6, r0, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0xe8>
 8004e30:	881e      	ldrh	r6, [r3, #0]
 8004e32:	4854      	ldr	r0, [pc, #336]	; (8004f84 <_printf_i+0x244>)
 8004e34:	2f6f      	cmp	r7, #111	; 0x6f
 8004e36:	bf0c      	ite	eq
 8004e38:	2308      	moveq	r3, #8
 8004e3a:	230a      	movne	r3, #10
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e42:	6865      	ldr	r5, [r4, #4]
 8004e44:	60a5      	str	r5, [r4, #8]
 8004e46:	2d00      	cmp	r5, #0
 8004e48:	bfa2      	ittt	ge
 8004e4a:	6821      	ldrge	r1, [r4, #0]
 8004e4c:	f021 0104 	bicge.w	r1, r1, #4
 8004e50:	6021      	strge	r1, [r4, #0]
 8004e52:	b90e      	cbnz	r6, 8004e58 <_printf_i+0x118>
 8004e54:	2d00      	cmp	r5, #0
 8004e56:	d04d      	beq.n	8004ef4 <_printf_i+0x1b4>
 8004e58:	4615      	mov	r5, r2
 8004e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e62:	5dc7      	ldrb	r7, [r0, r7]
 8004e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e68:	4637      	mov	r7, r6
 8004e6a:	42bb      	cmp	r3, r7
 8004e6c:	460e      	mov	r6, r1
 8004e6e:	d9f4      	bls.n	8004e5a <_printf_i+0x11a>
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d10b      	bne.n	8004e8c <_printf_i+0x14c>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	07de      	lsls	r6, r3, #31
 8004e78:	d508      	bpl.n	8004e8c <_printf_i+0x14c>
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	6861      	ldr	r1, [r4, #4]
 8004e7e:	4299      	cmp	r1, r3
 8004e80:	bfde      	ittt	le
 8004e82:	2330      	movle	r3, #48	; 0x30
 8004e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e8c:	1b52      	subs	r2, r2, r5
 8004e8e:	6122      	str	r2, [r4, #16]
 8004e90:	f8cd a000 	str.w	sl, [sp]
 8004e94:	464b      	mov	r3, r9
 8004e96:	aa03      	add	r2, sp, #12
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	f7ff fee2 	bl	8004c64 <_printf_common>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d14c      	bne.n	8004f3e <_printf_i+0x1fe>
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	b004      	add	sp, #16
 8004eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eae:	4835      	ldr	r0, [pc, #212]	; (8004f84 <_printf_i+0x244>)
 8004eb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004eb4:	6829      	ldr	r1, [r5, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ebc:	6029      	str	r1, [r5, #0]
 8004ebe:	061d      	lsls	r5, r3, #24
 8004ec0:	d514      	bpl.n	8004eec <_printf_i+0x1ac>
 8004ec2:	07df      	lsls	r7, r3, #31
 8004ec4:	bf44      	itt	mi
 8004ec6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eca:	6023      	strmi	r3, [r4, #0]
 8004ecc:	b91e      	cbnz	r6, 8004ed6 <_printf_i+0x196>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	f023 0320 	bic.w	r3, r3, #32
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	e7b0      	b.n	8004e3c <_printf_i+0xfc>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	f043 0320 	orr.w	r3, r3, #32
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	2378      	movs	r3, #120	; 0x78
 8004ee4:	4828      	ldr	r0, [pc, #160]	; (8004f88 <_printf_i+0x248>)
 8004ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004eea:	e7e3      	b.n	8004eb4 <_printf_i+0x174>
 8004eec:	0659      	lsls	r1, r3, #25
 8004eee:	bf48      	it	mi
 8004ef0:	b2b6      	uxthmi	r6, r6
 8004ef2:	e7e6      	b.n	8004ec2 <_printf_i+0x182>
 8004ef4:	4615      	mov	r5, r2
 8004ef6:	e7bb      	b.n	8004e70 <_printf_i+0x130>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	6826      	ldr	r6, [r4, #0]
 8004efc:	6961      	ldr	r1, [r4, #20]
 8004efe:	1d18      	adds	r0, r3, #4
 8004f00:	6028      	str	r0, [r5, #0]
 8004f02:	0635      	lsls	r5, r6, #24
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	d501      	bpl.n	8004f0c <_printf_i+0x1cc>
 8004f08:	6019      	str	r1, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <_printf_i+0x1d2>
 8004f0c:	0670      	lsls	r0, r6, #25
 8004f0e:	d5fb      	bpl.n	8004f08 <_printf_i+0x1c8>
 8004f10:	8019      	strh	r1, [r3, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	6123      	str	r3, [r4, #16]
 8004f16:	4615      	mov	r5, r2
 8004f18:	e7ba      	b.n	8004e90 <_printf_i+0x150>
 8004f1a:	682b      	ldr	r3, [r5, #0]
 8004f1c:	1d1a      	adds	r2, r3, #4
 8004f1e:	602a      	str	r2, [r5, #0]
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	6862      	ldr	r2, [r4, #4]
 8004f24:	2100      	movs	r1, #0
 8004f26:	4628      	mov	r0, r5
 8004f28:	f7fb f952 	bl	80001d0 <memchr>
 8004f2c:	b108      	cbz	r0, 8004f32 <_printf_i+0x1f2>
 8004f2e:	1b40      	subs	r0, r0, r5
 8004f30:	6060      	str	r0, [r4, #4]
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	2300      	movs	r3, #0
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f3c:	e7a8      	b.n	8004e90 <_printf_i+0x150>
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	462a      	mov	r2, r5
 8004f42:	4649      	mov	r1, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	47d0      	blx	sl
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d0ab      	beq.n	8004ea4 <_printf_i+0x164>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	079b      	lsls	r3, r3, #30
 8004f50:	d413      	bmi.n	8004f7a <_printf_i+0x23a>
 8004f52:	68e0      	ldr	r0, [r4, #12]
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	4298      	cmp	r0, r3
 8004f58:	bfb8      	it	lt
 8004f5a:	4618      	movlt	r0, r3
 8004f5c:	e7a4      	b.n	8004ea8 <_printf_i+0x168>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4632      	mov	r2, r6
 8004f62:	4649      	mov	r1, r9
 8004f64:	4640      	mov	r0, r8
 8004f66:	47d0      	blx	sl
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d09b      	beq.n	8004ea4 <_printf_i+0x164>
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	9903      	ldr	r1, [sp, #12]
 8004f72:	1a5b      	subs	r3, r3, r1
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	dcf2      	bgt.n	8004f5e <_printf_i+0x21e>
 8004f78:	e7eb      	b.n	8004f52 <_printf_i+0x212>
 8004f7a:	2500      	movs	r5, #0
 8004f7c:	f104 0619 	add.w	r6, r4, #25
 8004f80:	e7f5      	b.n	8004f6e <_printf_i+0x22e>
 8004f82:	bf00      	nop
 8004f84:	08005205 	.word	0x08005205
 8004f88:	08005216 	.word	0x08005216

08004f8c <memmove>:
 8004f8c:	4288      	cmp	r0, r1
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	eb01 0402 	add.w	r4, r1, r2
 8004f94:	d902      	bls.n	8004f9c <memmove+0x10>
 8004f96:	4284      	cmp	r4, r0
 8004f98:	4623      	mov	r3, r4
 8004f9a:	d807      	bhi.n	8004fac <memmove+0x20>
 8004f9c:	1e43      	subs	r3, r0, #1
 8004f9e:	42a1      	cmp	r1, r4
 8004fa0:	d008      	beq.n	8004fb4 <memmove+0x28>
 8004fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004faa:	e7f8      	b.n	8004f9e <memmove+0x12>
 8004fac:	4402      	add	r2, r0
 8004fae:	4601      	mov	r1, r0
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	d100      	bne.n	8004fb6 <memmove+0x2a>
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fbe:	e7f7      	b.n	8004fb0 <memmove+0x24>

08004fc0 <_realloc_r>:
 8004fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4614      	mov	r4, r2
 8004fc8:	460e      	mov	r6, r1
 8004fca:	b921      	cbnz	r1, 8004fd6 <_realloc_r+0x16>
 8004fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	f7ff bb85 	b.w	80046e0 <_malloc_r>
 8004fd6:	b92a      	cbnz	r2, 8004fe4 <_realloc_r+0x24>
 8004fd8:	f7ff fc9c 	bl	8004914 <_free_r>
 8004fdc:	4625      	mov	r5, r4
 8004fde:	4628      	mov	r0, r5
 8004fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe4:	f000 f81b 	bl	800501e <_malloc_usable_size_r>
 8004fe8:	4284      	cmp	r4, r0
 8004fea:	4607      	mov	r7, r0
 8004fec:	d802      	bhi.n	8004ff4 <_realloc_r+0x34>
 8004fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ff2:	d812      	bhi.n	800501a <_realloc_r+0x5a>
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f7ff fb72 	bl	80046e0 <_malloc_r>
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d0ed      	beq.n	8004fde <_realloc_r+0x1e>
 8005002:	42bc      	cmp	r4, r7
 8005004:	4622      	mov	r2, r4
 8005006:	4631      	mov	r1, r6
 8005008:	bf28      	it	cs
 800500a:	463a      	movcs	r2, r7
 800500c:	f7ff fb32 	bl	8004674 <memcpy>
 8005010:	4631      	mov	r1, r6
 8005012:	4640      	mov	r0, r8
 8005014:	f7ff fc7e 	bl	8004914 <_free_r>
 8005018:	e7e1      	b.n	8004fde <_realloc_r+0x1e>
 800501a:	4635      	mov	r5, r6
 800501c:	e7df      	b.n	8004fde <_realloc_r+0x1e>

0800501e <_malloc_usable_size_r>:
 800501e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005022:	1f18      	subs	r0, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	bfbc      	itt	lt
 8005028:	580b      	ldrlt	r3, [r1, r0]
 800502a:	18c0      	addlt	r0, r0, r3
 800502c:	4770      	bx	lr
	...

08005030 <_init>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	bf00      	nop
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr

0800503c <_fini>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr
